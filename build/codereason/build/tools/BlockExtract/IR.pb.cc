// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IR.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IR.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_TArch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_TArch_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_ConstantValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_ConstantValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_TVar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_TVar_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_RegArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_RegArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_Expression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_Expression_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_Statement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_Statement_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModule_DBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModule_DBlock_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_TArchMajor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_TArchMinor_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_Ops_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_ExType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_ValTy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_StType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_ExitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_MemoryEnd_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_RegisterClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_x86reg_8_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_x86reg_16_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_x86reg_32_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_x86reg_64_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DModule_armreg_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_IR_2eproto() {
  protobuf_AddDesc_IR_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IR.proto");
  GOOGLE_CHECK(file != NULL);
  DModule_descriptor_ = file->message_type(0);
  static const int DModule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule, blocks_),
  };
  DModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_descriptor_,
      DModule::default_instance_,
      DModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule));
  DModule_TArch_descriptor_ = DModule_descriptor_->nested_type(0);
  static const int DModule_TArch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TArch, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TArch, minor_),
  };
  DModule_TArch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_TArch_descriptor_,
      DModule_TArch::default_instance_,
      DModule_TArch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TArch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TArch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_TArch));
  DModule_ConstantValue_descriptor_ = DModule_descriptor_->nested_type(1);
  static const int DModule_ConstantValue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_ConstantValue, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_ConstantValue, isknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_ConstantValue, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_ConstantValue, val_),
  };
  DModule_ConstantValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_ConstantValue_descriptor_,
      DModule_ConstantValue::default_instance_,
      DModule_ConstantValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_ConstantValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_ConstantValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_ConstantValue));
  DModule_TVar_descriptor_ = DModule_descriptor_->nested_type(2);
  static const int DModule_TVar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TVar, varidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TVar, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TVar, ty_),
  };
  DModule_TVar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_TVar_descriptor_,
      DModule_TVar::default_instance_,
      DModule_TVar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TVar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_TVar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_TVar));
  DModule_RegArray_descriptor_ = DModule_descriptor_->nested_type(3);
  static const int DModule_RegArray_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_RegArray, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_RegArray, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_RegArray, numelems_),
  };
  DModule_RegArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_RegArray_descriptor_,
      DModule_RegArray::default_instance_,
      DModule_RegArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_RegArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_RegArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_RegArray));
  DModule_Expression_descriptor_ = DModule_descriptor_->nested_type(4);
  static const int DModule_Expression_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, op_opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, op_arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, rdtmp_tval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, load_loadty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, load_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, get_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, const_cval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, mux0x_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, mux0x_iftrue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, mux0x_iffalse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, get_regarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, ccall_targetfunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, ccall_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, get_varpart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, get_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, get_arch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, get_offset_),
  };
  DModule_Expression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_Expression_descriptor_,
      DModule_Expression::default_instance_,
      DModule_Expression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Expression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_Expression));
  DModule_Register_descriptor_ = DModule_descriptor_->nested_type(5);
  static const int DModule_Register_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, arch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, regclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, reg8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, reg16_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, reg32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, reg64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, regarm_),
  };
  DModule_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_Register_descriptor_,
      DModule_Register::default_instance_,
      DModule_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_Register));
  DModule_Statement_descriptor_ = DModule_descriptor_->nested_type(6);
  static const int DModule_Statement_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, wrtmp_rhs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, wrtmp_tmpwritten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, put_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, put_register_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, store_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, store_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, exit_blockexit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, exit_guardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, exit_jmptarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, llsc_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, llsc_storedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, llsc_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, dirty_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, dirty_guard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, dirty_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, dirty_calleename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, dirty_tmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_storeaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_datahi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_datalo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_expectedhi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_expectedlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_oldhi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_oldlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, cas_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, llsc_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, put_regarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, put_bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, put_varpart_),
  };
  DModule_Statement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_Statement_descriptor_,
      DModule_Statement::default_instance_,
      DModule_Statement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_Statement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_Statement));
  DModule_DBlock_descriptor_ = DModule_descriptor_->nested_type(7);
  static const int DModule_DBlock_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, baseaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, temps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, arch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, stmts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, blockexit_),
  };
  DModule_DBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModule_DBlock_descriptor_,
      DModule_DBlock::default_instance_,
      DModule_DBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModule_DBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModule_DBlock));
  DModule_TArchMajor_descriptor_ = DModule_descriptor_->enum_type(0);
  DModule_TArchMinor_descriptor_ = DModule_descriptor_->enum_type(1);
  DModule_Ops_descriptor_ = DModule_descriptor_->enum_type(2);
  DModule_ExType_descriptor_ = DModule_descriptor_->enum_type(3);
  DModule_ValTy_descriptor_ = DModule_descriptor_->enum_type(4);
  DModule_StType_descriptor_ = DModule_descriptor_->enum_type(5);
  DModule_ExitType_descriptor_ = DModule_descriptor_->enum_type(6);
  DModule_MemoryEnd_descriptor_ = DModule_descriptor_->enum_type(7);
  DModule_RegisterClass_descriptor_ = DModule_descriptor_->enum_type(8);
  DModule_x86reg_8_descriptor_ = DModule_descriptor_->enum_type(9);
  DModule_x86reg_16_descriptor_ = DModule_descriptor_->enum_type(10);
  DModule_x86reg_32_descriptor_ = DModule_descriptor_->enum_type(11);
  DModule_x86reg_64_descriptor_ = DModule_descriptor_->enum_type(12);
  DModule_armreg_descriptor_ = DModule_descriptor_->enum_type(13);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IR_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_descriptor_, &DModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_TArch_descriptor_, &DModule_TArch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_ConstantValue_descriptor_, &DModule_ConstantValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_TVar_descriptor_, &DModule_TVar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_RegArray_descriptor_, &DModule_RegArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_Expression_descriptor_, &DModule_Expression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_Register_descriptor_, &DModule_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_Statement_descriptor_, &DModule_Statement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModule_DBlock_descriptor_, &DModule_DBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IR_2eproto() {
  delete DModule::default_instance_;
  delete DModule_reflection_;
  delete DModule_TArch::default_instance_;
  delete DModule_TArch_reflection_;
  delete DModule_ConstantValue::default_instance_;
  delete DModule_ConstantValue_reflection_;
  delete DModule_TVar::default_instance_;
  delete DModule_TVar_reflection_;
  delete DModule_RegArray::default_instance_;
  delete DModule_RegArray_reflection_;
  delete DModule_Expression::default_instance_;
  delete DModule_Expression_reflection_;
  delete DModule_Register::default_instance_;
  delete DModule_Register_reflection_;
  delete DModule_Statement::default_instance_;
  delete DModule_Statement_reflection_;
  delete DModule_DBlock::default_instance_;
  delete DModule_DBlock_reflection_;
}

void protobuf_AddDesc_IR_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010IR.proto\"\3160\n\007DModule\022\020\n\010fileName\030\001 \002(\t"
    "\022\037\n\006blocks\030\002 \003(\0132\017.DModule.DBlock\032O\n\005TAr"
    "ch\022\"\n\005major\030\001 \002(\0162\023.DModule.TArchMajor\022\""
    "\n\005minor\030\002 \002(\0162\023.DModule.TArchMinor\032X\n\rCo"
    "nstantValue\022\032\n\002ty\030\001 \002(\0162\016.DModule.ValTy\022"
    "\017\n\007isKnown\030\002 \002(\010\022\r\n\005width\030\003 \002(\005\022\013\n\003val\030\004"
    " \001(\003\032A\n\004TVar\022\016\n\006varIdx\030\001 \002(\005\022\r\n\005width\030\002 "
    "\002(\005\022\032\n\002ty\030\003 \002(\0162\016.DModule.ValTy\032F\n\010RegAr"
    "ray\022\014\n\004base\030\001 \002(\005\022\032\n\002ty\030\002 \002(\0162\016.DModule."
    "ValTy\022\020\n\010numElems\030\003 \002(\005\032\235\005\n\nExpression\022\033"
    "\n\002ty\030\001 \002(\0162\017.DModule.ExType\022\037\n\tOp_opcode"
    "\030\002 \001(\0162\014.DModule.Ops\022)\n\014Op_arguments\030\003 \003"
    "(\0132\023.DModule.Expression\022!\n\nRdTmp_tval\030\004 "
    "\001(\0132\r.DModule.TVar\022#\n\013Load_loadTy\030\005 \001(\0162"
    "\016.DModule.ValTy\022&\n\tLoad_addr\030\006 \001(\0132\023.DMo"
    "dule.Expression\022\'\n\014Get_register\030\007 \001(\0132\021."
    "DModule.Register\022*\n\nConst_cval\030\010 \001(\0132\026.D"
    "Module.ConstantValue\022,\n\017Mux0X_condition\030"
    "\t \001(\0132\023.DModule.Expression\022)\n\014Mux0X_iftr"
    "ue\030\n \001(\0132\023.DModule.Expression\022*\n\rMux0X_i"
    "ffalse\030\013 \001(\0132\023.DModule.Expression\022\'\n\014Get"
    "_regarray\030\014 \001(\0132\021.DModule.RegArray\022\030\n\020CC"
    "all_targetFunc\030\r \001(\t\022\'\n\nCCall_args\030\016 \003(\013"
    "2\023.DModule.Expression\022(\n\013Get_varpart\030\017 \001"
    "(\0132\023.DModule.Expression\022\020\n\010Get_bias\030\020 \001("
    "\005\022 \n\010Get_arch\030\021 \001(\0132\016.DModule.TArch\022\022\n\nG"
    "et_offset\030\022 \001(\005\032\214\002\n\010Register\022\034\n\004arch\030\001 \002"
    "(\0132\016.DModule.TArch\022(\n\010regClass\030\002 \001(\0162\026.D"
    "Module.RegisterClass\022\r\n\005width\030\003 \001(\005\022\037\n\004R"
    "eg8\030\004 \001(\0162\021.DModule.x86reg_8\022!\n\005Reg16\030\005 "
    "\001(\0162\022.DModule.x86reg_16\022!\n\005Reg32\030\006 \001(\0162\022"
    ".DModule.x86reg_32\022!\n\005Reg64\030\007 \001(\0162\022.DMod"
    "ule.x86reg_64\022\037\n\006RegArm\030\010 \001(\0162\017.DModule."
    "armreg\032\234\t\n\tStatement\022\033\n\002ty\030\001 \002(\0162\017.DModu"
    "le.StType\022&\n\tWrTmp_RHS\030\002 \001(\0132\023.DModule.E"
    "xpression\022\'\n\020WrTmp_tmpWritten\030\003 \001(\0132\r.DM"
    "odule.TVar\022%\n\010Put_data\030\004 \001(\0132\023.DModule.E"
    "xpression\022\'\n\014Put_register\030\005 \001(\0132\021.DModul"
    "e.Register\022\'\n\nStore_data\030\006 \001(\0132\023.DModule"
    ".Expression\022\'\n\nStore_addr\030\007 \001(\0132\023.DModul"
    "e.Expression\022)\n\016Exit_blockexit\030\010 \001(\0162\021.D"
    "Module.ExitType\022*\n\rExit_guardExp\030\t \001(\0132\023"
    ".DModule.Expression\022+\n\016Exit_jmpTarget\030\n "
    "\001(\0132\023.DModule.Expression\022&\n\tLLSC_addr\030\013 "
    "\001(\0132\023.DModule.Expression\022+\n\016LLSC_storeda"
    "ta\030\014 \001(\0132\023.DModule.Expression\022\"\n\013LLSC_re"
    "sult\030\r \001(\0132\r.DModule.TVar\022\'\n\nDirty_addr\030"
    "\016 \001(\0132\023.DModule.Expression\022(\n\013Dirty_guar"
    "d\030\017 \001(\0132\023.DModule.Expression\022\'\n\nDirty_ar"
    "gs\030\020 \003(\0132\023.DModule.Expression\022\030\n\020Dirty_c"
    "alleename\030\021 \001(\t\022 \n\tDirty_tmp\030\022 \001(\0132\r.DMo"
    "dule.TVar\022*\n\rCAS_storeAddr\030\023 \001(\0132\023.DModu"
    "le.Expression\022\'\n\nCAS_datahi\030\024 \001(\0132\023.DMod"
    "ule.Expression\022\'\n\nCAS_datalo\030\025 \001(\0132\023.DMo"
    "dule.Expression\022+\n\016CAS_expectedhi\030\026 \001(\0132"
    "\023.DModule.Expression\022+\n\016CAS_expectedlo\030\027"
    " \001(\0132\023.DModule.Expression\022 \n\tCAS_oldhi\030\030"
    " \001(\0132\r.DModule.TVar\022 \n\tCAS_oldlo\030\031 \001(\0132\r"
    ".DModule.TVar\022#\n\007CAS_end\030\032 \001(\0162\022.DModule"
    ".MemoryEnd\022$\n\010LLSC_end\030\033 \001(\0162\022.DModule.M"
    "emoryEnd\022\'\n\014Put_regarray\030\034 \001(\0132\021.DModule"
    ".RegArray\022\020\n\010Put_bias\030\035 \001(\005\022(\n\013Put_varpa"
    "rt\030\036 \001(\0132\023.DModule.Expression\032\317\001\n\006DBlock"
    "\022\020\n\010baseAddr\030\001 \002(\003\022\034\n\005temps\030\002 \003(\0132\r.DMod"
    "ule.TVar\022\034\n\004arch\030\003 \002(\0132\016.DModule.TArch\022\013"
    "\n\003len\030\004 \002(\005\022!\n\005stmts\030\005 \003(\0132\022.DModule.Sta"
    "tement\022!\n\004next\030\006 \002(\0132\023.DModule.Expressio"
    "n\022$\n\tblockExit\030\007 \002(\0162\021.DModule.ExitType\""
    "]\n\nTArchMajor\022\021\n\rTA_MA_INVALID\020\000\022\007\n\003X86\020"
    "\001\022\t\n\005AMD64\020\002\022\007\n\003ARM\020\003\022\t\n\005PPC32\020\004\022\t\n\005PPC6"
    "4\020\005\022\t\n\005S390X\020\006\"7\n\nTArchMinor\022\021\n\rTA_MI_IN"
    "VALID\020\000\022\013\n\007WIDEARM\020\001\022\t\n\005THUMB\020\002\"\203\020\n\003Ops\022"
    "\007\n\003Add\020\000\022\007\n\003Sub\020\001\022\007\n\003Mul\020\002\022\010\n\004MulU\020\003\022\010\n\004"
    "MulS\020\004\022\006\n\002Or\020\005\022\007\n\003And\020\006\022\007\n\003Xor\020\007\022\007\n\003Shl\020"
    "\010\022\007\n\003Shr\020\t\022\007\n\003Sar\020\n\022\t\n\005CmpEQ\020\013\022\t\n\005CmpNE\020"
    "\014\022\n\n\006CmpLTS\020\r\022\n\n\006CmpLTU\020\016\022\n\n\006CmpLES\020\017\022\n\n"
    "\006CmpLEU\020\020\022\007\n\003Not\020\021\022\r\n\tCF32toF64\020\022\022\n\n\006C64"
    "to8\020\023\022\n\n\006C32to8\020\024\022\013\n\007C64to16\020\025\022\r\n\tC64LOt"
    "o32\020\026\022\r\n\tC64HIto32\020\027\022\r\n\tC32LOto16\020\030\022\r\n\tC"
    "32HIto16\020\031\022\014\n\010C16LOto8\020\032\022\014\n\010C16HIto8\020\033\022\r"
    "\n\tC16HLto32\020\034\022\013\n\007C1Uto32\020\035\022\n\n\006C1Uto8\020\036\022\013"
    "\n\007C8Uto32\020\037\022\013\n\007C8Sto32\020 \022\013\n\007C8Uto16\020!\022\013\n"
    "\007C8Sto16\020\"\022\013\n\007C8Uto64\020#\022\014\n\010C16Uto64\020$\022\014\n"
    "\010C16Uto32\020%\022\014\n\010C16Sto32\020&\022\014\n\010C32Uto64\020\'\022"
    "\014\n\010C32Sto64\020(\022\r\n\tC32HLto64\020)\022\n\n\006C32to1\020*"
    "\022\n\n\006C64to1\020+\022\021\n\rDivModS64to32\020,\022\021\n\rDivMo"
    "dU64to32\020-\022\013\n\007Sad8Ux4\020.\022\n\n\006Add8x8\020/\022\013\n\007A"
    "dd16x4\0200\022\013\n\007Add32x2\0201\022\013\n\007Add64x1\0202\022\014\n\010QA"
    "dd8Sx8\0203\022\r\n\tQAdd16Sx4\0204\022\r\n\tQAdd32Sx2\0205\022\r"
    "\n\tQAdd64Sx1\0206\022\014\n\010QAdd8Ux8\0207\022\r\n\tQAdd16Ux4"
    "\0208\022\r\n\tQAdd32Ux2\0209\022\r\n\tQAdd64Ux1\020:\022\n\n\006Sub8"
    "x8\020;\022\013\n\007Sub16x4\020<\022\013\n\007Sub32x2\020=\022\014\n\010QSub8S"
    "x8\020>\022\r\n\tQSub16Sx4\020\?\022\r\n\tQSub32Sx2\020@\022\r\n\tQS"
    "ub64Sx1\020A\022\014\n\010QSub8Ux8\020B\022\r\n\tQSub16Ux4\020C\022\r"
    "\n\tQSub32Ux2\020D\022\r\n\tQSub64Ux1\020E\022\014\n\010CmpEQ8x8"
    "\020F\022\r\n\tCmpEQ16x4\020G\022\r\n\tCmpEQ32x2\020H\022\r\n\tCmpG"
    "T8Ux8\020I\022\016\n\nCmpGT16Ux4\020J\022\016\n\nCmpGT32Ux2\020K\022"
    "\r\n\tCmpGT8Sx8\020L\022\016\n\nCmpGT16Sx4\020M\022\016\n\nCmpGT3"
    "2Sx2\020N\022\013\n\007ShlN8x8\020O\022\014\n\010ShlN16x4\020P\022\014\n\010Shl"
    "N32x2\020Q\022\013\n\007ShrN8x8\020R\022\014\n\010ShrN16x4\020S\022\014\n\010Sh"
    "rN32x2\020T\022\013\n\007SarN8x8\020U\022\014\n\010SarN16x4\020V\022\014\n\010S"
    "arN32x2\020W\022\n\n\006Mul8x8\020X\022\013\n\007Mul16x4\020Y\022\013\n\007Mu"
    "l32x2\020Z\022\014\n\010Mul32Fx2\020[\022\016\n\nMulHi16Ux4\020\\\022\016\n"
    "\nMulHi16Sx4\020]\022\016\n\nPolyMul8x8\020^\022\023\n\017Interle"
    "aveHI8x8\020_\022\024\n\020InterleaveHI16x4\020`\022\024\n\020Inte"
    "rleaveHI32x2\020a\022\023\n\017InterleaveLO8x8\020b\022\024\n\020I"
    "nterleaveLO16x4\020c\022\024\n\020InterleaveLO32x2\020d\022"
    "\031\n\025InterleaveOddLanes8x8\020e\022\032\n\026Interleave"
    "EvenLanes8x8\020f\022\032\n\026InterleaveOddLanes16x4"
    "\020g\022\033\n\027InterleaveEvenLanes16x4\020h\022\013\n\007Abs8x"
    "16\020i\022\013\n\007Abs16x8\020j\022\013\n\007Abs32x4\020k\022\014\n\010Avg8Ux"
    "16\020l\022\014\n\010Avg16Ux8\020m\022\014\n\010Avg32Ux4\020n\022\014\n\010Avg8"
    "Sx16\020o\022\014\n\010Avg16Sx8\020p\022\014\n\010Avg32Sx4\020q\022\014\n\010Ma"
    "x8Sx16\020r\022\014\n\010Max16Sx8\020s\022\014\n\010Max32Sx4\020t\022\014\n\010"
    "Max8Ux16\020u\022\014\n\010Max16Ux8\020v\022\014\n\010Max32Ux4\020w\022\014"
    "\n\010Min8Sx16\020x\022\014\n\010Min16Sx8\020y\022\014\n\010Min32Sx4\020z"
    "\022\014\n\010Min8Ux16\020{\022\014\n\010Min16Ux8\020|\022\014\n\010Min32Ux4"
    "\020}\022\013\n\007Min8Ux8\020~\022\014\n\010Min16Ux4\020\177\022\r\n\010Min32Ux"
    "2\020\200\001\022\014\n\007Max8Sx8\020\201\001\022\r\n\010Max16Sx4\020\202\001\022\r\n\010Max"
    "32Sx2\020\203\001\022\014\n\007Max8Ux8\020\204\001\022\r\n\010Max16Ux4\020\205\001\022\r\n"
    "\010Max32Ux2\020\206\001\022\014\n\007Min8Sx8\020\207\001\022\r\n\010Min16Sx4\020\210"
    "\001\022\r\n\010Min32Sx2\020\211\001\022\021\n\014QNarrow16Ux4\020\212\001\022\021\n\014Q"
    "Narrow16Sx4\020\213\001\022\021\n\014QNarrow32Sx2\020\214\001\022\n\n\005UNS"
    "UP\020\215\001\"O\n\006ExType\022\t\n\005Const\020\000\022\t\n\005RdTmp\020\001\022\006\n"
    "\002Op\020\002\022\010\n\004Load\020\003\022\t\n\005Mux0X\020\004\022\t\n\005CCall\020\005\022\007\n"
    "\003Get\020\006\"\205\001\n\005ValTy\022\r\n\tT_INVALID\020\000\022\010\n\004T_I1\020"
    "\001\022\010\n\004T_I8\020\002\022\t\n\005T_I16\020\003\022\t\n\005T_I32\020\004\022\t\n\005T_I"
    "64\020\005\022\n\n\006T_I128\020\006\022\t\n\005T_F32\020\007\022\t\n\005T_F64\020\010\022\n"
    "\n\006T_F128\020\t\022\n\n\006T_V128\020\n\"y\n\006StType\022\t\n\005WrTm"
    "p\020\000\022\t\n\005Store\020\001\022\007\n\003CAS\020\002\022\007\n\003Put\020\003\022\010\n\004LLSC"
    "\020\004\022\t\n\005Dirty\020\005\022\010\n\004Exit\020\006\022\t\n\005IMark\020\007\022\007\n\003NO"
    "P\020\010\022\013\n\007AbiHint\020\t\022\007\n\003MBE\020\n\"B\n\010ExitType\022\017\n"
    "\013Fallthrough\020\000\022\010\n\004Call\020\001\022\n\n\006Return\020\002\022\017\n\013"
    "UnknownExit\020\003\",\n\tMemoryEnd\022\r\n\tBigEndian\020"
    "\000\022\020\n\014LittleEndian\020\001\"h\n\rRegisterClass\022\023\n\017"
    "GenericRegister\020\000\022\020\n\014StackPointer\020\001\022\022\n\016P"
    "rogramCounter\020\002\022\t\n\005Flags\020\003\022\021\n\rInternalSt"
    "ate\020\004\"J\n\010x86reg_8\022\006\n\002AL\020\000\022\006\n\002AH\020\001\022\006\n\002BL\020"
    "\002\022\006\n\002BH\020\003\022\006\n\002CL\020\004\022\006\n\002CH\020\005\022\006\n\002DL\020\006\022\006\n\002DH\020"
    "\007\"K\n\tx86reg_16\022\006\n\002AX\020\000\022\006\n\002BX\020\001\022\006\n\002CX\020\002\022\006"
    "\n\002DX\020\003\022\006\n\002BP\020\004\022\006\n\002SI\020\005\022\006\n\002DI\020\006\022\006\n\002SP\020\007\"\203"
    "\002\n\tx86reg_32\022\007\n\003EAX\020\000\022\007\n\003EBX\020\001\022\007\n\003ECX\020\002\022"
    "\007\n\003EDX\020\003\022\007\n\003EDI\020\004\022\007\n\003ESI\020\005\022\007\n\003EBP\020\006\022\007\n\003E"
    "SP\020\007\022\007\n\003EIP\020\010\022\006\n\002CS\020\t\022\006\n\002DS\020\n\022\006\n\002ES\020\013\022\006\n"
    "\002FS\020\014\022\006\n\002GS\020\r\022\006\n\002SS\020\016\022\006\n\002OP\020\017\022\010\n\004DEP1\020\020\022"
    "\010\n\004DEP2\020\021\022\010\n\004NDEP\020\022\022\t\n\005DFLAG\020\023\022\n\n\006IDFLAG"
    "\020\024\022\n\n\006ACFLAG\020\025\022\010\n\004FTOP\020\026\022\t\n\005LDT32\020\027\022\t\n\005G"
    "DT32\020\030\022\014\n\010EMWARN32\020\031\"\264\001\n\tx86reg_64\022\007\n\003RA"
    "X\020\000\022\007\n\003RBX\020\001\022\007\n\003RCX\020\002\022\007\n\003RDX\020\003\022\007\n\003RDI\020\004\022"
    "\007\n\003RSI\020\005\022\007\n\003RSP\020\006\022\007\n\003RBP\020\007\022\007\n\003RIP\020\010\022\006\n\002R"
    "8\020\t\022\006\n\002R9\020\n\022\007\n\003R10\020\013\022\007\n\003R11\020\014\022\007\n\003R12\020\r\022\007"
    "\n\003R13\020\016\022\007\n\003R14\020\017\022\007\n\003R15\020\020\022\007\n\003GDT\020\021\022\007\n\003LD"
    "T\020\022\"\225\001\n\006armreg\022\007\n\003AR1\020\000\022\007\n\003AR2\020\001\022\007\n\003AR3\020"
    "\002\022\007\n\003AR4\020\003\022\007\n\003AR5\020\004\022\007\n\003AR6\020\005\022\007\n\003AR7\020\006\022\007\n"
    "\003AR8\020\007\022\007\n\003AR9\020\010\022\010\n\004AR10\020\t\022\010\n\004AR11\020\n\022\010\n\004A"
    "R12\020\013\022\010\n\004AR13\020\014\022\010\n\004AR14\020\r\022\010\n\004AR15\020\016", 6235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IR.proto", &protobuf_RegisterTypes);
  DModule::default_instance_ = new DModule();
  DModule_TArch::default_instance_ = new DModule_TArch();
  DModule_ConstantValue::default_instance_ = new DModule_ConstantValue();
  DModule_TVar::default_instance_ = new DModule_TVar();
  DModule_RegArray::default_instance_ = new DModule_RegArray();
  DModule_Expression::default_instance_ = new DModule_Expression();
  DModule_Register::default_instance_ = new DModule_Register();
  DModule_Statement::default_instance_ = new DModule_Statement();
  DModule_DBlock::default_instance_ = new DModule_DBlock();
  DModule::default_instance_->InitAsDefaultInstance();
  DModule_TArch::default_instance_->InitAsDefaultInstance();
  DModule_ConstantValue::default_instance_->InitAsDefaultInstance();
  DModule_TVar::default_instance_->InitAsDefaultInstance();
  DModule_RegArray::default_instance_->InitAsDefaultInstance();
  DModule_Expression::default_instance_->InitAsDefaultInstance();
  DModule_Register::default_instance_->InitAsDefaultInstance();
  DModule_Statement::default_instance_->InitAsDefaultInstance();
  DModule_DBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IR_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IR_2eproto {
  StaticDescriptorInitializer_IR_2eproto() {
    protobuf_AddDesc_IR_2eproto();
  }
} static_descriptor_initializer_IR_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* DModule_TArchMajor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_TArchMajor_descriptor_;
}
bool DModule_TArchMajor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_TArchMajor DModule::TA_MA_INVALID;
const DModule_TArchMajor DModule::X86;
const DModule_TArchMajor DModule::AMD64;
const DModule_TArchMajor DModule::ARM;
const DModule_TArchMajor DModule::PPC32;
const DModule_TArchMajor DModule::PPC64;
const DModule_TArchMajor DModule::S390X;
const DModule_TArchMajor DModule::TArchMajor_MIN;
const DModule_TArchMajor DModule::TArchMajor_MAX;
const int DModule::TArchMajor_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_TArchMinor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_TArchMinor_descriptor_;
}
bool DModule_TArchMinor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_TArchMinor DModule::TA_MI_INVALID;
const DModule_TArchMinor DModule::WIDEARM;
const DModule_TArchMinor DModule::THUMB;
const DModule_TArchMinor DModule::TArchMinor_MIN;
const DModule_TArchMinor DModule::TArchMinor_MAX;
const int DModule::TArchMinor_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_Ops_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_Ops_descriptor_;
}
bool DModule_Ops_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_Ops DModule::Add;
const DModule_Ops DModule::Sub;
const DModule_Ops DModule::Mul;
const DModule_Ops DModule::MulU;
const DModule_Ops DModule::MulS;
const DModule_Ops DModule::Or;
const DModule_Ops DModule::And;
const DModule_Ops DModule::Xor;
const DModule_Ops DModule::Shl;
const DModule_Ops DModule::Shr;
const DModule_Ops DModule::Sar;
const DModule_Ops DModule::CmpEQ;
const DModule_Ops DModule::CmpNE;
const DModule_Ops DModule::CmpLTS;
const DModule_Ops DModule::CmpLTU;
const DModule_Ops DModule::CmpLES;
const DModule_Ops DModule::CmpLEU;
const DModule_Ops DModule::Not;
const DModule_Ops DModule::CF32toF64;
const DModule_Ops DModule::C64to8;
const DModule_Ops DModule::C32to8;
const DModule_Ops DModule::C64to16;
const DModule_Ops DModule::C64LOto32;
const DModule_Ops DModule::C64HIto32;
const DModule_Ops DModule::C32LOto16;
const DModule_Ops DModule::C32HIto16;
const DModule_Ops DModule::C16LOto8;
const DModule_Ops DModule::C16HIto8;
const DModule_Ops DModule::C16HLto32;
const DModule_Ops DModule::C1Uto32;
const DModule_Ops DModule::C1Uto8;
const DModule_Ops DModule::C8Uto32;
const DModule_Ops DModule::C8Sto32;
const DModule_Ops DModule::C8Uto16;
const DModule_Ops DModule::C8Sto16;
const DModule_Ops DModule::C8Uto64;
const DModule_Ops DModule::C16Uto64;
const DModule_Ops DModule::C16Uto32;
const DModule_Ops DModule::C16Sto32;
const DModule_Ops DModule::C32Uto64;
const DModule_Ops DModule::C32Sto64;
const DModule_Ops DModule::C32HLto64;
const DModule_Ops DModule::C32to1;
const DModule_Ops DModule::C64to1;
const DModule_Ops DModule::DivModS64to32;
const DModule_Ops DModule::DivModU64to32;
const DModule_Ops DModule::Sad8Ux4;
const DModule_Ops DModule::Add8x8;
const DModule_Ops DModule::Add16x4;
const DModule_Ops DModule::Add32x2;
const DModule_Ops DModule::Add64x1;
const DModule_Ops DModule::QAdd8Sx8;
const DModule_Ops DModule::QAdd16Sx4;
const DModule_Ops DModule::QAdd32Sx2;
const DModule_Ops DModule::QAdd64Sx1;
const DModule_Ops DModule::QAdd8Ux8;
const DModule_Ops DModule::QAdd16Ux4;
const DModule_Ops DModule::QAdd32Ux2;
const DModule_Ops DModule::QAdd64Ux1;
const DModule_Ops DModule::Sub8x8;
const DModule_Ops DModule::Sub16x4;
const DModule_Ops DModule::Sub32x2;
const DModule_Ops DModule::QSub8Sx8;
const DModule_Ops DModule::QSub16Sx4;
const DModule_Ops DModule::QSub32Sx2;
const DModule_Ops DModule::QSub64Sx1;
const DModule_Ops DModule::QSub8Ux8;
const DModule_Ops DModule::QSub16Ux4;
const DModule_Ops DModule::QSub32Ux2;
const DModule_Ops DModule::QSub64Ux1;
const DModule_Ops DModule::CmpEQ8x8;
const DModule_Ops DModule::CmpEQ16x4;
const DModule_Ops DModule::CmpEQ32x2;
const DModule_Ops DModule::CmpGT8Ux8;
const DModule_Ops DModule::CmpGT16Ux4;
const DModule_Ops DModule::CmpGT32Ux2;
const DModule_Ops DModule::CmpGT8Sx8;
const DModule_Ops DModule::CmpGT16Sx4;
const DModule_Ops DModule::CmpGT32Sx2;
const DModule_Ops DModule::ShlN8x8;
const DModule_Ops DModule::ShlN16x4;
const DModule_Ops DModule::ShlN32x2;
const DModule_Ops DModule::ShrN8x8;
const DModule_Ops DModule::ShrN16x4;
const DModule_Ops DModule::ShrN32x2;
const DModule_Ops DModule::SarN8x8;
const DModule_Ops DModule::SarN16x4;
const DModule_Ops DModule::SarN32x2;
const DModule_Ops DModule::Mul8x8;
const DModule_Ops DModule::Mul16x4;
const DModule_Ops DModule::Mul32x2;
const DModule_Ops DModule::Mul32Fx2;
const DModule_Ops DModule::MulHi16Ux4;
const DModule_Ops DModule::MulHi16Sx4;
const DModule_Ops DModule::PolyMul8x8;
const DModule_Ops DModule::InterleaveHI8x8;
const DModule_Ops DModule::InterleaveHI16x4;
const DModule_Ops DModule::InterleaveHI32x2;
const DModule_Ops DModule::InterleaveLO8x8;
const DModule_Ops DModule::InterleaveLO16x4;
const DModule_Ops DModule::InterleaveLO32x2;
const DModule_Ops DModule::InterleaveOddLanes8x8;
const DModule_Ops DModule::InterleaveEvenLanes8x8;
const DModule_Ops DModule::InterleaveOddLanes16x4;
const DModule_Ops DModule::InterleaveEvenLanes16x4;
const DModule_Ops DModule::Abs8x16;
const DModule_Ops DModule::Abs16x8;
const DModule_Ops DModule::Abs32x4;
const DModule_Ops DModule::Avg8Ux16;
const DModule_Ops DModule::Avg16Ux8;
const DModule_Ops DModule::Avg32Ux4;
const DModule_Ops DModule::Avg8Sx16;
const DModule_Ops DModule::Avg16Sx8;
const DModule_Ops DModule::Avg32Sx4;
const DModule_Ops DModule::Max8Sx16;
const DModule_Ops DModule::Max16Sx8;
const DModule_Ops DModule::Max32Sx4;
const DModule_Ops DModule::Max8Ux16;
const DModule_Ops DModule::Max16Ux8;
const DModule_Ops DModule::Max32Ux4;
const DModule_Ops DModule::Min8Sx16;
const DModule_Ops DModule::Min16Sx8;
const DModule_Ops DModule::Min32Sx4;
const DModule_Ops DModule::Min8Ux16;
const DModule_Ops DModule::Min16Ux8;
const DModule_Ops DModule::Min32Ux4;
const DModule_Ops DModule::Min8Ux8;
const DModule_Ops DModule::Min16Ux4;
const DModule_Ops DModule::Min32Ux2;
const DModule_Ops DModule::Max8Sx8;
const DModule_Ops DModule::Max16Sx4;
const DModule_Ops DModule::Max32Sx2;
const DModule_Ops DModule::Max8Ux8;
const DModule_Ops DModule::Max16Ux4;
const DModule_Ops DModule::Max32Ux2;
const DModule_Ops DModule::Min8Sx8;
const DModule_Ops DModule::Min16Sx4;
const DModule_Ops DModule::Min32Sx2;
const DModule_Ops DModule::QNarrow16Ux4;
const DModule_Ops DModule::QNarrow16Sx4;
const DModule_Ops DModule::QNarrow32Sx2;
const DModule_Ops DModule::UNSUP;
const DModule_Ops DModule::Ops_MIN;
const DModule_Ops DModule::Ops_MAX;
const int DModule::Ops_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_ExType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_ExType_descriptor_;
}
bool DModule_ExType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_ExType DModule::Const;
const DModule_ExType DModule::RdTmp;
const DModule_ExType DModule::Op;
const DModule_ExType DModule::Load;
const DModule_ExType DModule::Mux0X;
const DModule_ExType DModule::CCall;
const DModule_ExType DModule::Get;
const DModule_ExType DModule::ExType_MIN;
const DModule_ExType DModule::ExType_MAX;
const int DModule::ExType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_ValTy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_ValTy_descriptor_;
}
bool DModule_ValTy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_ValTy DModule::T_INVALID;
const DModule_ValTy DModule::T_I1;
const DModule_ValTy DModule::T_I8;
const DModule_ValTy DModule::T_I16;
const DModule_ValTy DModule::T_I32;
const DModule_ValTy DModule::T_I64;
const DModule_ValTy DModule::T_I128;
const DModule_ValTy DModule::T_F32;
const DModule_ValTy DModule::T_F64;
const DModule_ValTy DModule::T_F128;
const DModule_ValTy DModule::T_V128;
const DModule_ValTy DModule::ValTy_MIN;
const DModule_ValTy DModule::ValTy_MAX;
const int DModule::ValTy_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_StType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_StType_descriptor_;
}
bool DModule_StType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_StType DModule::WrTmp;
const DModule_StType DModule::Store;
const DModule_StType DModule::CAS;
const DModule_StType DModule::Put;
const DModule_StType DModule::LLSC;
const DModule_StType DModule::Dirty;
const DModule_StType DModule::Exit;
const DModule_StType DModule::IMark;
const DModule_StType DModule::NOP;
const DModule_StType DModule::AbiHint;
const DModule_StType DModule::MBE;
const DModule_StType DModule::StType_MIN;
const DModule_StType DModule::StType_MAX;
const int DModule::StType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_ExitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_ExitType_descriptor_;
}
bool DModule_ExitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_ExitType DModule::Fallthrough;
const DModule_ExitType DModule::Call;
const DModule_ExitType DModule::Return;
const DModule_ExitType DModule::UnknownExit;
const DModule_ExitType DModule::ExitType_MIN;
const DModule_ExitType DModule::ExitType_MAX;
const int DModule::ExitType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_MemoryEnd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_MemoryEnd_descriptor_;
}
bool DModule_MemoryEnd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_MemoryEnd DModule::BigEndian;
const DModule_MemoryEnd DModule::LittleEndian;
const DModule_MemoryEnd DModule::MemoryEnd_MIN;
const DModule_MemoryEnd DModule::MemoryEnd_MAX;
const int DModule::MemoryEnd_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_RegisterClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_RegisterClass_descriptor_;
}
bool DModule_RegisterClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_RegisterClass DModule::GenericRegister;
const DModule_RegisterClass DModule::StackPointer;
const DModule_RegisterClass DModule::ProgramCounter;
const DModule_RegisterClass DModule::Flags;
const DModule_RegisterClass DModule::InternalState;
const DModule_RegisterClass DModule::RegisterClass_MIN;
const DModule_RegisterClass DModule::RegisterClass_MAX;
const int DModule::RegisterClass_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_x86reg_8_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_x86reg_8_descriptor_;
}
bool DModule_x86reg_8_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_x86reg_8 DModule::AL;
const DModule_x86reg_8 DModule::AH;
const DModule_x86reg_8 DModule::BL;
const DModule_x86reg_8 DModule::BH;
const DModule_x86reg_8 DModule::CL;
const DModule_x86reg_8 DModule::CH;
const DModule_x86reg_8 DModule::DL;
const DModule_x86reg_8 DModule::DH;
const DModule_x86reg_8 DModule::x86reg_8_MIN;
const DModule_x86reg_8 DModule::x86reg_8_MAX;
const int DModule::x86reg_8_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_x86reg_16_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_x86reg_16_descriptor_;
}
bool DModule_x86reg_16_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_x86reg_16 DModule::AX;
const DModule_x86reg_16 DModule::BX;
const DModule_x86reg_16 DModule::CX;
const DModule_x86reg_16 DModule::DX;
const DModule_x86reg_16 DModule::BP;
const DModule_x86reg_16 DModule::SI;
const DModule_x86reg_16 DModule::DI;
const DModule_x86reg_16 DModule::SP;
const DModule_x86reg_16 DModule::x86reg_16_MIN;
const DModule_x86reg_16 DModule::x86reg_16_MAX;
const int DModule::x86reg_16_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_x86reg_32_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_x86reg_32_descriptor_;
}
bool DModule_x86reg_32_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_x86reg_32 DModule::EAX;
const DModule_x86reg_32 DModule::EBX;
const DModule_x86reg_32 DModule::ECX;
const DModule_x86reg_32 DModule::EDX;
const DModule_x86reg_32 DModule::EDI;
const DModule_x86reg_32 DModule::ESI;
const DModule_x86reg_32 DModule::EBP;
const DModule_x86reg_32 DModule::ESP;
const DModule_x86reg_32 DModule::EIP;
const DModule_x86reg_32 DModule::CS;
const DModule_x86reg_32 DModule::DS;
const DModule_x86reg_32 DModule::ES;
const DModule_x86reg_32 DModule::FS;
const DModule_x86reg_32 DModule::GS;
const DModule_x86reg_32 DModule::SS;
const DModule_x86reg_32 DModule::OP;
const DModule_x86reg_32 DModule::DEP1;
const DModule_x86reg_32 DModule::DEP2;
const DModule_x86reg_32 DModule::NDEP;
const DModule_x86reg_32 DModule::DFLAG;
const DModule_x86reg_32 DModule::IDFLAG;
const DModule_x86reg_32 DModule::ACFLAG;
const DModule_x86reg_32 DModule::FTOP;
const DModule_x86reg_32 DModule::LDT32;
const DModule_x86reg_32 DModule::GDT32;
const DModule_x86reg_32 DModule::EMWARN32;
const DModule_x86reg_32 DModule::x86reg_32_MIN;
const DModule_x86reg_32 DModule::x86reg_32_MAX;
const int DModule::x86reg_32_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_x86reg_64_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_x86reg_64_descriptor_;
}
bool DModule_x86reg_64_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_x86reg_64 DModule::RAX;
const DModule_x86reg_64 DModule::RBX;
const DModule_x86reg_64 DModule::RCX;
const DModule_x86reg_64 DModule::RDX;
const DModule_x86reg_64 DModule::RDI;
const DModule_x86reg_64 DModule::RSI;
const DModule_x86reg_64 DModule::RSP;
const DModule_x86reg_64 DModule::RBP;
const DModule_x86reg_64 DModule::RIP;
const DModule_x86reg_64 DModule::R8;
const DModule_x86reg_64 DModule::R9;
const DModule_x86reg_64 DModule::R10;
const DModule_x86reg_64 DModule::R11;
const DModule_x86reg_64 DModule::R12;
const DModule_x86reg_64 DModule::R13;
const DModule_x86reg_64 DModule::R14;
const DModule_x86reg_64 DModule::R15;
const DModule_x86reg_64 DModule::GDT;
const DModule_x86reg_64 DModule::LDT;
const DModule_x86reg_64 DModule::x86reg_64_MIN;
const DModule_x86reg_64 DModule::x86reg_64_MAX;
const int DModule::x86reg_64_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DModule_armreg_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_armreg_descriptor_;
}
bool DModule_armreg_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DModule_armreg DModule::AR1;
const DModule_armreg DModule::AR2;
const DModule_armreg DModule::AR3;
const DModule_armreg DModule::AR4;
const DModule_armreg DModule::AR5;
const DModule_armreg DModule::AR6;
const DModule_armreg DModule::AR7;
const DModule_armreg DModule::AR8;
const DModule_armreg DModule::AR9;
const DModule_armreg DModule::AR10;
const DModule_armreg DModule::AR11;
const DModule_armreg DModule::AR12;
const DModule_armreg DModule::AR13;
const DModule_armreg DModule::AR14;
const DModule_armreg DModule::AR15;
const DModule_armreg DModule::armreg_MIN;
const DModule_armreg DModule::armreg_MAX;
const int DModule::armreg_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DModule_TArch::kMajorFieldNumber;
const int DModule_TArch::kMinorFieldNumber;
#endif  // !_MSC_VER

DModule_TArch::DModule_TArch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_TArch::InitAsDefaultInstance() {
}

DModule_TArch::DModule_TArch(const DModule_TArch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_TArch::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_TArch::~DModule_TArch() {
  SharedDtor();
}

void DModule_TArch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DModule_TArch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_TArch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_TArch_descriptor_;
}

const DModule_TArch& DModule_TArch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_TArch* DModule_TArch::default_instance_ = NULL;

DModule_TArch* DModule_TArch::New() const {
  return new DModule_TArch;
}

void DModule_TArch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = 0;
    minor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_TArch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DModule.TArchMajor major = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_TArchMajor_IsValid(value)) {
            set_major(static_cast< ::DModule_TArchMajor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // required .DModule.TArchMinor minor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_TArchMinor_IsValid(value)) {
            set_minor(static_cast< ::DModule_TArchMinor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_TArch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DModule.TArchMajor major = 1;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->major(), output);
  }

  // required .DModule.TArchMinor minor = 2;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->minor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_TArch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DModule.TArchMajor major = 1;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->major(), target);
  }

  // required .DModule.TArchMinor minor = 2;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->minor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_TArch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DModule.TArchMajor major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->major());
    }

    // required .DModule.TArchMinor minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->minor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_TArch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_TArch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_TArch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_TArch::MergeFrom(const DModule_TArch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_TArch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_TArch::CopyFrom(const DModule_TArch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_TArch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DModule_TArch::Swap(DModule_TArch* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_TArch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_TArch_descriptor_;
  metadata.reflection = DModule_TArch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_ConstantValue::kTyFieldNumber;
const int DModule_ConstantValue::kIsKnownFieldNumber;
const int DModule_ConstantValue::kWidthFieldNumber;
const int DModule_ConstantValue::kValFieldNumber;
#endif  // !_MSC_VER

DModule_ConstantValue::DModule_ConstantValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_ConstantValue::InitAsDefaultInstance() {
}

DModule_ConstantValue::DModule_ConstantValue(const DModule_ConstantValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_ConstantValue::SharedCtor() {
  _cached_size_ = 0;
  ty_ = 0;
  isknown_ = false;
  width_ = 0;
  val_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_ConstantValue::~DModule_ConstantValue() {
  SharedDtor();
}

void DModule_ConstantValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DModule_ConstantValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_ConstantValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_ConstantValue_descriptor_;
}

const DModule_ConstantValue& DModule_ConstantValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_ConstantValue* DModule_ConstantValue::default_instance_ = NULL;

DModule_ConstantValue* DModule_ConstantValue::New() const {
  return new DModule_ConstantValue;
}

void DModule_ConstantValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ty_ = 0;
    isknown_ = false;
    width_ = 0;
    val_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_ConstantValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DModule.ValTy ty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ValTy_IsValid(value)) {
            set_ty(static_cast< ::DModule_ValTy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isKnown;
        break;
      }

      // required bool isKnown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isKnown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isknown_)));
          set_has_isknown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // optional int64 val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_ConstantValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DModule.ValTy ty = 1;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ty(), output);
  }

  // required bool isKnown = 2;
  if (has_isknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isknown(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int64 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_ConstantValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DModule.ValTy ty = 1;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ty(), target);
  }

  // required bool isKnown = 2;
  if (has_isknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isknown(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int64 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_ConstantValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DModule.ValTy ty = 1;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
    }

    // required bool isKnown = 2;
    if (has_isknown()) {
      total_size += 1 + 1;
    }

    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int64 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_ConstantValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_ConstantValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_ConstantValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_ConstantValue::MergeFrom(const DModule_ConstantValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_isknown()) {
      set_isknown(from.isknown());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_ConstantValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_ConstantValue::CopyFrom(const DModule_ConstantValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_ConstantValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DModule_ConstantValue::Swap(DModule_ConstantValue* other) {
  if (other != this) {
    std::swap(ty_, other->ty_);
    std::swap(isknown_, other->isknown_);
    std::swap(width_, other->width_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_ConstantValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_ConstantValue_descriptor_;
  metadata.reflection = DModule_ConstantValue_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_TVar::kVarIdxFieldNumber;
const int DModule_TVar::kWidthFieldNumber;
const int DModule_TVar::kTyFieldNumber;
#endif  // !_MSC_VER

DModule_TVar::DModule_TVar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_TVar::InitAsDefaultInstance() {
}

DModule_TVar::DModule_TVar(const DModule_TVar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_TVar::SharedCtor() {
  _cached_size_ = 0;
  varidx_ = 0;
  width_ = 0;
  ty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_TVar::~DModule_TVar() {
  SharedDtor();
}

void DModule_TVar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DModule_TVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_TVar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_TVar_descriptor_;
}

const DModule_TVar& DModule_TVar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_TVar* DModule_TVar::default_instance_ = NULL;

DModule_TVar* DModule_TVar::New() const {
  return new DModule_TVar;
}

void DModule_TVar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    varidx_ = 0;
    width_ = 0;
    ty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_TVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 varIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &varidx_)));
          set_has_varidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // required int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ty;
        break;
      }

      // required .DModule.ValTy ty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ValTy_IsValid(value)) {
            set_ty(static_cast< ::DModule_ValTy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_TVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 varIdx = 1;
  if (has_varidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->varidx(), output);
  }

  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // required .DModule.ValTy ty = 3;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_TVar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 varIdx = 1;
  if (has_varidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->varidx(), target);
  }

  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // required .DModule.ValTy ty = 3;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_TVar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 varIdx = 1;
    if (has_varidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->varidx());
    }

    // required int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required .DModule.ValTy ty = 3;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_TVar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_TVar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_TVar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_TVar::MergeFrom(const DModule_TVar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_varidx()) {
      set_varidx(from.varidx());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_TVar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_TVar::CopyFrom(const DModule_TVar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_TVar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DModule_TVar::Swap(DModule_TVar* other) {
  if (other != this) {
    std::swap(varidx_, other->varidx_);
    std::swap(width_, other->width_);
    std::swap(ty_, other->ty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_TVar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_TVar_descriptor_;
  metadata.reflection = DModule_TVar_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_RegArray::kBaseFieldNumber;
const int DModule_RegArray::kTyFieldNumber;
const int DModule_RegArray::kNumElemsFieldNumber;
#endif  // !_MSC_VER

DModule_RegArray::DModule_RegArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_RegArray::InitAsDefaultInstance() {
}

DModule_RegArray::DModule_RegArray(const DModule_RegArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_RegArray::SharedCtor() {
  _cached_size_ = 0;
  base_ = 0;
  ty_ = 0;
  numelems_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_RegArray::~DModule_RegArray() {
  SharedDtor();
}

void DModule_RegArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DModule_RegArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_RegArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_RegArray_descriptor_;
}

const DModule_RegArray& DModule_RegArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_RegArray* DModule_RegArray::default_instance_ = NULL;

DModule_RegArray* DModule_RegArray::New() const {
  return new DModule_RegArray;
}

void DModule_RegArray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_ = 0;
    ty_ = 0;
    numelems_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_RegArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_)));
          set_has_base();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ty;
        break;
      }

      // required .DModule.ValTy ty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ValTy_IsValid(value)) {
            set_ty(static_cast< ::DModule_ValTy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numElems;
        break;
      }

      // required int32 numElems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numElems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numelems_)));
          set_has_numelems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_RegArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->base(), output);
  }

  // required .DModule.ValTy ty = 2;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ty(), output);
  }

  // required int32 numElems = 3;
  if (has_numelems()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->numelems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_RegArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->base(), target);
  }

  // required .DModule.ValTy ty = 2;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ty(), target);
  }

  // required int32 numElems = 3;
  if (has_numelems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->numelems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_RegArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base());
    }

    // required .DModule.ValTy ty = 2;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
    }

    // required int32 numElems = 3;
    if (has_numelems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numelems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_RegArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_RegArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_RegArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_RegArray::MergeFrom(const DModule_RegArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_numelems()) {
      set_numelems(from.numelems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_RegArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_RegArray::CopyFrom(const DModule_RegArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_RegArray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DModule_RegArray::Swap(DModule_RegArray* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ty_, other->ty_);
    std::swap(numelems_, other->numelems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_RegArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_RegArray_descriptor_;
  metadata.reflection = DModule_RegArray_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_Expression::kTyFieldNumber;
const int DModule_Expression::kOpOpcodeFieldNumber;
const int DModule_Expression::kOpArgumentsFieldNumber;
const int DModule_Expression::kRdTmpTvalFieldNumber;
const int DModule_Expression::kLoadLoadTyFieldNumber;
const int DModule_Expression::kLoadAddrFieldNumber;
const int DModule_Expression::kGetRegisterFieldNumber;
const int DModule_Expression::kConstCvalFieldNumber;
const int DModule_Expression::kMux0XConditionFieldNumber;
const int DModule_Expression::kMux0XIftrueFieldNumber;
const int DModule_Expression::kMux0XIffalseFieldNumber;
const int DModule_Expression::kGetRegarrayFieldNumber;
const int DModule_Expression::kCCallTargetFuncFieldNumber;
const int DModule_Expression::kCCallArgsFieldNumber;
const int DModule_Expression::kGetVarpartFieldNumber;
const int DModule_Expression::kGetBiasFieldNumber;
const int DModule_Expression::kGetArchFieldNumber;
const int DModule_Expression::kGetOffsetFieldNumber;
#endif  // !_MSC_VER

DModule_Expression::DModule_Expression()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_Expression::InitAsDefaultInstance() {
  rdtmp_tval_ = const_cast< ::DModule_TVar*>(&::DModule_TVar::default_instance());
  load_addr_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  get_register_ = const_cast< ::DModule_Register*>(&::DModule_Register::default_instance());
  const_cval_ = const_cast< ::DModule_ConstantValue*>(&::DModule_ConstantValue::default_instance());
  mux0x_condition_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  mux0x_iftrue_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  mux0x_iffalse_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  get_regarray_ = const_cast< ::DModule_RegArray*>(&::DModule_RegArray::default_instance());
  get_varpart_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  get_arch_ = const_cast< ::DModule_TArch*>(&::DModule_TArch::default_instance());
}

DModule_Expression::DModule_Expression(const DModule_Expression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_Expression::SharedCtor() {
  _cached_size_ = 0;
  ty_ = 0;
  op_opcode_ = 0;
  rdtmp_tval_ = NULL;
  load_loadty_ = 0;
  load_addr_ = NULL;
  get_register_ = NULL;
  const_cval_ = NULL;
  mux0x_condition_ = NULL;
  mux0x_iftrue_ = NULL;
  mux0x_iffalse_ = NULL;
  get_regarray_ = NULL;
  ccall_targetfunc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  get_varpart_ = NULL;
  get_bias_ = 0;
  get_arch_ = NULL;
  get_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_Expression::~DModule_Expression() {
  SharedDtor();
}

void DModule_Expression::SharedDtor() {
  if (ccall_targetfunc_ != &::google::protobuf::internal::kEmptyString) {
    delete ccall_targetfunc_;
  }
  if (this != default_instance_) {
    delete rdtmp_tval_;
    delete load_addr_;
    delete get_register_;
    delete const_cval_;
    delete mux0x_condition_;
    delete mux0x_iftrue_;
    delete mux0x_iffalse_;
    delete get_regarray_;
    delete get_varpart_;
    delete get_arch_;
  }
}

void DModule_Expression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_Expression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_Expression_descriptor_;
}

const DModule_Expression& DModule_Expression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_Expression* DModule_Expression::default_instance_ = NULL;

DModule_Expression* DModule_Expression::New() const {
  return new DModule_Expression;
}

void DModule_Expression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ty_ = 0;
    op_opcode_ = 0;
    if (has_rdtmp_tval()) {
      if (rdtmp_tval_ != NULL) rdtmp_tval_->::DModule_TVar::Clear();
    }
    load_loadty_ = 0;
    if (has_load_addr()) {
      if (load_addr_ != NULL) load_addr_->::DModule_Expression::Clear();
    }
    if (has_get_register()) {
      if (get_register_ != NULL) get_register_->::DModule_Register::Clear();
    }
    if (has_const_cval()) {
      if (const_cval_ != NULL) const_cval_->::DModule_ConstantValue::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mux0x_condition()) {
      if (mux0x_condition_ != NULL) mux0x_condition_->::DModule_Expression::Clear();
    }
    if (has_mux0x_iftrue()) {
      if (mux0x_iftrue_ != NULL) mux0x_iftrue_->::DModule_Expression::Clear();
    }
    if (has_mux0x_iffalse()) {
      if (mux0x_iffalse_ != NULL) mux0x_iffalse_->::DModule_Expression::Clear();
    }
    if (has_get_regarray()) {
      if (get_regarray_ != NULL) get_regarray_->::DModule_RegArray::Clear();
    }
    if (has_ccall_targetfunc()) {
      if (ccall_targetfunc_ != &::google::protobuf::internal::kEmptyString) {
        ccall_targetfunc_->clear();
      }
    }
    if (has_get_varpart()) {
      if (get_varpart_ != NULL) get_varpart_->::DModule_Expression::Clear();
    }
    get_bias_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_get_arch()) {
      if (get_arch_ != NULL) get_arch_->::DModule_TArch::Clear();
    }
    get_offset_ = 0;
  }
  op_arguments_.Clear();
  ccall_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_Expression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DModule.ExType ty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ExType_IsValid(value)) {
            set_ty(static_cast< ::DModule_ExType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Op_opcode;
        break;
      }

      // optional .DModule.Ops Op_opcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Op_opcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_Ops_IsValid(value)) {
            set_op_opcode(static_cast< ::DModule_Ops >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Op_arguments;
        break;
      }

      // repeated .DModule.Expression Op_arguments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Op_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Op_arguments;
        if (input->ExpectTag(34)) goto parse_RdTmp_tval;
        break;
      }

      // optional .DModule.TVar RdTmp_tval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RdTmp_tval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rdtmp_tval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Load_loadTy;
        break;
      }

      // optional .DModule.ValTy Load_loadTy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Load_loadTy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ValTy_IsValid(value)) {
            set_load_loadty(static_cast< ::DModule_ValTy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Load_addr;
        break;
      }

      // optional .DModule.Expression Load_addr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Load_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_load_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Get_register;
        break;
      }

      // optional .DModule.Register Get_register = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Get_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_register()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Const_cval;
        break;
      }

      // optional .DModule.ConstantValue Const_cval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Const_cval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_const_cval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Mux0X_condition;
        break;
      }

      // optional .DModule.Expression Mux0X_condition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Mux0X_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mux0x_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Mux0X_iftrue;
        break;
      }

      // optional .DModule.Expression Mux0X_iftrue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Mux0X_iftrue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mux0x_iftrue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Mux0X_iffalse;
        break;
      }

      // optional .DModule.Expression Mux0X_iffalse = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Mux0X_iffalse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mux0x_iffalse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Get_regarray;
        break;
      }

      // optional .DModule.RegArray Get_regarray = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Get_regarray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_regarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_CCall_targetFunc;
        break;
      }

      // optional string CCall_targetFunc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CCall_targetFunc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccall_targetfunc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ccall_targetfunc().data(), this->ccall_targetfunc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_CCall_args;
        break;
      }

      // repeated .DModule.Expression CCall_args = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CCall_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ccall_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_CCall_args;
        if (input->ExpectTag(122)) goto parse_Get_varpart;
        break;
      }

      // optional .DModule.Expression Get_varpart = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Get_varpart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_varpart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Get_bias;
        break;
      }

      // optional int32 Get_bias = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Get_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_bias_)));
          set_has_get_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_Get_arch;
        break;
      }

      // optional .DModule.TArch Get_arch = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Get_arch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_arch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_Get_offset;
        break;
      }

      // optional int32 Get_offset = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Get_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_offset_)));
          set_has_get_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_Expression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DModule.ExType ty = 1;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ty(), output);
  }

  // optional .DModule.Ops Op_opcode = 2;
  if (has_op_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->op_opcode(), output);
  }

  // repeated .DModule.Expression Op_arguments = 3;
  for (int i = 0; i < this->op_arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->op_arguments(i), output);
  }

  // optional .DModule.TVar RdTmp_tval = 4;
  if (has_rdtmp_tval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rdtmp_tval(), output);
  }

  // optional .DModule.ValTy Load_loadTy = 5;
  if (has_load_loadty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->load_loadty(), output);
  }

  // optional .DModule.Expression Load_addr = 6;
  if (has_load_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->load_addr(), output);
  }

  // optional .DModule.Register Get_register = 7;
  if (has_get_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->get_register(), output);
  }

  // optional .DModule.ConstantValue Const_cval = 8;
  if (has_const_cval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->const_cval(), output);
  }

  // optional .DModule.Expression Mux0X_condition = 9;
  if (has_mux0x_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mux0x_condition(), output);
  }

  // optional .DModule.Expression Mux0X_iftrue = 10;
  if (has_mux0x_iftrue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mux0x_iftrue(), output);
  }

  // optional .DModule.Expression Mux0X_iffalse = 11;
  if (has_mux0x_iffalse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->mux0x_iffalse(), output);
  }

  // optional .DModule.RegArray Get_regarray = 12;
  if (has_get_regarray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->get_regarray(), output);
  }

  // optional string CCall_targetFunc = 13;
  if (has_ccall_targetfunc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccall_targetfunc().data(), this->ccall_targetfunc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->ccall_targetfunc(), output);
  }

  // repeated .DModule.Expression CCall_args = 14;
  for (int i = 0; i < this->ccall_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ccall_args(i), output);
  }

  // optional .DModule.Expression Get_varpart = 15;
  if (has_get_varpart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->get_varpart(), output);
  }

  // optional int32 Get_bias = 16;
  if (has_get_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->get_bias(), output);
  }

  // optional .DModule.TArch Get_arch = 17;
  if (has_get_arch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->get_arch(), output);
  }

  // optional int32 Get_offset = 18;
  if (has_get_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->get_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_Expression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DModule.ExType ty = 1;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ty(), target);
  }

  // optional .DModule.Ops Op_opcode = 2;
  if (has_op_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->op_opcode(), target);
  }

  // repeated .DModule.Expression Op_arguments = 3;
  for (int i = 0; i < this->op_arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->op_arguments(i), target);
  }

  // optional .DModule.TVar RdTmp_tval = 4;
  if (has_rdtmp_tval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rdtmp_tval(), target);
  }

  // optional .DModule.ValTy Load_loadTy = 5;
  if (has_load_loadty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->load_loadty(), target);
  }

  // optional .DModule.Expression Load_addr = 6;
  if (has_load_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->load_addr(), target);
  }

  // optional .DModule.Register Get_register = 7;
  if (has_get_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->get_register(), target);
  }

  // optional .DModule.ConstantValue Const_cval = 8;
  if (has_const_cval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->const_cval(), target);
  }

  // optional .DModule.Expression Mux0X_condition = 9;
  if (has_mux0x_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mux0x_condition(), target);
  }

  // optional .DModule.Expression Mux0X_iftrue = 10;
  if (has_mux0x_iftrue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mux0x_iftrue(), target);
  }

  // optional .DModule.Expression Mux0X_iffalse = 11;
  if (has_mux0x_iffalse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->mux0x_iffalse(), target);
  }

  // optional .DModule.RegArray Get_regarray = 12;
  if (has_get_regarray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->get_regarray(), target);
  }

  // optional string CCall_targetFunc = 13;
  if (has_ccall_targetfunc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccall_targetfunc().data(), this->ccall_targetfunc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ccall_targetfunc(), target);
  }

  // repeated .DModule.Expression CCall_args = 14;
  for (int i = 0; i < this->ccall_args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ccall_args(i), target);
  }

  // optional .DModule.Expression Get_varpart = 15;
  if (has_get_varpart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->get_varpart(), target);
  }

  // optional int32 Get_bias = 16;
  if (has_get_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->get_bias(), target);
  }

  // optional .DModule.TArch Get_arch = 17;
  if (has_get_arch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->get_arch(), target);
  }

  // optional int32 Get_offset = 18;
  if (has_get_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->get_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_Expression::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DModule.ExType ty = 1;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
    }

    // optional .DModule.Ops Op_opcode = 2;
    if (has_op_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_opcode());
    }

    // optional .DModule.TVar RdTmp_tval = 4;
    if (has_rdtmp_tval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rdtmp_tval());
    }

    // optional .DModule.ValTy Load_loadTy = 5;
    if (has_load_loadty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->load_loadty());
    }

    // optional .DModule.Expression Load_addr = 6;
    if (has_load_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->load_addr());
    }

    // optional .DModule.Register Get_register = 7;
    if (has_get_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_register());
    }

    // optional .DModule.ConstantValue Const_cval = 8;
    if (has_const_cval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->const_cval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DModule.Expression Mux0X_condition = 9;
    if (has_mux0x_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mux0x_condition());
    }

    // optional .DModule.Expression Mux0X_iftrue = 10;
    if (has_mux0x_iftrue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mux0x_iftrue());
    }

    // optional .DModule.Expression Mux0X_iffalse = 11;
    if (has_mux0x_iffalse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mux0x_iffalse());
    }

    // optional .DModule.RegArray Get_regarray = 12;
    if (has_get_regarray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_regarray());
    }

    // optional string CCall_targetFunc = 13;
    if (has_ccall_targetfunc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccall_targetfunc());
    }

    // optional .DModule.Expression Get_varpart = 15;
    if (has_get_varpart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_varpart());
    }

    // optional int32 Get_bias = 16;
    if (has_get_bias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_bias());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .DModule.TArch Get_arch = 17;
    if (has_get_arch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_arch());
    }

    // optional int32 Get_offset = 18;
    if (has_get_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->get_offset());
    }

  }
  // repeated .DModule.Expression Op_arguments = 3;
  total_size += 1 * this->op_arguments_size();
  for (int i = 0; i < this->op_arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->op_arguments(i));
  }

  // repeated .DModule.Expression CCall_args = 14;
  total_size += 1 * this->ccall_args_size();
  for (int i = 0; i < this->ccall_args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ccall_args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_Expression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_Expression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_Expression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_Expression::MergeFrom(const DModule_Expression& from) {
  GOOGLE_CHECK_NE(&from, this);
  op_arguments_.MergeFrom(from.op_arguments_);
  ccall_args_.MergeFrom(from.ccall_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_op_opcode()) {
      set_op_opcode(from.op_opcode());
    }
    if (from.has_rdtmp_tval()) {
      mutable_rdtmp_tval()->::DModule_TVar::MergeFrom(from.rdtmp_tval());
    }
    if (from.has_load_loadty()) {
      set_load_loadty(from.load_loadty());
    }
    if (from.has_load_addr()) {
      mutable_load_addr()->::DModule_Expression::MergeFrom(from.load_addr());
    }
    if (from.has_get_register()) {
      mutable_get_register()->::DModule_Register::MergeFrom(from.get_register());
    }
    if (from.has_const_cval()) {
      mutable_const_cval()->::DModule_ConstantValue::MergeFrom(from.const_cval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mux0x_condition()) {
      mutable_mux0x_condition()->::DModule_Expression::MergeFrom(from.mux0x_condition());
    }
    if (from.has_mux0x_iftrue()) {
      mutable_mux0x_iftrue()->::DModule_Expression::MergeFrom(from.mux0x_iftrue());
    }
    if (from.has_mux0x_iffalse()) {
      mutable_mux0x_iffalse()->::DModule_Expression::MergeFrom(from.mux0x_iffalse());
    }
    if (from.has_get_regarray()) {
      mutable_get_regarray()->::DModule_RegArray::MergeFrom(from.get_regarray());
    }
    if (from.has_ccall_targetfunc()) {
      set_ccall_targetfunc(from.ccall_targetfunc());
    }
    if (from.has_get_varpart()) {
      mutable_get_varpart()->::DModule_Expression::MergeFrom(from.get_varpart());
    }
    if (from.has_get_bias()) {
      set_get_bias(from.get_bias());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_get_arch()) {
      mutable_get_arch()->::DModule_TArch::MergeFrom(from.get_arch());
    }
    if (from.has_get_offset()) {
      set_get_offset(from.get_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_Expression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_Expression::CopyFrom(const DModule_Expression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_Expression::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < op_arguments_size(); i++) {
    if (!this->op_arguments(i).IsInitialized()) return false;
  }
  if (has_rdtmp_tval()) {
    if (!this->rdtmp_tval().IsInitialized()) return false;
  }
  if (has_load_addr()) {
    if (!this->load_addr().IsInitialized()) return false;
  }
  if (has_get_register()) {
    if (!this->get_register().IsInitialized()) return false;
  }
  if (has_const_cval()) {
    if (!this->const_cval().IsInitialized()) return false;
  }
  if (has_mux0x_condition()) {
    if (!this->mux0x_condition().IsInitialized()) return false;
  }
  if (has_mux0x_iftrue()) {
    if (!this->mux0x_iftrue().IsInitialized()) return false;
  }
  if (has_mux0x_iffalse()) {
    if (!this->mux0x_iffalse().IsInitialized()) return false;
  }
  if (has_get_regarray()) {
    if (!this->get_regarray().IsInitialized()) return false;
  }
  for (int i = 0; i < ccall_args_size(); i++) {
    if (!this->ccall_args(i).IsInitialized()) return false;
  }
  if (has_get_varpart()) {
    if (!this->get_varpart().IsInitialized()) return false;
  }
  if (has_get_arch()) {
    if (!this->get_arch().IsInitialized()) return false;
  }
  return true;
}

void DModule_Expression::Swap(DModule_Expression* other) {
  if (other != this) {
    std::swap(ty_, other->ty_);
    std::swap(op_opcode_, other->op_opcode_);
    op_arguments_.Swap(&other->op_arguments_);
    std::swap(rdtmp_tval_, other->rdtmp_tval_);
    std::swap(load_loadty_, other->load_loadty_);
    std::swap(load_addr_, other->load_addr_);
    std::swap(get_register_, other->get_register_);
    std::swap(const_cval_, other->const_cval_);
    std::swap(mux0x_condition_, other->mux0x_condition_);
    std::swap(mux0x_iftrue_, other->mux0x_iftrue_);
    std::swap(mux0x_iffalse_, other->mux0x_iffalse_);
    std::swap(get_regarray_, other->get_regarray_);
    std::swap(ccall_targetfunc_, other->ccall_targetfunc_);
    ccall_args_.Swap(&other->ccall_args_);
    std::swap(get_varpart_, other->get_varpart_);
    std::swap(get_bias_, other->get_bias_);
    std::swap(get_arch_, other->get_arch_);
    std::swap(get_offset_, other->get_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_Expression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_Expression_descriptor_;
  metadata.reflection = DModule_Expression_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_Register::kArchFieldNumber;
const int DModule_Register::kRegClassFieldNumber;
const int DModule_Register::kWidthFieldNumber;
const int DModule_Register::kReg8FieldNumber;
const int DModule_Register::kReg16FieldNumber;
const int DModule_Register::kReg32FieldNumber;
const int DModule_Register::kReg64FieldNumber;
const int DModule_Register::kRegArmFieldNumber;
#endif  // !_MSC_VER

DModule_Register::DModule_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_Register::InitAsDefaultInstance() {
  arch_ = const_cast< ::DModule_TArch*>(&::DModule_TArch::default_instance());
}

DModule_Register::DModule_Register(const DModule_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_Register::SharedCtor() {
  _cached_size_ = 0;
  arch_ = NULL;
  regclass_ = 0;
  width_ = 0;
  reg8_ = 0;
  reg16_ = 0;
  reg32_ = 0;
  reg64_ = 0;
  regarm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_Register::~DModule_Register() {
  SharedDtor();
}

void DModule_Register::SharedDtor() {
  if (this != default_instance_) {
    delete arch_;
  }
}

void DModule_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_Register_descriptor_;
}

const DModule_Register& DModule_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_Register* DModule_Register::default_instance_ = NULL;

DModule_Register* DModule_Register::New() const {
  return new DModule_Register;
}

void DModule_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_arch()) {
      if (arch_ != NULL) arch_->::DModule_TArch::Clear();
    }
    regclass_ = 0;
    width_ = 0;
    reg8_ = 0;
    reg16_ = 0;
    reg32_ = 0;
    reg64_ = 0;
    regarm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DModule.TArch arch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_regClass;
        break;
      }

      // optional .DModule.RegisterClass regClass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regClass:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_RegisterClass_IsValid(value)) {
            set_regclass(static_cast< ::DModule_RegisterClass >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Reg8;
        break;
      }

      // optional .DModule.x86reg_8 Reg8 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reg8:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_x86reg_8_IsValid(value)) {
            set_reg8(static_cast< ::DModule_x86reg_8 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Reg16;
        break;
      }

      // optional .DModule.x86reg_16 Reg16 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reg16:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_x86reg_16_IsValid(value)) {
            set_reg16(static_cast< ::DModule_x86reg_16 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Reg32;
        break;
      }

      // optional .DModule.x86reg_32 Reg32 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reg32:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_x86reg_32_IsValid(value)) {
            set_reg32(static_cast< ::DModule_x86reg_32 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Reg64;
        break;
      }

      // optional .DModule.x86reg_64 Reg64 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reg64:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_x86reg_64_IsValid(value)) {
            set_reg64(static_cast< ::DModule_x86reg_64 >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RegArm;
        break;
      }

      // optional .DModule.armreg RegArm = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegArm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_armreg_IsValid(value)) {
            set_regarm(static_cast< ::DModule_armreg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DModule.TArch arch = 1;
  if (has_arch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arch(), output);
  }

  // optional .DModule.RegisterClass regClass = 2;
  if (has_regclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->regclass(), output);
  }

  // optional int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional .DModule.x86reg_8 Reg8 = 4;
  if (has_reg8()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reg8(), output);
  }

  // optional .DModule.x86reg_16 Reg16 = 5;
  if (has_reg16()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reg16(), output);
  }

  // optional .DModule.x86reg_32 Reg32 = 6;
  if (has_reg32()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reg32(), output);
  }

  // optional .DModule.x86reg_64 Reg64 = 7;
  if (has_reg64()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reg64(), output);
  }

  // optional .DModule.armreg RegArm = 8;
  if (has_regarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->regarm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DModule.TArch arch = 1;
  if (has_arch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arch(), target);
  }

  // optional .DModule.RegisterClass regClass = 2;
  if (has_regclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->regclass(), target);
  }

  // optional int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional .DModule.x86reg_8 Reg8 = 4;
  if (has_reg8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reg8(), target);
  }

  // optional .DModule.x86reg_16 Reg16 = 5;
  if (has_reg16()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reg16(), target);
  }

  // optional .DModule.x86reg_32 Reg32 = 6;
  if (has_reg32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reg32(), target);
  }

  // optional .DModule.x86reg_64 Reg64 = 7;
  if (has_reg64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reg64(), target);
  }

  // optional .DModule.armreg RegArm = 8;
  if (has_regarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->regarm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DModule.TArch arch = 1;
    if (has_arch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arch());
    }

    // optional .DModule.RegisterClass regClass = 2;
    if (has_regclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->regclass());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional .DModule.x86reg_8 Reg8 = 4;
    if (has_reg8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reg8());
    }

    // optional .DModule.x86reg_16 Reg16 = 5;
    if (has_reg16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reg16());
    }

    // optional .DModule.x86reg_32 Reg32 = 6;
    if (has_reg32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reg32());
    }

    // optional .DModule.x86reg_64 Reg64 = 7;
    if (has_reg64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reg64());
    }

    // optional .DModule.armreg RegArm = 8;
    if (has_regarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->regarm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_Register::MergeFrom(const DModule_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arch()) {
      mutable_arch()->::DModule_TArch::MergeFrom(from.arch());
    }
    if (from.has_regclass()) {
      set_regclass(from.regclass());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_reg8()) {
      set_reg8(from.reg8());
    }
    if (from.has_reg16()) {
      set_reg16(from.reg16());
    }
    if (from.has_reg32()) {
      set_reg32(from.reg32());
    }
    if (from.has_reg64()) {
      set_reg64(from.reg64());
    }
    if (from.has_regarm()) {
      set_regarm(from.regarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_Register::CopyFrom(const DModule_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_arch()) {
    if (!this->arch().IsInitialized()) return false;
  }
  return true;
}

void DModule_Register::Swap(DModule_Register* other) {
  if (other != this) {
    std::swap(arch_, other->arch_);
    std::swap(regclass_, other->regclass_);
    std::swap(width_, other->width_);
    std::swap(reg8_, other->reg8_);
    std::swap(reg16_, other->reg16_);
    std::swap(reg32_, other->reg32_);
    std::swap(reg64_, other->reg64_);
    std::swap(regarm_, other->regarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_Register_descriptor_;
  metadata.reflection = DModule_Register_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_Statement::kTyFieldNumber;
const int DModule_Statement::kWrTmpRHSFieldNumber;
const int DModule_Statement::kWrTmpTmpWrittenFieldNumber;
const int DModule_Statement::kPutDataFieldNumber;
const int DModule_Statement::kPutRegisterFieldNumber;
const int DModule_Statement::kStoreDataFieldNumber;
const int DModule_Statement::kStoreAddrFieldNumber;
const int DModule_Statement::kExitBlockexitFieldNumber;
const int DModule_Statement::kExitGuardExpFieldNumber;
const int DModule_Statement::kExitJmpTargetFieldNumber;
const int DModule_Statement::kLLSCAddrFieldNumber;
const int DModule_Statement::kLLSCStoredataFieldNumber;
const int DModule_Statement::kLLSCResultFieldNumber;
const int DModule_Statement::kDirtyAddrFieldNumber;
const int DModule_Statement::kDirtyGuardFieldNumber;
const int DModule_Statement::kDirtyArgsFieldNumber;
const int DModule_Statement::kDirtyCalleenameFieldNumber;
const int DModule_Statement::kDirtyTmpFieldNumber;
const int DModule_Statement::kCASStoreAddrFieldNumber;
const int DModule_Statement::kCASDatahiFieldNumber;
const int DModule_Statement::kCASDataloFieldNumber;
const int DModule_Statement::kCASExpectedhiFieldNumber;
const int DModule_Statement::kCASExpectedloFieldNumber;
const int DModule_Statement::kCASOldhiFieldNumber;
const int DModule_Statement::kCASOldloFieldNumber;
const int DModule_Statement::kCASEndFieldNumber;
const int DModule_Statement::kLLSCEndFieldNumber;
const int DModule_Statement::kPutRegarrayFieldNumber;
const int DModule_Statement::kPutBiasFieldNumber;
const int DModule_Statement::kPutVarpartFieldNumber;
#endif  // !_MSC_VER

DModule_Statement::DModule_Statement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_Statement::InitAsDefaultInstance() {
  wrtmp_rhs_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  wrtmp_tmpwritten_ = const_cast< ::DModule_TVar*>(&::DModule_TVar::default_instance());
  put_data_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  put_register_ = const_cast< ::DModule_Register*>(&::DModule_Register::default_instance());
  store_data_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  store_addr_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  exit_guardexp_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  exit_jmptarget_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  llsc_addr_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  llsc_storedata_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  llsc_result_ = const_cast< ::DModule_TVar*>(&::DModule_TVar::default_instance());
  dirty_addr_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  dirty_guard_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  dirty_tmp_ = const_cast< ::DModule_TVar*>(&::DModule_TVar::default_instance());
  cas_storeaddr_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  cas_datahi_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  cas_datalo_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  cas_expectedhi_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  cas_expectedlo_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
  cas_oldhi_ = const_cast< ::DModule_TVar*>(&::DModule_TVar::default_instance());
  cas_oldlo_ = const_cast< ::DModule_TVar*>(&::DModule_TVar::default_instance());
  put_regarray_ = const_cast< ::DModule_RegArray*>(&::DModule_RegArray::default_instance());
  put_varpart_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
}

DModule_Statement::DModule_Statement(const DModule_Statement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_Statement::SharedCtor() {
  _cached_size_ = 0;
  ty_ = 0;
  wrtmp_rhs_ = NULL;
  wrtmp_tmpwritten_ = NULL;
  put_data_ = NULL;
  put_register_ = NULL;
  store_data_ = NULL;
  store_addr_ = NULL;
  exit_blockexit_ = 0;
  exit_guardexp_ = NULL;
  exit_jmptarget_ = NULL;
  llsc_addr_ = NULL;
  llsc_storedata_ = NULL;
  llsc_result_ = NULL;
  dirty_addr_ = NULL;
  dirty_guard_ = NULL;
  dirty_calleename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dirty_tmp_ = NULL;
  cas_storeaddr_ = NULL;
  cas_datahi_ = NULL;
  cas_datalo_ = NULL;
  cas_expectedhi_ = NULL;
  cas_expectedlo_ = NULL;
  cas_oldhi_ = NULL;
  cas_oldlo_ = NULL;
  cas_end_ = 0;
  llsc_end_ = 0;
  put_regarray_ = NULL;
  put_bias_ = 0;
  put_varpart_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_Statement::~DModule_Statement() {
  SharedDtor();
}

void DModule_Statement::SharedDtor() {
  if (dirty_calleename_ != &::google::protobuf::internal::kEmptyString) {
    delete dirty_calleename_;
  }
  if (this != default_instance_) {
    delete wrtmp_rhs_;
    delete wrtmp_tmpwritten_;
    delete put_data_;
    delete put_register_;
    delete store_data_;
    delete store_addr_;
    delete exit_guardexp_;
    delete exit_jmptarget_;
    delete llsc_addr_;
    delete llsc_storedata_;
    delete llsc_result_;
    delete dirty_addr_;
    delete dirty_guard_;
    delete dirty_tmp_;
    delete cas_storeaddr_;
    delete cas_datahi_;
    delete cas_datalo_;
    delete cas_expectedhi_;
    delete cas_expectedlo_;
    delete cas_oldhi_;
    delete cas_oldlo_;
    delete put_regarray_;
    delete put_varpart_;
  }
}

void DModule_Statement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_Statement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_Statement_descriptor_;
}

const DModule_Statement& DModule_Statement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_Statement* DModule_Statement::default_instance_ = NULL;

DModule_Statement* DModule_Statement::New() const {
  return new DModule_Statement;
}

void DModule_Statement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ty_ = 0;
    if (has_wrtmp_rhs()) {
      if (wrtmp_rhs_ != NULL) wrtmp_rhs_->::DModule_Expression::Clear();
    }
    if (has_wrtmp_tmpwritten()) {
      if (wrtmp_tmpwritten_ != NULL) wrtmp_tmpwritten_->::DModule_TVar::Clear();
    }
    if (has_put_data()) {
      if (put_data_ != NULL) put_data_->::DModule_Expression::Clear();
    }
    if (has_put_register()) {
      if (put_register_ != NULL) put_register_->::DModule_Register::Clear();
    }
    if (has_store_data()) {
      if (store_data_ != NULL) store_data_->::DModule_Expression::Clear();
    }
    if (has_store_addr()) {
      if (store_addr_ != NULL) store_addr_->::DModule_Expression::Clear();
    }
    exit_blockexit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_exit_guardexp()) {
      if (exit_guardexp_ != NULL) exit_guardexp_->::DModule_Expression::Clear();
    }
    if (has_exit_jmptarget()) {
      if (exit_jmptarget_ != NULL) exit_jmptarget_->::DModule_Expression::Clear();
    }
    if (has_llsc_addr()) {
      if (llsc_addr_ != NULL) llsc_addr_->::DModule_Expression::Clear();
    }
    if (has_llsc_storedata()) {
      if (llsc_storedata_ != NULL) llsc_storedata_->::DModule_Expression::Clear();
    }
    if (has_llsc_result()) {
      if (llsc_result_ != NULL) llsc_result_->::DModule_TVar::Clear();
    }
    if (has_dirty_addr()) {
      if (dirty_addr_ != NULL) dirty_addr_->::DModule_Expression::Clear();
    }
    if (has_dirty_guard()) {
      if (dirty_guard_ != NULL) dirty_guard_->::DModule_Expression::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_dirty_calleename()) {
      if (dirty_calleename_ != &::google::protobuf::internal::kEmptyString) {
        dirty_calleename_->clear();
      }
    }
    if (has_dirty_tmp()) {
      if (dirty_tmp_ != NULL) dirty_tmp_->::DModule_TVar::Clear();
    }
    if (has_cas_storeaddr()) {
      if (cas_storeaddr_ != NULL) cas_storeaddr_->::DModule_Expression::Clear();
    }
    if (has_cas_datahi()) {
      if (cas_datahi_ != NULL) cas_datahi_->::DModule_Expression::Clear();
    }
    if (has_cas_datalo()) {
      if (cas_datalo_ != NULL) cas_datalo_->::DModule_Expression::Clear();
    }
    if (has_cas_expectedhi()) {
      if (cas_expectedhi_ != NULL) cas_expectedhi_->::DModule_Expression::Clear();
    }
    if (has_cas_expectedlo()) {
      if (cas_expectedlo_ != NULL) cas_expectedlo_->::DModule_Expression::Clear();
    }
    if (has_cas_oldhi()) {
      if (cas_oldhi_ != NULL) cas_oldhi_->::DModule_TVar::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_cas_oldlo()) {
      if (cas_oldlo_ != NULL) cas_oldlo_->::DModule_TVar::Clear();
    }
    cas_end_ = 0;
    llsc_end_ = 0;
    if (has_put_regarray()) {
      if (put_regarray_ != NULL) put_regarray_->::DModule_RegArray::Clear();
    }
    put_bias_ = 0;
    if (has_put_varpart()) {
      if (put_varpart_ != NULL) put_varpart_->::DModule_Expression::Clear();
    }
  }
  dirty_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_Statement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DModule.StType ty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_StType_IsValid(value)) {
            set_ty(static_cast< ::DModule_StType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WrTmp_RHS;
        break;
      }

      // optional .DModule.Expression WrTmp_RHS = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WrTmp_RHS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrtmp_rhs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_WrTmp_tmpWritten;
        break;
      }

      // optional .DModule.TVar WrTmp_tmpWritten = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WrTmp_tmpWritten:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrtmp_tmpwritten()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Put_data;
        break;
      }

      // optional .DModule.Expression Put_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Put_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Put_register;
        break;
      }

      // optional .DModule.Register Put_register = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Put_register:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_register()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Store_data;
        break;
      }

      // optional .DModule.Expression Store_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Store_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Store_addr;
        break;
      }

      // optional .DModule.Expression Store_addr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Store_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Exit_blockexit;
        break;
      }

      // optional .DModule.ExitType Exit_blockexit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exit_blockexit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ExitType_IsValid(value)) {
            set_exit_blockexit(static_cast< ::DModule_ExitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Exit_guardExp;
        break;
      }

      // optional .DModule.Expression Exit_guardExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Exit_guardExp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exit_guardexp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Exit_jmpTarget;
        break;
      }

      // optional .DModule.Expression Exit_jmpTarget = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Exit_jmpTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exit_jmptarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_LLSC_addr;
        break;
      }

      // optional .DModule.Expression LLSC_addr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LLSC_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_llsc_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_LLSC_storedata;
        break;
      }

      // optional .DModule.Expression LLSC_storedata = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LLSC_storedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_llsc_storedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_LLSC_result;
        break;
      }

      // optional .DModule.TVar LLSC_result = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LLSC_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_llsc_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Dirty_addr;
        break;
      }

      // optional .DModule.Expression Dirty_addr = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dirty_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirty_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Dirty_guard;
        break;
      }

      // optional .DModule.Expression Dirty_guard = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dirty_guard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirty_guard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Dirty_args;
        break;
      }

      // repeated .DModule.Expression Dirty_args = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dirty_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirty_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_Dirty_args;
        if (input->ExpectTag(138)) goto parse_Dirty_calleename;
        break;
      }

      // optional string Dirty_calleename = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dirty_calleename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirty_calleename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dirty_calleename().data(), this->dirty_calleename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_Dirty_tmp;
        break;
      }

      // optional .DModule.TVar Dirty_tmp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Dirty_tmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirty_tmp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_CAS_storeAddr;
        break;
      }

      // optional .DModule.Expression CAS_storeAddr = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_storeAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_storeaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_CAS_datahi;
        break;
      }

      // optional .DModule.Expression CAS_datahi = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_datahi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_datahi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_CAS_datalo;
        break;
      }

      // optional .DModule.Expression CAS_datalo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_datalo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_datalo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_CAS_expectedhi;
        break;
      }

      // optional .DModule.Expression CAS_expectedhi = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_expectedhi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_expectedhi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_CAS_expectedlo;
        break;
      }

      // optional .DModule.Expression CAS_expectedlo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_expectedlo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_expectedlo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_CAS_oldhi;
        break;
      }

      // optional .DModule.TVar CAS_oldhi = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_oldhi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_oldhi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_CAS_oldlo;
        break;
      }

      // optional .DModule.TVar CAS_oldlo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CAS_oldlo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cas_oldlo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_CAS_end;
        break;
      }

      // optional .DModule.MemoryEnd CAS_end = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CAS_end:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_MemoryEnd_IsValid(value)) {
            set_cas_end(static_cast< ::DModule_MemoryEnd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_LLSC_end;
        break;
      }

      // optional .DModule.MemoryEnd LLSC_end = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LLSC_end:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_MemoryEnd_IsValid(value)) {
            set_llsc_end(static_cast< ::DModule_MemoryEnd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_Put_regarray;
        break;
      }

      // optional .DModule.RegArray Put_regarray = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Put_regarray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_regarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_Put_bias;
        break;
      }

      // optional int32 Put_bias = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Put_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &put_bias_)));
          set_has_put_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_Put_varpart;
        break;
      }

      // optional .DModule.Expression Put_varpart = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Put_varpart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put_varpart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_Statement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DModule.StType ty = 1;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ty(), output);
  }

  // optional .DModule.Expression WrTmp_RHS = 2;
  if (has_wrtmp_rhs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wrtmp_rhs(), output);
  }

  // optional .DModule.TVar WrTmp_tmpWritten = 3;
  if (has_wrtmp_tmpwritten()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wrtmp_tmpwritten(), output);
  }

  // optional .DModule.Expression Put_data = 4;
  if (has_put_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->put_data(), output);
  }

  // optional .DModule.Register Put_register = 5;
  if (has_put_register()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->put_register(), output);
  }

  // optional .DModule.Expression Store_data = 6;
  if (has_store_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->store_data(), output);
  }

  // optional .DModule.Expression Store_addr = 7;
  if (has_store_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->store_addr(), output);
  }

  // optional .DModule.ExitType Exit_blockexit = 8;
  if (has_exit_blockexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->exit_blockexit(), output);
  }

  // optional .DModule.Expression Exit_guardExp = 9;
  if (has_exit_guardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->exit_guardexp(), output);
  }

  // optional .DModule.Expression Exit_jmpTarget = 10;
  if (has_exit_jmptarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->exit_jmptarget(), output);
  }

  // optional .DModule.Expression LLSC_addr = 11;
  if (has_llsc_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->llsc_addr(), output);
  }

  // optional .DModule.Expression LLSC_storedata = 12;
  if (has_llsc_storedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->llsc_storedata(), output);
  }

  // optional .DModule.TVar LLSC_result = 13;
  if (has_llsc_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->llsc_result(), output);
  }

  // optional .DModule.Expression Dirty_addr = 14;
  if (has_dirty_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->dirty_addr(), output);
  }

  // optional .DModule.Expression Dirty_guard = 15;
  if (has_dirty_guard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->dirty_guard(), output);
  }

  // repeated .DModule.Expression Dirty_args = 16;
  for (int i = 0; i < this->dirty_args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->dirty_args(i), output);
  }

  // optional string Dirty_calleename = 17;
  if (has_dirty_calleename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirty_calleename().data(), this->dirty_calleename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->dirty_calleename(), output);
  }

  // optional .DModule.TVar Dirty_tmp = 18;
  if (has_dirty_tmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dirty_tmp(), output);
  }

  // optional .DModule.Expression CAS_storeAddr = 19;
  if (has_cas_storeaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->cas_storeaddr(), output);
  }

  // optional .DModule.Expression CAS_datahi = 20;
  if (has_cas_datahi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->cas_datahi(), output);
  }

  // optional .DModule.Expression CAS_datalo = 21;
  if (has_cas_datalo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->cas_datalo(), output);
  }

  // optional .DModule.Expression CAS_expectedhi = 22;
  if (has_cas_expectedhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->cas_expectedhi(), output);
  }

  // optional .DModule.Expression CAS_expectedlo = 23;
  if (has_cas_expectedlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->cas_expectedlo(), output);
  }

  // optional .DModule.TVar CAS_oldhi = 24;
  if (has_cas_oldhi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->cas_oldhi(), output);
  }

  // optional .DModule.TVar CAS_oldlo = 25;
  if (has_cas_oldlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->cas_oldlo(), output);
  }

  // optional .DModule.MemoryEnd CAS_end = 26;
  if (has_cas_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->cas_end(), output);
  }

  // optional .DModule.MemoryEnd LLSC_end = 27;
  if (has_llsc_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->llsc_end(), output);
  }

  // optional .DModule.RegArray Put_regarray = 28;
  if (has_put_regarray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->put_regarray(), output);
  }

  // optional int32 Put_bias = 29;
  if (has_put_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->put_bias(), output);
  }

  // optional .DModule.Expression Put_varpart = 30;
  if (has_put_varpart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->put_varpart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_Statement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DModule.StType ty = 1;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ty(), target);
  }

  // optional .DModule.Expression WrTmp_RHS = 2;
  if (has_wrtmp_rhs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wrtmp_rhs(), target);
  }

  // optional .DModule.TVar WrTmp_tmpWritten = 3;
  if (has_wrtmp_tmpwritten()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wrtmp_tmpwritten(), target);
  }

  // optional .DModule.Expression Put_data = 4;
  if (has_put_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->put_data(), target);
  }

  // optional .DModule.Register Put_register = 5;
  if (has_put_register()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->put_register(), target);
  }

  // optional .DModule.Expression Store_data = 6;
  if (has_store_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->store_data(), target);
  }

  // optional .DModule.Expression Store_addr = 7;
  if (has_store_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->store_addr(), target);
  }

  // optional .DModule.ExitType Exit_blockexit = 8;
  if (has_exit_blockexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->exit_blockexit(), target);
  }

  // optional .DModule.Expression Exit_guardExp = 9;
  if (has_exit_guardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->exit_guardexp(), target);
  }

  // optional .DModule.Expression Exit_jmpTarget = 10;
  if (has_exit_jmptarget()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->exit_jmptarget(), target);
  }

  // optional .DModule.Expression LLSC_addr = 11;
  if (has_llsc_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->llsc_addr(), target);
  }

  // optional .DModule.Expression LLSC_storedata = 12;
  if (has_llsc_storedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->llsc_storedata(), target);
  }

  // optional .DModule.TVar LLSC_result = 13;
  if (has_llsc_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->llsc_result(), target);
  }

  // optional .DModule.Expression Dirty_addr = 14;
  if (has_dirty_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->dirty_addr(), target);
  }

  // optional .DModule.Expression Dirty_guard = 15;
  if (has_dirty_guard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->dirty_guard(), target);
  }

  // repeated .DModule.Expression Dirty_args = 16;
  for (int i = 0; i < this->dirty_args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->dirty_args(i), target);
  }

  // optional string Dirty_calleename = 17;
  if (has_dirty_calleename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirty_calleename().data(), this->dirty_calleename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->dirty_calleename(), target);
  }

  // optional .DModule.TVar Dirty_tmp = 18;
  if (has_dirty_tmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->dirty_tmp(), target);
  }

  // optional .DModule.Expression CAS_storeAddr = 19;
  if (has_cas_storeaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->cas_storeaddr(), target);
  }

  // optional .DModule.Expression CAS_datahi = 20;
  if (has_cas_datahi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->cas_datahi(), target);
  }

  // optional .DModule.Expression CAS_datalo = 21;
  if (has_cas_datalo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->cas_datalo(), target);
  }

  // optional .DModule.Expression CAS_expectedhi = 22;
  if (has_cas_expectedhi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->cas_expectedhi(), target);
  }

  // optional .DModule.Expression CAS_expectedlo = 23;
  if (has_cas_expectedlo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->cas_expectedlo(), target);
  }

  // optional .DModule.TVar CAS_oldhi = 24;
  if (has_cas_oldhi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->cas_oldhi(), target);
  }

  // optional .DModule.TVar CAS_oldlo = 25;
  if (has_cas_oldlo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->cas_oldlo(), target);
  }

  // optional .DModule.MemoryEnd CAS_end = 26;
  if (has_cas_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->cas_end(), target);
  }

  // optional .DModule.MemoryEnd LLSC_end = 27;
  if (has_llsc_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->llsc_end(), target);
  }

  // optional .DModule.RegArray Put_regarray = 28;
  if (has_put_regarray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->put_regarray(), target);
  }

  // optional int32 Put_bias = 29;
  if (has_put_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->put_bias(), target);
  }

  // optional .DModule.Expression Put_varpart = 30;
  if (has_put_varpart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->put_varpart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_Statement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DModule.StType ty = 1;
    if (has_ty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ty());
    }

    // optional .DModule.Expression WrTmp_RHS = 2;
    if (has_wrtmp_rhs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrtmp_rhs());
    }

    // optional .DModule.TVar WrTmp_tmpWritten = 3;
    if (has_wrtmp_tmpwritten()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrtmp_tmpwritten());
    }

    // optional .DModule.Expression Put_data = 4;
    if (has_put_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_data());
    }

    // optional .DModule.Register Put_register = 5;
    if (has_put_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_register());
    }

    // optional .DModule.Expression Store_data = 6;
    if (has_store_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_data());
    }

    // optional .DModule.Expression Store_addr = 7;
    if (has_store_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->store_addr());
    }

    // optional .DModule.ExitType Exit_blockexit = 8;
    if (has_exit_blockexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exit_blockexit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .DModule.Expression Exit_guardExp = 9;
    if (has_exit_guardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exit_guardexp());
    }

    // optional .DModule.Expression Exit_jmpTarget = 10;
    if (has_exit_jmptarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exit_jmptarget());
    }

    // optional .DModule.Expression LLSC_addr = 11;
    if (has_llsc_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->llsc_addr());
    }

    // optional .DModule.Expression LLSC_storedata = 12;
    if (has_llsc_storedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->llsc_storedata());
    }

    // optional .DModule.TVar LLSC_result = 13;
    if (has_llsc_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->llsc_result());
    }

    // optional .DModule.Expression Dirty_addr = 14;
    if (has_dirty_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirty_addr());
    }

    // optional .DModule.Expression Dirty_guard = 15;
    if (has_dirty_guard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirty_guard());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string Dirty_calleename = 17;
    if (has_dirty_calleename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirty_calleename());
    }

    // optional .DModule.TVar Dirty_tmp = 18;
    if (has_dirty_tmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirty_tmp());
    }

    // optional .DModule.Expression CAS_storeAddr = 19;
    if (has_cas_storeaddr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_storeaddr());
    }

    // optional .DModule.Expression CAS_datahi = 20;
    if (has_cas_datahi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_datahi());
    }

    // optional .DModule.Expression CAS_datalo = 21;
    if (has_cas_datalo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_datalo());
    }

    // optional .DModule.Expression CAS_expectedhi = 22;
    if (has_cas_expectedhi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_expectedhi());
    }

    // optional .DModule.Expression CAS_expectedlo = 23;
    if (has_cas_expectedlo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_expectedlo());
    }

    // optional .DModule.TVar CAS_oldhi = 24;
    if (has_cas_oldhi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_oldhi());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .DModule.TVar CAS_oldlo = 25;
    if (has_cas_oldlo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cas_oldlo());
    }

    // optional .DModule.MemoryEnd CAS_end = 26;
    if (has_cas_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cas_end());
    }

    // optional .DModule.MemoryEnd LLSC_end = 27;
    if (has_llsc_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->llsc_end());
    }

    // optional .DModule.RegArray Put_regarray = 28;
    if (has_put_regarray()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_regarray());
    }

    // optional int32 Put_bias = 29;
    if (has_put_bias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->put_bias());
    }

    // optional .DModule.Expression Put_varpart = 30;
    if (has_put_varpart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put_varpart());
    }

  }
  // repeated .DModule.Expression Dirty_args = 16;
  total_size += 2 * this->dirty_args_size();
  for (int i = 0; i < this->dirty_args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirty_args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_Statement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_Statement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_Statement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_Statement::MergeFrom(const DModule_Statement& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirty_args_.MergeFrom(from.dirty_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_wrtmp_rhs()) {
      mutable_wrtmp_rhs()->::DModule_Expression::MergeFrom(from.wrtmp_rhs());
    }
    if (from.has_wrtmp_tmpwritten()) {
      mutable_wrtmp_tmpwritten()->::DModule_TVar::MergeFrom(from.wrtmp_tmpwritten());
    }
    if (from.has_put_data()) {
      mutable_put_data()->::DModule_Expression::MergeFrom(from.put_data());
    }
    if (from.has_put_register()) {
      mutable_put_register()->::DModule_Register::MergeFrom(from.put_register());
    }
    if (from.has_store_data()) {
      mutable_store_data()->::DModule_Expression::MergeFrom(from.store_data());
    }
    if (from.has_store_addr()) {
      mutable_store_addr()->::DModule_Expression::MergeFrom(from.store_addr());
    }
    if (from.has_exit_blockexit()) {
      set_exit_blockexit(from.exit_blockexit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exit_guardexp()) {
      mutable_exit_guardexp()->::DModule_Expression::MergeFrom(from.exit_guardexp());
    }
    if (from.has_exit_jmptarget()) {
      mutable_exit_jmptarget()->::DModule_Expression::MergeFrom(from.exit_jmptarget());
    }
    if (from.has_llsc_addr()) {
      mutable_llsc_addr()->::DModule_Expression::MergeFrom(from.llsc_addr());
    }
    if (from.has_llsc_storedata()) {
      mutable_llsc_storedata()->::DModule_Expression::MergeFrom(from.llsc_storedata());
    }
    if (from.has_llsc_result()) {
      mutable_llsc_result()->::DModule_TVar::MergeFrom(from.llsc_result());
    }
    if (from.has_dirty_addr()) {
      mutable_dirty_addr()->::DModule_Expression::MergeFrom(from.dirty_addr());
    }
    if (from.has_dirty_guard()) {
      mutable_dirty_guard()->::DModule_Expression::MergeFrom(from.dirty_guard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dirty_calleename()) {
      set_dirty_calleename(from.dirty_calleename());
    }
    if (from.has_dirty_tmp()) {
      mutable_dirty_tmp()->::DModule_TVar::MergeFrom(from.dirty_tmp());
    }
    if (from.has_cas_storeaddr()) {
      mutable_cas_storeaddr()->::DModule_Expression::MergeFrom(from.cas_storeaddr());
    }
    if (from.has_cas_datahi()) {
      mutable_cas_datahi()->::DModule_Expression::MergeFrom(from.cas_datahi());
    }
    if (from.has_cas_datalo()) {
      mutable_cas_datalo()->::DModule_Expression::MergeFrom(from.cas_datalo());
    }
    if (from.has_cas_expectedhi()) {
      mutable_cas_expectedhi()->::DModule_Expression::MergeFrom(from.cas_expectedhi());
    }
    if (from.has_cas_expectedlo()) {
      mutable_cas_expectedlo()->::DModule_Expression::MergeFrom(from.cas_expectedlo());
    }
    if (from.has_cas_oldhi()) {
      mutable_cas_oldhi()->::DModule_TVar::MergeFrom(from.cas_oldhi());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cas_oldlo()) {
      mutable_cas_oldlo()->::DModule_TVar::MergeFrom(from.cas_oldlo());
    }
    if (from.has_cas_end()) {
      set_cas_end(from.cas_end());
    }
    if (from.has_llsc_end()) {
      set_llsc_end(from.llsc_end());
    }
    if (from.has_put_regarray()) {
      mutable_put_regarray()->::DModule_RegArray::MergeFrom(from.put_regarray());
    }
    if (from.has_put_bias()) {
      set_put_bias(from.put_bias());
    }
    if (from.has_put_varpart()) {
      mutable_put_varpart()->::DModule_Expression::MergeFrom(from.put_varpart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_Statement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_Statement::CopyFrom(const DModule_Statement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_Statement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_wrtmp_rhs()) {
    if (!this->wrtmp_rhs().IsInitialized()) return false;
  }
  if (has_wrtmp_tmpwritten()) {
    if (!this->wrtmp_tmpwritten().IsInitialized()) return false;
  }
  if (has_put_data()) {
    if (!this->put_data().IsInitialized()) return false;
  }
  if (has_put_register()) {
    if (!this->put_register().IsInitialized()) return false;
  }
  if (has_store_data()) {
    if (!this->store_data().IsInitialized()) return false;
  }
  if (has_store_addr()) {
    if (!this->store_addr().IsInitialized()) return false;
  }
  if (has_exit_guardexp()) {
    if (!this->exit_guardexp().IsInitialized()) return false;
  }
  if (has_exit_jmptarget()) {
    if (!this->exit_jmptarget().IsInitialized()) return false;
  }
  if (has_llsc_addr()) {
    if (!this->llsc_addr().IsInitialized()) return false;
  }
  if (has_llsc_storedata()) {
    if (!this->llsc_storedata().IsInitialized()) return false;
  }
  if (has_llsc_result()) {
    if (!this->llsc_result().IsInitialized()) return false;
  }
  if (has_dirty_addr()) {
    if (!this->dirty_addr().IsInitialized()) return false;
  }
  if (has_dirty_guard()) {
    if (!this->dirty_guard().IsInitialized()) return false;
  }
  for (int i = 0; i < dirty_args_size(); i++) {
    if (!this->dirty_args(i).IsInitialized()) return false;
  }
  if (has_dirty_tmp()) {
    if (!this->dirty_tmp().IsInitialized()) return false;
  }
  if (has_cas_storeaddr()) {
    if (!this->cas_storeaddr().IsInitialized()) return false;
  }
  if (has_cas_datahi()) {
    if (!this->cas_datahi().IsInitialized()) return false;
  }
  if (has_cas_datalo()) {
    if (!this->cas_datalo().IsInitialized()) return false;
  }
  if (has_cas_expectedhi()) {
    if (!this->cas_expectedhi().IsInitialized()) return false;
  }
  if (has_cas_expectedlo()) {
    if (!this->cas_expectedlo().IsInitialized()) return false;
  }
  if (has_cas_oldhi()) {
    if (!this->cas_oldhi().IsInitialized()) return false;
  }
  if (has_cas_oldlo()) {
    if (!this->cas_oldlo().IsInitialized()) return false;
  }
  if (has_put_regarray()) {
    if (!this->put_regarray().IsInitialized()) return false;
  }
  if (has_put_varpart()) {
    if (!this->put_varpart().IsInitialized()) return false;
  }
  return true;
}

void DModule_Statement::Swap(DModule_Statement* other) {
  if (other != this) {
    std::swap(ty_, other->ty_);
    std::swap(wrtmp_rhs_, other->wrtmp_rhs_);
    std::swap(wrtmp_tmpwritten_, other->wrtmp_tmpwritten_);
    std::swap(put_data_, other->put_data_);
    std::swap(put_register_, other->put_register_);
    std::swap(store_data_, other->store_data_);
    std::swap(store_addr_, other->store_addr_);
    std::swap(exit_blockexit_, other->exit_blockexit_);
    std::swap(exit_guardexp_, other->exit_guardexp_);
    std::swap(exit_jmptarget_, other->exit_jmptarget_);
    std::swap(llsc_addr_, other->llsc_addr_);
    std::swap(llsc_storedata_, other->llsc_storedata_);
    std::swap(llsc_result_, other->llsc_result_);
    std::swap(dirty_addr_, other->dirty_addr_);
    std::swap(dirty_guard_, other->dirty_guard_);
    dirty_args_.Swap(&other->dirty_args_);
    std::swap(dirty_calleename_, other->dirty_calleename_);
    std::swap(dirty_tmp_, other->dirty_tmp_);
    std::swap(cas_storeaddr_, other->cas_storeaddr_);
    std::swap(cas_datahi_, other->cas_datahi_);
    std::swap(cas_datalo_, other->cas_datalo_);
    std::swap(cas_expectedhi_, other->cas_expectedhi_);
    std::swap(cas_expectedlo_, other->cas_expectedlo_);
    std::swap(cas_oldhi_, other->cas_oldhi_);
    std::swap(cas_oldlo_, other->cas_oldlo_);
    std::swap(cas_end_, other->cas_end_);
    std::swap(llsc_end_, other->llsc_end_);
    std::swap(put_regarray_, other->put_regarray_);
    std::swap(put_bias_, other->put_bias_);
    std::swap(put_varpart_, other->put_varpart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_Statement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_Statement_descriptor_;
  metadata.reflection = DModule_Statement_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule_DBlock::kBaseAddrFieldNumber;
const int DModule_DBlock::kTempsFieldNumber;
const int DModule_DBlock::kArchFieldNumber;
const int DModule_DBlock::kLenFieldNumber;
const int DModule_DBlock::kStmtsFieldNumber;
const int DModule_DBlock::kNextFieldNumber;
const int DModule_DBlock::kBlockExitFieldNumber;
#endif  // !_MSC_VER

DModule_DBlock::DModule_DBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule_DBlock::InitAsDefaultInstance() {
  arch_ = const_cast< ::DModule_TArch*>(&::DModule_TArch::default_instance());
  next_ = const_cast< ::DModule_Expression*>(&::DModule_Expression::default_instance());
}

DModule_DBlock::DModule_DBlock(const DModule_DBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule_DBlock::SharedCtor() {
  _cached_size_ = 0;
  baseaddr_ = GOOGLE_LONGLONG(0);
  arch_ = NULL;
  len_ = 0;
  next_ = NULL;
  blockexit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule_DBlock::~DModule_DBlock() {
  SharedDtor();
}

void DModule_DBlock::SharedDtor() {
  if (this != default_instance_) {
    delete arch_;
    delete next_;
  }
}

void DModule_DBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule_DBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_DBlock_descriptor_;
}

const DModule_DBlock& DModule_DBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule_DBlock* DModule_DBlock::default_instance_ = NULL;

DModule_DBlock* DModule_DBlock::New() const {
  return new DModule_DBlock;
}

void DModule_DBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    baseaddr_ = GOOGLE_LONGLONG(0);
    if (has_arch()) {
      if (arch_ != NULL) arch_->::DModule_TArch::Clear();
    }
    len_ = 0;
    if (has_next()) {
      if (next_ != NULL) next_->::DModule_Expression::Clear();
    }
    blockexit_ = 0;
  }
  temps_.Clear();
  stmts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule_DBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 baseAddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &baseaddr_)));
          set_has_baseaddr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temps;
        break;
      }

      // repeated .DModule.TVar temps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temps;
        if (input->ExpectTag(26)) goto parse_arch;
        break;
      }

      // required .DModule.TArch arch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // required int32 len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stmts;
        break;
      }

      // repeated .DModule.Statement stmts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stmts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stmts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stmts;
        if (input->ExpectTag(50)) goto parse_next;
        break;
      }

      // required .DModule.Expression next = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_next:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_blockExit;
        break;
      }

      // required .DModule.ExitType blockExit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blockExit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DModule_ExitType_IsValid(value)) {
            set_blockexit(static_cast< ::DModule_ExitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule_DBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 baseAddr = 1;
  if (has_baseaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->baseaddr(), output);
  }

  // repeated .DModule.TVar temps = 2;
  for (int i = 0; i < this->temps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->temps(i), output);
  }

  // required .DModule.TArch arch = 3;
  if (has_arch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arch(), output);
  }

  // required int32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->len(), output);
  }

  // repeated .DModule.Statement stmts = 5;
  for (int i = 0; i < this->stmts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stmts(i), output);
  }

  // required .DModule.Expression next = 6;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->next(), output);
  }

  // required .DModule.ExitType blockExit = 7;
  if (has_blockexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->blockexit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule_DBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 baseAddr = 1;
  if (has_baseaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->baseaddr(), target);
  }

  // repeated .DModule.TVar temps = 2;
  for (int i = 0; i < this->temps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->temps(i), target);
  }

  // required .DModule.TArch arch = 3;
  if (has_arch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arch(), target);
  }

  // required int32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->len(), target);
  }

  // repeated .DModule.Statement stmts = 5;
  for (int i = 0; i < this->stmts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stmts(i), target);
  }

  // required .DModule.Expression next = 6;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->next(), target);
  }

  // required .DModule.ExitType blockExit = 7;
  if (has_blockexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->blockexit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule_DBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 baseAddr = 1;
    if (has_baseaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->baseaddr());
    }

    // required .DModule.TArch arch = 3;
    if (has_arch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arch());
    }

    // required int32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // required .DModule.Expression next = 6;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->next());
    }

    // required .DModule.ExitType blockExit = 7;
    if (has_blockexit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blockexit());
    }

  }
  // repeated .DModule.TVar temps = 2;
  total_size += 1 * this->temps_size();
  for (int i = 0; i < this->temps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temps(i));
  }

  // repeated .DModule.Statement stmts = 5;
  total_size += 1 * this->stmts_size();
  for (int i = 0; i < this->stmts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stmts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule_DBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule_DBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule_DBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule_DBlock::MergeFrom(const DModule_DBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  temps_.MergeFrom(from.temps_);
  stmts_.MergeFrom(from.stmts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseaddr()) {
      set_baseaddr(from.baseaddr());
    }
    if (from.has_arch()) {
      mutable_arch()->::DModule_TArch::MergeFrom(from.arch());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_next()) {
      mutable_next()->::DModule_Expression::MergeFrom(from.next());
    }
    if (from.has_blockexit()) {
      set_blockexit(from.blockexit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule_DBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule_DBlock::CopyFrom(const DModule_DBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule_DBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006d) != 0x0000006d) return false;

  for (int i = 0; i < temps_size(); i++) {
    if (!this->temps(i).IsInitialized()) return false;
  }
  if (has_arch()) {
    if (!this->arch().IsInitialized()) return false;
  }
  for (int i = 0; i < stmts_size(); i++) {
    if (!this->stmts(i).IsInitialized()) return false;
  }
  if (has_next()) {
    if (!this->next().IsInitialized()) return false;
  }
  return true;
}

void DModule_DBlock::Swap(DModule_DBlock* other) {
  if (other != this) {
    std::swap(baseaddr_, other->baseaddr_);
    temps_.Swap(&other->temps_);
    std::swap(arch_, other->arch_);
    std::swap(len_, other->len_);
    stmts_.Swap(&other->stmts_);
    std::swap(next_, other->next_);
    std::swap(blockexit_, other->blockexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule_DBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_DBlock_descriptor_;
  metadata.reflection = DModule_DBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DModule::kFileNameFieldNumber;
const int DModule::kBlocksFieldNumber;
#endif  // !_MSC_VER

DModule::DModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DModule::InitAsDefaultInstance() {
}

DModule::DModule(const DModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DModule::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModule::~DModule() {
  SharedDtor();
}

void DModule::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModule_descriptor_;
}

const DModule& DModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IR_2eproto();
  return *default_instance_;
}

DModule* DModule::default_instance_ = NULL;

DModule* DModule::New() const {
  return new DModule;
}

void DModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        break;
      }

      // repeated .DModule.DBlock blocks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // repeated .DModule.DBlock blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // repeated .DModule.DBlock blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  // repeated .DModule.DBlock blocks = 2;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModule::MergeFrom(const DModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModule::CopyFrom(const DModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void DModule::Swap(DModule* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModule_descriptor_;
  metadata.reflection = DModule_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
