<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="jadx.tests.integration.loops.TestContinueInLoop2" tests="1" skipped="0" failures="0" errors="0" timestamp="2016-04-22T15:40:58" hostname="box723" time="0.128">
  <properties/>
  <testcase name="test" classname="jadx.tests.integration.loops.TestContinueInLoop2" time="0.128"/>
  <system-out><![CDATA[15:40:58 INFO  - converting to dex: jadx-tmp-707918066715867457984926040306107.jar ...
15:40:58 INFO  - loading ...
15:40:58 DEBUG - Load: /tmp/jadx-tmp-707918066715867457984926040306107.jar
15:40:58 DEBUG - '.arsc' file not found
15:40:58 WARN  - Unknown 'R' class, create references to 'R'
-----------------------------------------------------------
package jadx.tests.integration.loops;

import jadx.core.dex.attributes.AType;
import jadx.core.dex.instructions.InsnType;
import jadx.core.dex.nodes.BlockNode;
import jadx.core.dex.nodes.InsnNode;
import jadx.core.dex.nodes.MethodNode;
import jadx.core.dex.trycatch.CatchAttr;
import jadx.core.dex.trycatch.ExcHandlerAttr;
import jadx.core.dex.trycatch.ExceptionHandler;
import jadx.core.dex.trycatch.TryCatchBlock;
import jadx.core.utils.BlockUtils;
import jadx.core.utils.InstructionRemover;

public class TestContinueInLoop2$TestCls {
    private static void test(MethodNode mth, BlockNode block) {
        ExcHandlerAttr handlerAttr = (ExcHandlerAttr) block.get(AType.EXC_HANDLER);
        if (handlerAttr != null) {
            ExceptionHandler excHandler = handlerAttr.getHandler();
            excHandler.addBlock(block);
            for (BlockNode node : BlockUtils.collectBlocksDominatedBy(block, block)) {
                excHandler.addBlock(node);
            }
            for (BlockNode excBlock : excHandler.getBlocks()) {
                InstructionRemover remover = new InstructionRemover(mth, excBlock);
                for (InsnNode insn : excBlock.getInstructions()) {
                    if (insn.getType() == InsnType.MONITOR_ENTER) {
                        break;
                    } else if (insn.getType() == InsnType.MONITOR_EXIT) {
                        remover.add(insn);
                    }
                }
                remover.perform();
                for (InsnNode insn2 : excBlock.getInstructions()) {
                    if (insn2.getType() == InsnType.THROW) {
                        CatchAttr catchAttr = (CatchAttr) insn2.get(AType.CATCH_BLOCK);
                        if (catchAttr != null) {
                            TryCatchBlock handlerBlock = handlerAttr.getTryBlock();
                            TryCatchBlock catchBlock = catchAttr.getTryBlock();
                            if (handlerBlock != catchBlock) {
                                handlerBlock.merge(mth, catchBlock);
                                catchBlock.removeInsn(mth, insn2);
                            }
                        }
                    }
                }
            }
        }
    }
}
-----------------------------------------------------------
Compilation: PASSED
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
