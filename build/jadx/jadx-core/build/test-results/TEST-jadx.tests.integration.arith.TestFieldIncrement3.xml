<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="jadx.tests.integration.arith.TestFieldIncrement3" tests="1" skipped="0" failures="0" errors="0" timestamp="2016-04-22T15:40:48" hostname="box723" time="0.181">
  <properties/>
  <testcase name="test" classname="jadx.tests.integration.arith.TestFieldIncrement3" time="0.181"/>
  <system-out><![CDATA[15:40:48 INFO  - converting to dex: jadx-tmp-458184615966140198084916038691192.jar ...
15:40:48 INFO  - loading ...
15:40:48 DEBUG - Load: /tmp/jadx-tmp-458184615966140198084916038691192.jar
15:40:48 DEBUG - '.arsc' file not found
15:40:48 WARN  - Unknown 'R' class, create references to 'R'
-----------------------------------------------------------
package jadx.tests.integration.arith;

import java.util.Random;

public class TestFieldIncrement3$TestCls {
    static Vector2 directVect = new Vector2();
    static Vector2 newPos = new Vector2();
    static Vector2 targetPos = new Vector2();
    static int tileX;
    static int tileY;

    static class Vector2 {
        public float x = 0.0f;
        public float y = 0.0f;

        public boolean equals(Vector2 other) {
            return this.x == other.x && this.y == other.y;
        }
    }

    private static void test() {
        switch (new Random().nextInt(7)) {
            case 0:
                targetPos.x = (float) (((tileX + 1) * 55) + 55);
                targetPos.y = (float) (((tileY + 1) * 35) + 35);
                break;
            case 2:
                targetPos.x = (float) (((tileX + 1) * 55) + 55);
                targetPos.y = (float) (((tileY - 1) * 35) + 35);
                break;
            case 4:
                targetPos.x = (float) (((tileX - 1) * 55) + 55);
                targetPos.y = (float) (((tileY - 1) * 35) + 35);
                break;
            case 6:
                targetPos.x = (float) (((tileX - 1) * 55) + 55);
                targetPos.y = (float) (((tileY + 1) * 35) + 35);
                break;
        }
        directVect.x = targetPos.x - newPos.x;
        directVect.y = targetPos.y - newPos.y;
        float hPos = (float) Math.sqrt((double) ((directVect.x * directVect.x) + (directVect.y * directVect.y)));
        Vector2 vector2 = directVect;
        vector2.x /= hPos;
        vector2 = directVect;
        vector2.y /= hPos;
    }
}
-----------------------------------------------------------
Compilation: PASSED
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
