// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CFG.proto

#ifndef PROTOBUF_CFG_2eproto__INCLUDED
#define PROTOBUF_CFG_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CFG_2eproto();
void protobuf_AssignDesc_CFG_2eproto();
void protobuf_ShutdownFile_CFG_2eproto();

class JumpTbl;
class JumpIndexTbl;
class Instruction;
class Block;
class Function;
class ExternalFunction;
class ExternalData;
class DataSymbol;
class Data;
class EntrySymbolExtra;
class EntrySymbol;
class Module;
class Edge_64;
class Edge_32;
class Annotated_Branch_Instruction;
class Annotated_Instruction;
class Annotated_Instruction_Operand;
class Annotated_Register_32;
class Annotated_Register_32_Property;
class Annotated_Register_64;
class Annotated_Register_64_Property;
class Annotated_Function;
class Disassembly;

enum ExternalFunction_CallingConvention {
  ExternalFunction_CallingConvention_CallerCleanup = 0,
  ExternalFunction_CallingConvention_CalleeCleanup = 1,
  ExternalFunction_CallingConvention_FastCall = 2
};
bool ExternalFunction_CallingConvention_IsValid(int value);
const ExternalFunction_CallingConvention ExternalFunction_CallingConvention_CallingConvention_MIN = ExternalFunction_CallingConvention_CallerCleanup;
const ExternalFunction_CallingConvention ExternalFunction_CallingConvention_CallingConvention_MAX = ExternalFunction_CallingConvention_FastCall;
const int ExternalFunction_CallingConvention_CallingConvention_ARRAYSIZE = ExternalFunction_CallingConvention_CallingConvention_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExternalFunction_CallingConvention_descriptor();
inline const ::std::string& ExternalFunction_CallingConvention_Name(ExternalFunction_CallingConvention value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExternalFunction_CallingConvention_descriptor(), value);
}
inline bool ExternalFunction_CallingConvention_Parse(
    const ::std::string& name, ExternalFunction_CallingConvention* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExternalFunction_CallingConvention>(
    ExternalFunction_CallingConvention_descriptor(), name, value);
}
enum Edge_64_Kind {
  Edge_64_Kind_Unknown = 0,
  Edge_64_Kind_May = 1,
  Edge_64_Kind_Must = 2
};
bool Edge_64_Kind_IsValid(int value);
const Edge_64_Kind Edge_64_Kind_Kind_MIN = Edge_64_Kind_Unknown;
const Edge_64_Kind Edge_64_Kind_Kind_MAX = Edge_64_Kind_Must;
const int Edge_64_Kind_Kind_ARRAYSIZE = Edge_64_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Edge_64_Kind_descriptor();
inline const ::std::string& Edge_64_Kind_Name(Edge_64_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Edge_64_Kind_descriptor(), value);
}
inline bool Edge_64_Kind_Parse(
    const ::std::string& name, Edge_64_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Edge_64_Kind>(
    Edge_64_Kind_descriptor(), name, value);
}
enum Edge_32_Kind {
  Edge_32_Kind_Unknown = 0,
  Edge_32_Kind_May = 1,
  Edge_32_Kind_Must = 2
};
bool Edge_32_Kind_IsValid(int value);
const Edge_32_Kind Edge_32_Kind_Kind_MIN = Edge_32_Kind_Unknown;
const Edge_32_Kind Edge_32_Kind_Kind_MAX = Edge_32_Kind_Must;
const int Edge_32_Kind_Kind_ARRAYSIZE = Edge_32_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Edge_32_Kind_descriptor();
inline const ::std::string& Edge_32_Kind_Name(Edge_32_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Edge_32_Kind_descriptor(), value);
}
inline bool Edge_32_Kind_Parse(
    const ::std::string& name, Edge_32_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Edge_32_Kind>(
    Edge_32_Kind_descriptor(), name, value);
}
enum Annotated_Branch_Instruction_Branch {
  Annotated_Branch_Instruction_Branch_Unknown = 0,
  Annotated_Branch_Instruction_Branch_jmp = 1,
  Annotated_Branch_Instruction_Branch_ljmp = 2,
  Annotated_Branch_Instruction_Branch_jo = 3,
  Annotated_Branch_Instruction_Branch_jno = 4,
  Annotated_Branch_Instruction_Branch_jb = 5,
  Annotated_Branch_Instruction_Branch_jae = 6,
  Annotated_Branch_Instruction_Branch_je = 7,
  Annotated_Branch_Instruction_Branch_jne = 8,
  Annotated_Branch_Instruction_Branch_jbe = 9,
  Annotated_Branch_Instruction_Branch_ja = 10,
  Annotated_Branch_Instruction_Branch_js = 11,
  Annotated_Branch_Instruction_Branch_jns = 12,
  Annotated_Branch_Instruction_Branch_jp = 13,
  Annotated_Branch_Instruction_Branch_jnp = 14,
  Annotated_Branch_Instruction_Branch_jl = 15,
  Annotated_Branch_Instruction_Branch_jge = 16,
  Annotated_Branch_Instruction_Branch_jle = 17,
  Annotated_Branch_Instruction_Branch_jg = 18,
  Annotated_Branch_Instruction_Branch_loopne = 19,
  Annotated_Branch_Instruction_Branch_loope = 20,
  Annotated_Branch_Instruction_Branch_loop = 21,
  Annotated_Branch_Instruction_Branch_jCcxz = 22,
  Annotated_Branch_Instruction_Branch_ret = 23,
  Annotated_Branch_Instruction_Branch_call = 24
};
bool Annotated_Branch_Instruction_Branch_IsValid(int value);
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction_Branch_Branch_MIN = Annotated_Branch_Instruction_Branch_Unknown;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction_Branch_Branch_MAX = Annotated_Branch_Instruction_Branch_call;
const int Annotated_Branch_Instruction_Branch_Branch_ARRAYSIZE = Annotated_Branch_Instruction_Branch_Branch_MAX + 1;

const ::google::protobuf::EnumDescriptor* Annotated_Branch_Instruction_Branch_descriptor();
inline const ::std::string& Annotated_Branch_Instruction_Branch_Name(Annotated_Branch_Instruction_Branch value) {
  return ::google::protobuf::internal::NameOfEnum(
    Annotated_Branch_Instruction_Branch_descriptor(), value);
}
inline bool Annotated_Branch_Instruction_Branch_Parse(
    const ::std::string& name, Annotated_Branch_Instruction_Branch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Annotated_Branch_Instruction_Branch>(
    Annotated_Branch_Instruction_Branch_descriptor(), name, value);
}
enum Annotated_Instruction_Operand_Operand_Type {
  Annotated_Instruction_Operand_Operand_Type_Unknown = 0,
  Annotated_Instruction_Operand_Operand_Type_Immediate = 1,
  Annotated_Instruction_Operand_Operand_Type_Register = 2,
  Annotated_Instruction_Operand_Operand_Type_Memory = 3,
  Annotated_Instruction_Operand_Operand_Type_Address = 4
};
bool Annotated_Instruction_Operand_Operand_Type_IsValid(int value);
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand_Operand_Type_Operand_Type_MIN = Annotated_Instruction_Operand_Operand_Type_Unknown;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand_Operand_Type_Operand_Type_MAX = Annotated_Instruction_Operand_Operand_Type_Address;
const int Annotated_Instruction_Operand_Operand_Type_Operand_Type_ARRAYSIZE = Annotated_Instruction_Operand_Operand_Type_Operand_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Annotated_Instruction_Operand_Operand_Type_descriptor();
inline const ::std::string& Annotated_Instruction_Operand_Operand_Type_Name(Annotated_Instruction_Operand_Operand_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Annotated_Instruction_Operand_Operand_Type_descriptor(), value);
}
inline bool Annotated_Instruction_Operand_Operand_Type_Parse(
    const ::std::string& name, Annotated_Instruction_Operand_Operand_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Annotated_Instruction_Operand_Operand_Type>(
    Annotated_Instruction_Operand_Operand_Type_descriptor(), name, value);
}
enum Annotated_Register_32_Register {
  Annotated_Register_32_Register_Unknown = 0,
  Annotated_Register_32_Register_eax = 1,
  Annotated_Register_32_Register_ecx = 2,
  Annotated_Register_32_Register_edx = 3,
  Annotated_Register_32_Register_ebx = 4,
  Annotated_Register_32_Register_esp = 5,
  Annotated_Register_32_Register_ebp = 6,
  Annotated_Register_32_Register_esi = 7,
  Annotated_Register_32_Register_edi = 8,
  Annotated_Register_32_Register_eip = 9,
  Annotated_Register_32_Register_fs_base = 10,
  Annotated_Register_32_Register_gs_base = 11,
  Annotated_Register_32_Register_gtd = 12,
  Annotated_Register_32_Register_ldt = 13,
  Annotated_Register_32_Register_mxcsr = 14
};
bool Annotated_Register_32_Register_IsValid(int value);
const Annotated_Register_32_Register Annotated_Register_32_Register_Register_MIN = Annotated_Register_32_Register_Unknown;
const Annotated_Register_32_Register Annotated_Register_32_Register_Register_MAX = Annotated_Register_32_Register_mxcsr;
const int Annotated_Register_32_Register_Register_ARRAYSIZE = Annotated_Register_32_Register_Register_MAX + 1;

const ::google::protobuf::EnumDescriptor* Annotated_Register_32_Register_descriptor();
inline const ::std::string& Annotated_Register_32_Register_Name(Annotated_Register_32_Register value) {
  return ::google::protobuf::internal::NameOfEnum(
    Annotated_Register_32_Register_descriptor(), value);
}
inline bool Annotated_Register_32_Register_Parse(
    const ::std::string& name, Annotated_Register_32_Register* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Annotated_Register_32_Register>(
    Annotated_Register_32_Register_descriptor(), name, value);
}
enum Annotated_Register_64_Register {
  Annotated_Register_64_Register_Unknown = 0,
  Annotated_Register_64_Register_rax = 10,
  Annotated_Register_64_Register_rcx = 11,
  Annotated_Register_64_Register_rdx = 12,
  Annotated_Register_64_Register_rbx = 13,
  Annotated_Register_64_Register_rsp = 14,
  Annotated_Register_64_Register_rbp = 15,
  Annotated_Register_64_Register_rsi = 16,
  Annotated_Register_64_Register_rdi = 17,
  Annotated_Register_64_Register_rip = 18,
  Annotated_Register_64_Register_r8 = 19,
  Annotated_Register_64_Register_r9 = 20,
  Annotated_Register_64_Register_r10 = 21,
  Annotated_Register_64_Register_r11 = 22,
  Annotated_Register_64_Register_r12 = 23,
  Annotated_Register_64_Register_r13 = 24,
  Annotated_Register_64_Register_r14 = 25,
  Annotated_Register_64_Register_r15 = 26,
  Annotated_Register_64_Register_fs_base = 27,
  Annotated_Register_64_Register_gs_base = 28,
  Annotated_Register_64_Register_gdt = 29,
  Annotated_Register_64_Register_ldt = 30
};
bool Annotated_Register_64_Register_IsValid(int value);
const Annotated_Register_64_Register Annotated_Register_64_Register_Register_MIN = Annotated_Register_64_Register_Unknown;
const Annotated_Register_64_Register Annotated_Register_64_Register_Register_MAX = Annotated_Register_64_Register_ldt;
const int Annotated_Register_64_Register_Register_ARRAYSIZE = Annotated_Register_64_Register_Register_MAX + 1;

const ::google::protobuf::EnumDescriptor* Annotated_Register_64_Register_descriptor();
inline const ::std::string& Annotated_Register_64_Register_Name(Annotated_Register_64_Register value) {
  return ::google::protobuf::internal::NameOfEnum(
    Annotated_Register_64_Register_descriptor(), value);
}
inline bool Annotated_Register_64_Register_Parse(
    const ::std::string& name, Annotated_Register_64_Register* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Annotated_Register_64_Register>(
    Annotated_Register_64_Register_descriptor(), name, value);
}
// ===================================================================

class JumpTbl : public ::google::protobuf::Message {
 public:
  JumpTbl();
  virtual ~JumpTbl();

  JumpTbl(const JumpTbl& from);

  inline JumpTbl& operator=(const JumpTbl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JumpTbl& default_instance();

  void Swap(JumpTbl* other);

  // implements Message ----------------------------------------------

  JumpTbl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JumpTbl& from);
  void MergeFrom(const JumpTbl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 table_entries = 1;
  inline int table_entries_size() const;
  inline void clear_table_entries();
  static const int kTableEntriesFieldNumber = 1;
  inline ::google::protobuf::int64 table_entries(int index) const;
  inline void set_table_entries(int index, ::google::protobuf::int64 value);
  inline void add_table_entries(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      table_entries() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_table_entries();

  // required int32 zero_offset = 2;
  inline bool has_zero_offset() const;
  inline void clear_zero_offset();
  static const int kZeroOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 zero_offset() const;
  inline void set_zero_offset(::google::protobuf::int32 value);

  // optional int64 offset_from_data = 3;
  inline bool has_offset_from_data() const;
  inline void clear_offset_from_data();
  static const int kOffsetFromDataFieldNumber = 3;
  inline ::google::protobuf::int64 offset_from_data() const;
  inline void set_offset_from_data(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:JumpTbl)
 private:
  inline void set_has_zero_offset();
  inline void clear_has_zero_offset();
  inline void set_has_offset_from_data();
  inline void clear_has_offset_from_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > table_entries_;
  ::google::protobuf::int64 offset_from_data_;
  ::google::protobuf::int32 zero_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static JumpTbl* default_instance_;
};
// -------------------------------------------------------------------

class JumpIndexTbl : public ::google::protobuf::Message {
 public:
  JumpIndexTbl();
  virtual ~JumpIndexTbl();

  JumpIndexTbl(const JumpIndexTbl& from);

  inline JumpIndexTbl& operator=(const JumpIndexTbl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JumpIndexTbl& default_instance();

  void Swap(JumpIndexTbl* other);

  // implements Message ----------------------------------------------

  JumpIndexTbl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JumpIndexTbl& from);
  void MergeFrom(const JumpIndexTbl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes table_entries = 1;
  inline bool has_table_entries() const;
  inline void clear_table_entries();
  static const int kTableEntriesFieldNumber = 1;
  inline const ::std::string& table_entries() const;
  inline void set_table_entries(const ::std::string& value);
  inline void set_table_entries(const char* value);
  inline void set_table_entries(const void* value, size_t size);
  inline ::std::string* mutable_table_entries();
  inline ::std::string* release_table_entries();
  inline void set_allocated_table_entries(::std::string* table_entries);

  // required int32 zero_offset = 2;
  inline bool has_zero_offset() const;
  inline void clear_zero_offset();
  static const int kZeroOffsetFieldNumber = 2;
  inline ::google::protobuf::int32 zero_offset() const;
  inline void set_zero_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:JumpIndexTbl)
 private:
  inline void set_has_table_entries();
  inline void clear_has_table_entries();
  inline void set_has_zero_offset();
  inline void clear_has_zero_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_entries_;
  ::google::protobuf::int32 zero_offset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static JumpIndexTbl* default_instance_;
};
// -------------------------------------------------------------------

class Instruction : public ::google::protobuf::Message {
 public:
  Instruction();
  virtual ~Instruction();

  Instruction(const Instruction& from);

  inline Instruction& operator=(const Instruction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Instruction& default_instance();

  void Swap(Instruction* other);

  // implements Message ----------------------------------------------

  Instruction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Instruction& from);
  void MergeFrom(const Instruction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes inst_bytes = 1;
  inline bool has_inst_bytes() const;
  inline void clear_inst_bytes();
  static const int kInstBytesFieldNumber = 1;
  inline const ::std::string& inst_bytes() const;
  inline void set_inst_bytes(const ::std::string& value);
  inline void set_inst_bytes(const char* value);
  inline void set_inst_bytes(const void* value, size_t size);
  inline ::std::string* mutable_inst_bytes();
  inline ::std::string* release_inst_bytes();
  inline void set_allocated_inst_bytes(::std::string* inst_bytes);

  // required int64 inst_addr = 2;
  inline bool has_inst_addr() const;
  inline void clear_inst_addr();
  static const int kInstAddrFieldNumber = 2;
  inline ::google::protobuf::int64 inst_addr() const;
  inline void set_inst_addr(::google::protobuf::int64 value);

  // optional int64 true_target = 3;
  inline bool has_true_target() const;
  inline void clear_true_target();
  static const int kTrueTargetFieldNumber = 3;
  inline ::google::protobuf::int64 true_target() const;
  inline void set_true_target(::google::protobuf::int64 value);

  // optional int64 false_target = 4;
  inline bool has_false_target() const;
  inline void clear_false_target();
  static const int kFalseTargetFieldNumber = 4;
  inline ::google::protobuf::int64 false_target() const;
  inline void set_false_target(::google::protobuf::int64 value);

  // required int32 inst_len = 5;
  inline bool has_inst_len() const;
  inline void clear_inst_len();
  static const int kInstLenFieldNumber = 5;
  inline ::google::protobuf::int32 inst_len() const;
  inline void set_inst_len(::google::protobuf::int32 value);

  // optional int64 data_offset = 6;
  inline bool has_data_offset() const;
  inline void clear_data_offset();
  static const int kDataOffsetFieldNumber = 6;
  inline ::google::protobuf::int64 data_offset() const;
  inline void set_data_offset(::google::protobuf::int64 value);

  // optional string ext_call_name = 7;
  inline bool has_ext_call_name() const;
  inline void clear_ext_call_name();
  static const int kExtCallNameFieldNumber = 7;
  inline const ::std::string& ext_call_name() const;
  inline void set_ext_call_name(const ::std::string& value);
  inline void set_ext_call_name(const char* value);
  inline void set_ext_call_name(const char* value, size_t size);
  inline ::std::string* mutable_ext_call_name();
  inline ::std::string* release_ext_call_name();
  inline void set_allocated_ext_call_name(::std::string* ext_call_name);

  // optional int64 call_target = 8;
  inline bool has_call_target() const;
  inline void clear_call_target();
  static const int kCallTargetFieldNumber = 8;
  inline ::google::protobuf::int64 call_target() const;
  inline void set_call_target(::google::protobuf::int64 value);

  // optional int32 reloc_offset = 9;
  inline bool has_reloc_offset() const;
  inline void clear_reloc_offset();
  static const int kRelocOffsetFieldNumber = 9;
  inline ::google::protobuf::int32 reloc_offset() const;
  inline void set_reloc_offset(::google::protobuf::int32 value);

  // optional .JumpTbl jump_table = 10;
  inline bool has_jump_table() const;
  inline void clear_jump_table();
  static const int kJumpTableFieldNumber = 10;
  inline const ::JumpTbl& jump_table() const;
  inline ::JumpTbl* mutable_jump_table();
  inline ::JumpTbl* release_jump_table();
  inline void set_allocated_jump_table(::JumpTbl* jump_table);

  // optional .JumpIndexTbl jump_index_table = 11;
  inline bool has_jump_index_table() const;
  inline void clear_jump_index_table();
  static const int kJumpIndexTableFieldNumber = 11;
  inline const ::JumpIndexTbl& jump_index_table() const;
  inline ::JumpIndexTbl* mutable_jump_index_table();
  inline ::JumpIndexTbl* release_jump_index_table();
  inline void set_allocated_jump_index_table(::JumpIndexTbl* jump_index_table);

  // optional string ext_data_name = 12;
  inline bool has_ext_data_name() const;
  inline void clear_ext_data_name();
  static const int kExtDataNameFieldNumber = 12;
  inline const ::std::string& ext_data_name() const;
  inline void set_ext_data_name(const ::std::string& value);
  inline void set_ext_data_name(const char* value);
  inline void set_ext_data_name(const char* value, size_t size);
  inline ::std::string* mutable_ext_data_name();
  inline ::std::string* release_ext_data_name();
  inline void set_allocated_ext_data_name(::std::string* ext_data_name);

  // optional int32 system_call_number = 13;
  inline bool has_system_call_number() const;
  inline void clear_system_call_number();
  static const int kSystemCallNumberFieldNumber = 13;
  inline ::google::protobuf::int32 system_call_number() const;
  inline void set_system_call_number(::google::protobuf::int32 value);

  // optional bool local_noreturn = 14;
  inline bool has_local_noreturn() const;
  inline void clear_local_noreturn();
  static const int kLocalNoreturnFieldNumber = 14;
  inline bool local_noreturn() const;
  inline void set_local_noreturn(bool value);

  // @@protoc_insertion_point(class_scope:Instruction)
 private:
  inline void set_has_inst_bytes();
  inline void clear_has_inst_bytes();
  inline void set_has_inst_addr();
  inline void clear_has_inst_addr();
  inline void set_has_true_target();
  inline void clear_has_true_target();
  inline void set_has_false_target();
  inline void clear_has_false_target();
  inline void set_has_inst_len();
  inline void clear_has_inst_len();
  inline void set_has_data_offset();
  inline void clear_has_data_offset();
  inline void set_has_ext_call_name();
  inline void clear_has_ext_call_name();
  inline void set_has_call_target();
  inline void clear_has_call_target();
  inline void set_has_reloc_offset();
  inline void clear_has_reloc_offset();
  inline void set_has_jump_table();
  inline void clear_has_jump_table();
  inline void set_has_jump_index_table();
  inline void clear_has_jump_index_table();
  inline void set_has_ext_data_name();
  inline void clear_has_ext_data_name();
  inline void set_has_system_call_number();
  inline void clear_has_system_call_number();
  inline void set_has_local_noreturn();
  inline void clear_has_local_noreturn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* inst_bytes_;
  ::google::protobuf::int64 inst_addr_;
  ::google::protobuf::int64 true_target_;
  ::google::protobuf::int64 false_target_;
  ::google::protobuf::int64 data_offset_;
  ::std::string* ext_call_name_;
  ::google::protobuf::int32 inst_len_;
  ::google::protobuf::int32 reloc_offset_;
  ::google::protobuf::int64 call_target_;
  ::JumpTbl* jump_table_;
  ::JumpIndexTbl* jump_index_table_;
  ::std::string* ext_data_name_;
  ::google::protobuf::int32 system_call_number_;
  bool local_noreturn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Instruction* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Instruction insts = 1;
  inline int insts_size() const;
  inline void clear_insts();
  static const int kInstsFieldNumber = 1;
  inline const ::Instruction& insts(int index) const;
  inline ::Instruction* mutable_insts(int index);
  inline ::Instruction* add_insts();
  inline const ::google::protobuf::RepeatedPtrField< ::Instruction >&
      insts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Instruction >*
      mutable_insts();

  // required int64 base_address = 2;
  inline bool has_base_address() const;
  inline void clear_base_address();
  static const int kBaseAddressFieldNumber = 2;
  inline ::google::protobuf::int64 base_address() const;
  inline void set_base_address(::google::protobuf::int64 value);

  // repeated int64 block_follows = 3;
  inline int block_follows_size() const;
  inline void clear_block_follows();
  static const int kBlockFollowsFieldNumber = 3;
  inline ::google::protobuf::int64 block_follows(int index) const;
  inline void set_block_follows(int index, ::google::protobuf::int64 value);
  inline void add_block_follows(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      block_follows() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_block_follows();

  // @@protoc_insertion_point(class_scope:Block)
 private:
  inline void set_has_base_address();
  inline void clear_has_base_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Instruction > insts_;
  ::google::protobuf::int64 base_address_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > block_follows_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class Function : public ::google::protobuf::Message {
 public:
  Function();
  virtual ~Function();

  Function(const Function& from);

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Function& default_instance();

  void Swap(Function* other);

  // implements Message ----------------------------------------------

  Function* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Block blocks = 1;
  inline int blocks_size() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 1;
  inline const ::Block& blocks(int index) const;
  inline ::Block* mutable_blocks(int index);
  inline ::Block* add_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::Block >&
      blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Block >*
      mutable_blocks();

  // required int64 entry_address = 2;
  inline bool has_entry_address() const;
  inline void clear_entry_address();
  static const int kEntryAddressFieldNumber = 2;
  inline ::google::protobuf::int64 entry_address() const;
  inline void set_entry_address(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Function)
 private:
  inline void set_has_entry_address();
  inline void clear_has_entry_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Block > blocks_;
  ::google::protobuf::int64 entry_address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Function* default_instance_;
};
// -------------------------------------------------------------------

class ExternalFunction : public ::google::protobuf::Message {
 public:
  ExternalFunction();
  virtual ~ExternalFunction();

  ExternalFunction(const ExternalFunction& from);

  inline ExternalFunction& operator=(const ExternalFunction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalFunction& default_instance();

  void Swap(ExternalFunction* other);

  // implements Message ----------------------------------------------

  ExternalFunction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalFunction& from);
  void MergeFrom(const ExternalFunction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExternalFunction_CallingConvention CallingConvention;
  static const CallingConvention CallerCleanup = ExternalFunction_CallingConvention_CallerCleanup;
  static const CallingConvention CalleeCleanup = ExternalFunction_CallingConvention_CalleeCleanup;
  static const CallingConvention FastCall = ExternalFunction_CallingConvention_FastCall;
  static inline bool CallingConvention_IsValid(int value) {
    return ExternalFunction_CallingConvention_IsValid(value);
  }
  static const CallingConvention CallingConvention_MIN =
    ExternalFunction_CallingConvention_CallingConvention_MIN;
  static const CallingConvention CallingConvention_MAX =
    ExternalFunction_CallingConvention_CallingConvention_MAX;
  static const int CallingConvention_ARRAYSIZE =
    ExternalFunction_CallingConvention_CallingConvention_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CallingConvention_descriptor() {
    return ExternalFunction_CallingConvention_descriptor();
  }
  static inline const ::std::string& CallingConvention_Name(CallingConvention value) {
    return ExternalFunction_CallingConvention_Name(value);
  }
  static inline bool CallingConvention_Parse(const ::std::string& name,
      CallingConvention* value) {
    return ExternalFunction_CallingConvention_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string symbol_name = 1;
  inline bool has_symbol_name() const;
  inline void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 1;
  inline const ::std::string& symbol_name() const;
  inline void set_symbol_name(const ::std::string& value);
  inline void set_symbol_name(const char* value);
  inline void set_symbol_name(const char* value, size_t size);
  inline ::std::string* mutable_symbol_name();
  inline ::std::string* release_symbol_name();
  inline void set_allocated_symbol_name(::std::string* symbol_name);

  // required .ExternalFunction.CallingConvention calling_convention = 2;
  inline bool has_calling_convention() const;
  inline void clear_calling_convention();
  static const int kCallingConventionFieldNumber = 2;
  inline ::ExternalFunction_CallingConvention calling_convention() const;
  inline void set_calling_convention(::ExternalFunction_CallingConvention value);

  // required bool has_return = 3;
  inline bool has_has_return() const;
  inline void clear_has_return();
  static const int kHasReturnFieldNumber = 3;
  inline bool has_return() const;
  inline void set_has_return(bool value);

  // required bool no_return = 4;
  inline bool has_no_return() const;
  inline void clear_no_return();
  static const int kNoReturnFieldNumber = 4;
  inline bool no_return() const;
  inline void set_no_return(bool value);

  // required int32 argument_count = 5;
  inline bool has_argument_count() const;
  inline void clear_argument_count();
  static const int kArgumentCountFieldNumber = 5;
  inline ::google::protobuf::int32 argument_count() const;
  inline void set_argument_count(::google::protobuf::int32 value);

  // optional string signature = 6;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 6;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:ExternalFunction)
 private:
  inline void set_has_symbol_name();
  inline void clear_has_symbol_name();
  inline void set_has_calling_convention();
  inline void clear_has_calling_convention();
  inline void set_has_has_return();
  inline void clear_has_has_return();
  inline void set_has_no_return();
  inline void clear_has_no_return();
  inline void set_has_argument_count();
  inline void clear_has_argument_count();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_name_;
  int calling_convention_;
  bool has_return_;
  bool no_return_;
  ::std::string* signature_;
  ::google::protobuf::int32 argument_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static ExternalFunction* default_instance_;
};
// -------------------------------------------------------------------

class ExternalData : public ::google::protobuf::Message {
 public:
  ExternalData();
  virtual ~ExternalData();

  ExternalData(const ExternalData& from);

  inline ExternalData& operator=(const ExternalData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExternalData& default_instance();

  void Swap(ExternalData* other);

  // implements Message ----------------------------------------------

  ExternalData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExternalData& from);
  void MergeFrom(const ExternalData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol_name = 1;
  inline bool has_symbol_name() const;
  inline void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 1;
  inline const ::std::string& symbol_name() const;
  inline void set_symbol_name(const ::std::string& value);
  inline void set_symbol_name(const char* value);
  inline void set_symbol_name(const char* value, size_t size);
  inline ::std::string* mutable_symbol_name();
  inline ::std::string* release_symbol_name();
  inline void set_allocated_symbol_name(::std::string* symbol_name);

  // required int32 data_size = 2;
  inline bool has_data_size() const;
  inline void clear_data_size();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::int32 data_size() const;
  inline void set_data_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ExternalData)
 private:
  inline void set_has_symbol_name();
  inline void clear_has_symbol_name();
  inline void set_has_data_size();
  inline void clear_has_data_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_name_;
  ::google::protobuf::int32 data_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static ExternalData* default_instance_;
};
// -------------------------------------------------------------------

class DataSymbol : public ::google::protobuf::Message {
 public:
  DataSymbol();
  virtual ~DataSymbol();

  DataSymbol(const DataSymbol& from);

  inline DataSymbol& operator=(const DataSymbol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSymbol& default_instance();

  void Swap(DataSymbol* other);

  // implements Message ----------------------------------------------

  DataSymbol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataSymbol& from);
  void MergeFrom(const DataSymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 base_address = 1;
  inline bool has_base_address() const;
  inline void clear_base_address();
  static const int kBaseAddressFieldNumber = 1;
  inline ::google::protobuf::int64 base_address() const;
  inline void set_base_address(::google::protobuf::int64 value);

  // required string symbol_name = 2;
  inline bool has_symbol_name() const;
  inline void clear_symbol_name();
  static const int kSymbolNameFieldNumber = 2;
  inline const ::std::string& symbol_name() const;
  inline void set_symbol_name(const ::std::string& value);
  inline void set_symbol_name(const char* value);
  inline void set_symbol_name(const char* value, size_t size);
  inline ::std::string* mutable_symbol_name();
  inline ::std::string* release_symbol_name();
  inline void set_allocated_symbol_name(::std::string* symbol_name);

  // required int32 symbol_size = 3;
  inline bool has_symbol_size() const;
  inline void clear_symbol_size();
  static const int kSymbolSizeFieldNumber = 3;
  inline ::google::protobuf::int32 symbol_size() const;
  inline void set_symbol_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DataSymbol)
 private:
  inline void set_has_base_address();
  inline void clear_has_base_address();
  inline void set_has_symbol_name();
  inline void clear_has_symbol_name();
  inline void set_has_symbol_size();
  inline void clear_has_symbol_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 base_address_;
  ::std::string* symbol_name_;
  ::google::protobuf::int32 symbol_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static DataSymbol* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 base_address = 1;
  inline bool has_base_address() const;
  inline void clear_base_address();
  static const int kBaseAddressFieldNumber = 1;
  inline ::google::protobuf::int64 base_address() const;
  inline void set_base_address(::google::protobuf::int64 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated .DataSymbol symbols = 3;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 3;
  inline const ::DataSymbol& symbols(int index) const;
  inline ::DataSymbol* mutable_symbols(int index);
  inline ::DataSymbol* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::DataSymbol >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataSymbol >*
      mutable_symbols();

  // required bool read_only = 4;
  inline bool has_read_only() const;
  inline void clear_read_only();
  static const int kReadOnlyFieldNumber = 4;
  inline bool read_only() const;
  inline void set_read_only(bool value);

  // @@protoc_insertion_point(class_scope:Data)
 private:
  inline void set_has_base_address();
  inline void clear_has_base_address();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_read_only();
  inline void clear_has_read_only();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 base_address_;
  ::std::string* data_;
  ::google::protobuf::RepeatedPtrField< ::DataSymbol > symbols_;
  bool read_only_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class EntrySymbolExtra : public ::google::protobuf::Message {
 public:
  EntrySymbolExtra();
  virtual ~EntrySymbolExtra();

  EntrySymbolExtra(const EntrySymbolExtra& from);

  inline EntrySymbolExtra& operator=(const EntrySymbolExtra& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntrySymbolExtra& default_instance();

  void Swap(EntrySymbolExtra* other);

  // implements Message ----------------------------------------------

  EntrySymbolExtra* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntrySymbolExtra& from);
  void MergeFrom(const EntrySymbolExtra& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 entry_argc = 1;
  inline bool has_entry_argc() const;
  inline void clear_entry_argc();
  static const int kEntryArgcFieldNumber = 1;
  inline ::google::protobuf::int32 entry_argc() const;
  inline void set_entry_argc(::google::protobuf::int32 value);

  // required .ExternalFunction.CallingConvention entry_cconv = 2;
  inline bool has_entry_cconv() const;
  inline void clear_entry_cconv();
  static const int kEntryCconvFieldNumber = 2;
  inline ::ExternalFunction_CallingConvention entry_cconv() const;
  inline void set_entry_cconv(::ExternalFunction_CallingConvention value);

  // required bool does_return = 3;
  inline bool has_does_return() const;
  inline void clear_does_return();
  static const int kDoesReturnFieldNumber = 3;
  inline bool does_return() const;
  inline void set_does_return(bool value);

  // @@protoc_insertion_point(class_scope:EntrySymbolExtra)
 private:
  inline void set_has_entry_argc();
  inline void clear_has_entry_argc();
  inline void set_has_entry_cconv();
  inline void clear_has_entry_cconv();
  inline void set_has_does_return();
  inline void clear_has_does_return();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 entry_argc_;
  int entry_cconv_;
  bool does_return_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static EntrySymbolExtra* default_instance_;
};
// -------------------------------------------------------------------

class EntrySymbol : public ::google::protobuf::Message {
 public:
  EntrySymbol();
  virtual ~EntrySymbol();

  EntrySymbol(const EntrySymbol& from);

  inline EntrySymbol& operator=(const EntrySymbol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntrySymbol& default_instance();

  void Swap(EntrySymbol* other);

  // implements Message ----------------------------------------------

  EntrySymbol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntrySymbol& from);
  void MergeFrom(const EntrySymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string entry_name = 1;
  inline bool has_entry_name() const;
  inline void clear_entry_name();
  static const int kEntryNameFieldNumber = 1;
  inline const ::std::string& entry_name() const;
  inline void set_entry_name(const ::std::string& value);
  inline void set_entry_name(const char* value);
  inline void set_entry_name(const char* value, size_t size);
  inline ::std::string* mutable_entry_name();
  inline ::std::string* release_entry_name();
  inline void set_allocated_entry_name(::std::string* entry_name);

  // required int64 entry_address = 2;
  inline bool has_entry_address() const;
  inline void clear_entry_address();
  static const int kEntryAddressFieldNumber = 2;
  inline ::google::protobuf::int64 entry_address() const;
  inline void set_entry_address(::google::protobuf::int64 value);

  // optional .EntrySymbolExtra entry_extra = 3;
  inline bool has_entry_extra() const;
  inline void clear_entry_extra();
  static const int kEntryExtraFieldNumber = 3;
  inline const ::EntrySymbolExtra& entry_extra() const;
  inline ::EntrySymbolExtra* mutable_entry_extra();
  inline ::EntrySymbolExtra* release_entry_extra();
  inline void set_allocated_entry_extra(::EntrySymbolExtra* entry_extra);

  // @@protoc_insertion_point(class_scope:EntrySymbol)
 private:
  inline void set_has_entry_name();
  inline void clear_has_entry_name();
  inline void set_has_entry_address();
  inline void clear_has_entry_address();
  inline void set_has_entry_extra();
  inline void clear_has_entry_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* entry_name_;
  ::google::protobuf::int64 entry_address_;
  ::EntrySymbolExtra* entry_extra_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static EntrySymbol* default_instance_;
};
// -------------------------------------------------------------------

class Module : public ::google::protobuf::Message {
 public:
  Module();
  virtual ~Module();

  Module(const Module& from);

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Module& default_instance();

  void Swap(Module* other);

  // implements Message ----------------------------------------------

  Module* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Module& from);
  void MergeFrom(const Module& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Function internal_funcs = 1;
  inline int internal_funcs_size() const;
  inline void clear_internal_funcs();
  static const int kInternalFuncsFieldNumber = 1;
  inline const ::Function& internal_funcs(int index) const;
  inline ::Function* mutable_internal_funcs(int index);
  inline ::Function* add_internal_funcs();
  inline const ::google::protobuf::RepeatedPtrField< ::Function >&
      internal_funcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Function >*
      mutable_internal_funcs();

  // repeated .ExternalFunction external_funcs = 2;
  inline int external_funcs_size() const;
  inline void clear_external_funcs();
  static const int kExternalFuncsFieldNumber = 2;
  inline const ::ExternalFunction& external_funcs(int index) const;
  inline ::ExternalFunction* mutable_external_funcs(int index);
  inline ::ExternalFunction* add_external_funcs();
  inline const ::google::protobuf::RepeatedPtrField< ::ExternalFunction >&
      external_funcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ExternalFunction >*
      mutable_external_funcs();

  // repeated .Data internal_data = 3;
  inline int internal_data_size() const;
  inline void clear_internal_data();
  static const int kInternalDataFieldNumber = 3;
  inline const ::Data& internal_data(int index) const;
  inline ::Data* mutable_internal_data(int index);
  inline ::Data* add_internal_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Data >&
      internal_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Data >*
      mutable_internal_data();

  // required string module_name = 4;
  inline bool has_module_name() const;
  inline void clear_module_name();
  static const int kModuleNameFieldNumber = 4;
  inline const ::std::string& module_name() const;
  inline void set_module_name(const ::std::string& value);
  inline void set_module_name(const char* value);
  inline void set_module_name(const char* value, size_t size);
  inline ::std::string* mutable_module_name();
  inline ::std::string* release_module_name();
  inline void set_allocated_module_name(::std::string* module_name);

  // repeated .EntrySymbol entries = 5;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 5;
  inline const ::EntrySymbol& entries(int index) const;
  inline ::EntrySymbol* mutable_entries(int index);
  inline ::EntrySymbol* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::EntrySymbol >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::EntrySymbol >*
      mutable_entries();

  // repeated .ExternalData external_data = 6;
  inline int external_data_size() const;
  inline void clear_external_data();
  static const int kExternalDataFieldNumber = 6;
  inline const ::ExternalData& external_data(int index) const;
  inline ::ExternalData* mutable_external_data(int index);
  inline ::ExternalData* add_external_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ExternalData >&
      external_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ExternalData >*
      mutable_external_data();

  // @@protoc_insertion_point(class_scope:Module)
 private:
  inline void set_has_module_name();
  inline void clear_has_module_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Function > internal_funcs_;
  ::google::protobuf::RepeatedPtrField< ::ExternalFunction > external_funcs_;
  ::google::protobuf::RepeatedPtrField< ::Data > internal_data_;
  ::std::string* module_name_;
  ::google::protobuf::RepeatedPtrField< ::EntrySymbol > entries_;
  ::google::protobuf::RepeatedPtrField< ::ExternalData > external_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Module* default_instance_;
};
// -------------------------------------------------------------------

class Edge_64 : public ::google::protobuf::Message {
 public:
  Edge_64();
  virtual ~Edge_64();

  Edge_64(const Edge_64& from);

  inline Edge_64& operator=(const Edge_64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge_64& default_instance();

  void Swap(Edge_64* other);

  // implements Message ----------------------------------------------

  Edge_64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge_64& from);
  void MergeFrom(const Edge_64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Edge_64_Kind Kind;
  static const Kind Unknown = Edge_64_Kind_Unknown;
  static const Kind May = Edge_64_Kind_May;
  static const Kind Must = Edge_64_Kind_Must;
  static inline bool Kind_IsValid(int value) {
    return Edge_64_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Edge_64_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Edge_64_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Edge_64_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Edge_64_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Edge_64_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Edge_64_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // required .Edge_64.Kind kind = 2;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 2;
  inline ::Edge_64_Kind kind() const;
  inline void set_kind(::Edge_64_Kind value);

  // optional bool label = 3;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 3;
  inline bool label() const;
  inline void set_label(bool value);

  // @@protoc_insertion_point(class_scope:Edge_64)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  int kind_;
  bool label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Edge_64* default_instance_;
};
// -------------------------------------------------------------------

class Edge_32 : public ::google::protobuf::Message {
 public:
  Edge_32();
  virtual ~Edge_32();

  Edge_32(const Edge_32& from);

  inline Edge_32& operator=(const Edge_32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge_32& default_instance();

  void Swap(Edge_32* other);

  // implements Message ----------------------------------------------

  Edge_32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge_32& from);
  void MergeFrom(const Edge_32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Edge_32_Kind Kind;
  static const Kind Unknown = Edge_32_Kind_Unknown;
  static const Kind May = Edge_32_Kind_May;
  static const Kind Must = Edge_32_Kind_Must;
  static inline bool Kind_IsValid(int value) {
    return Edge_32_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Edge_32_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Edge_32_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Edge_32_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Edge_32_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Edge_32_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Edge_32_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required .Edge_32.Kind kind = 2;
  inline bool has_kind() const;
  inline void clear_kind();
  static const int kKindFieldNumber = 2;
  inline ::Edge_32_Kind kind() const;
  inline void set_kind(::Edge_32_Kind value);

  // optional bool label = 3;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 3;
  inline bool label() const;
  inline void set_label(bool value);

  // @@protoc_insertion_point(class_scope:Edge_32)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_kind();
  inline void clear_has_kind();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 value_;
  int kind_;
  bool label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Edge_32* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Branch_Instruction : public ::google::protobuf::Message {
 public:
  Annotated_Branch_Instruction();
  virtual ~Annotated_Branch_Instruction();

  Annotated_Branch_Instruction(const Annotated_Branch_Instruction& from);

  inline Annotated_Branch_Instruction& operator=(const Annotated_Branch_Instruction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Branch_Instruction& default_instance();

  void Swap(Annotated_Branch_Instruction* other);

  // implements Message ----------------------------------------------

  Annotated_Branch_Instruction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Branch_Instruction& from);
  void MergeFrom(const Annotated_Branch_Instruction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Annotated_Branch_Instruction_Branch Branch;
  static const Branch Unknown = Annotated_Branch_Instruction_Branch_Unknown;
  static const Branch jmp = Annotated_Branch_Instruction_Branch_jmp;
  static const Branch ljmp = Annotated_Branch_Instruction_Branch_ljmp;
  static const Branch jo = Annotated_Branch_Instruction_Branch_jo;
  static const Branch jno = Annotated_Branch_Instruction_Branch_jno;
  static const Branch jb = Annotated_Branch_Instruction_Branch_jb;
  static const Branch jae = Annotated_Branch_Instruction_Branch_jae;
  static const Branch je = Annotated_Branch_Instruction_Branch_je;
  static const Branch jne = Annotated_Branch_Instruction_Branch_jne;
  static const Branch jbe = Annotated_Branch_Instruction_Branch_jbe;
  static const Branch ja = Annotated_Branch_Instruction_Branch_ja;
  static const Branch js = Annotated_Branch_Instruction_Branch_js;
  static const Branch jns = Annotated_Branch_Instruction_Branch_jns;
  static const Branch jp = Annotated_Branch_Instruction_Branch_jp;
  static const Branch jnp = Annotated_Branch_Instruction_Branch_jnp;
  static const Branch jl = Annotated_Branch_Instruction_Branch_jl;
  static const Branch jge = Annotated_Branch_Instruction_Branch_jge;
  static const Branch jle = Annotated_Branch_Instruction_Branch_jle;
  static const Branch jg = Annotated_Branch_Instruction_Branch_jg;
  static const Branch loopne = Annotated_Branch_Instruction_Branch_loopne;
  static const Branch loope = Annotated_Branch_Instruction_Branch_loope;
  static const Branch loop = Annotated_Branch_Instruction_Branch_loop;
  static const Branch jCcxz = Annotated_Branch_Instruction_Branch_jCcxz;
  static const Branch ret = Annotated_Branch_Instruction_Branch_ret;
  static const Branch call = Annotated_Branch_Instruction_Branch_call;
  static inline bool Branch_IsValid(int value) {
    return Annotated_Branch_Instruction_Branch_IsValid(value);
  }
  static const Branch Branch_MIN =
    Annotated_Branch_Instruction_Branch_Branch_MIN;
  static const Branch Branch_MAX =
    Annotated_Branch_Instruction_Branch_Branch_MAX;
  static const int Branch_ARRAYSIZE =
    Annotated_Branch_Instruction_Branch_Branch_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Branch_descriptor() {
    return Annotated_Branch_Instruction_Branch_descriptor();
  }
  static inline const ::std::string& Branch_Name(Branch value) {
    return Annotated_Branch_Instruction_Branch_Name(value);
  }
  static inline bool Branch_Parse(const ::std::string& name,
      Branch* value) {
    return Annotated_Branch_Instruction_Branch_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Annotated_Branch_Instruction.Branch branch_instr_name = 1;
  inline bool has_branch_instr_name() const;
  inline void clear_branch_instr_name();
  static const int kBranchInstrNameFieldNumber = 1;
  inline ::Annotated_Branch_Instruction_Branch branch_instr_name() const;
  inline void set_branch_instr_name(::Annotated_Branch_Instruction_Branch value);

  // required bool is_resolved = 2;
  inline bool has_is_resolved() const;
  inline void clear_is_resolved();
  static const int kIsResolvedFieldNumber = 2;
  inline bool is_resolved() const;
  inline void set_is_resolved(bool value);

  // required bool is_indirect = 3;
  inline bool has_is_indirect() const;
  inline void clear_is_indirect();
  static const int kIsIndirectFieldNumber = 3;
  inline bool is_indirect() const;
  inline void set_is_indirect(bool value);

  // required bool is_conditional = 4;
  inline bool has_is_conditional() const;
  inline void clear_is_conditional();
  static const int kIsConditionalFieldNumber = 4;
  inline bool is_conditional() const;
  inline void set_is_conditional(bool value);

  // required bool is_leaf = 5;
  inline bool has_is_leaf() const;
  inline void clear_is_leaf();
  static const int kIsLeafFieldNumber = 5;
  inline bool is_leaf() const;
  inline void set_is_leaf(bool value);

  // repeated .Edge_64 target_to = 6;
  inline int target_to_size() const;
  inline void clear_target_to();
  static const int kTargetToFieldNumber = 6;
  inline const ::Edge_64& target_to(int index) const;
  inline ::Edge_64* mutable_target_to(int index);
  inline ::Edge_64* add_target_to();
  inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
      target_to() const;
  inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
      mutable_target_to();

  // required .Annotated_Instruction instr = 7;
  inline bool has_instr() const;
  inline void clear_instr();
  static const int kInstrFieldNumber = 7;
  inline const ::Annotated_Instruction& instr() const;
  inline ::Annotated_Instruction* mutable_instr();
  inline ::Annotated_Instruction* release_instr();
  inline void set_allocated_instr(::Annotated_Instruction* instr);

  // optional string abstract_expression = 8;
  inline bool has_abstract_expression() const;
  inline void clear_abstract_expression();
  static const int kAbstractExpressionFieldNumber = 8;
  inline const ::std::string& abstract_expression() const;
  inline void set_abstract_expression(const ::std::string& value);
  inline void set_abstract_expression(const char* value);
  inline void set_abstract_expression(const char* value, size_t size);
  inline ::std::string* mutable_abstract_expression();
  inline ::std::string* release_abstract_expression();
  inline void set_allocated_abstract_expression(::std::string* abstract_expression);

  // @@protoc_insertion_point(class_scope:Annotated_Branch_Instruction)
 private:
  inline void set_has_branch_instr_name();
  inline void clear_has_branch_instr_name();
  inline void set_has_is_resolved();
  inline void clear_has_is_resolved();
  inline void set_has_is_indirect();
  inline void clear_has_is_indirect();
  inline void set_has_is_conditional();
  inline void clear_has_is_conditional();
  inline void set_has_is_leaf();
  inline void clear_has_is_leaf();
  inline void set_has_instr();
  inline void clear_has_instr();
  inline void set_has_abstract_expression();
  inline void clear_has_abstract_expression();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int branch_instr_name_;
  bool is_resolved_;
  bool is_indirect_;
  bool is_conditional_;
  bool is_leaf_;
  ::google::protobuf::RepeatedPtrField< ::Edge_64 > target_to_;
  ::Annotated_Instruction* instr_;
  ::std::string* abstract_expression_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Branch_Instruction* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Instruction_Operand : public ::google::protobuf::Message {
 public:
  Annotated_Instruction_Operand();
  virtual ~Annotated_Instruction_Operand();

  Annotated_Instruction_Operand(const Annotated_Instruction_Operand& from);

  inline Annotated_Instruction_Operand& operator=(const Annotated_Instruction_Operand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Instruction_Operand& default_instance();

  void Swap(Annotated_Instruction_Operand* other);

  // implements Message ----------------------------------------------

  Annotated_Instruction_Operand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Instruction_Operand& from);
  void MergeFrom(const Annotated_Instruction_Operand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Annotated_Instruction_Operand_Operand_Type Operand_Type;
  static const Operand_Type Unknown = Annotated_Instruction_Operand_Operand_Type_Unknown;
  static const Operand_Type Immediate = Annotated_Instruction_Operand_Operand_Type_Immediate;
  static const Operand_Type Register = Annotated_Instruction_Operand_Operand_Type_Register;
  static const Operand_Type Memory = Annotated_Instruction_Operand_Operand_Type_Memory;
  static const Operand_Type Address = Annotated_Instruction_Operand_Operand_Type_Address;
  static inline bool Operand_Type_IsValid(int value) {
    return Annotated_Instruction_Operand_Operand_Type_IsValid(value);
  }
  static const Operand_Type Operand_Type_MIN =
    Annotated_Instruction_Operand_Operand_Type_Operand_Type_MIN;
  static const Operand_Type Operand_Type_MAX =
    Annotated_Instruction_Operand_Operand_Type_Operand_Type_MAX;
  static const int Operand_Type_ARRAYSIZE =
    Annotated_Instruction_Operand_Operand_Type_Operand_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Operand_Type_descriptor() {
    return Annotated_Instruction_Operand_Operand_Type_descriptor();
  }
  static inline const ::std::string& Operand_Type_Name(Operand_Type value) {
    return Annotated_Instruction_Operand_Operand_Type_Name(value);
  }
  static inline bool Operand_Type_Parse(const ::std::string& name,
      Operand_Type* value) {
    return Annotated_Instruction_Operand_Operand_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::int32 pos() const;
  inline void set_pos(::google::protobuf::int32 value);

  // required .Annotated_Instruction.Operand.Operand_Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Annotated_Instruction_Operand_Operand_Type type() const;
  inline void set_type(::Annotated_Instruction_Operand_Operand_Type value);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Annotated_Instruction.Operand)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 pos_;
  int type_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Instruction_Operand* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Instruction : public ::google::protobuf::Message {
 public:
  Annotated_Instruction();
  virtual ~Annotated_Instruction();

  Annotated_Instruction(const Annotated_Instruction& from);

  inline Annotated_Instruction& operator=(const Annotated_Instruction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Instruction& default_instance();

  void Swap(Annotated_Instruction* other);

  // implements Message ----------------------------------------------

  Annotated_Instruction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Instruction& from);
  void MergeFrom(const Annotated_Instruction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Annotated_Instruction_Operand Operand;

  // accessors -------------------------------------------------------

  // required string instr_name = 1;
  inline bool has_instr_name() const;
  inline void clear_instr_name();
  static const int kInstrNameFieldNumber = 1;
  inline const ::std::string& instr_name() const;
  inline void set_instr_name(const ::std::string& value);
  inline void set_instr_name(const char* value);
  inline void set_instr_name(const char* value, size_t size);
  inline ::std::string* mutable_instr_name();
  inline ::std::string* release_instr_name();
  inline void set_allocated_instr_name(::std::string* instr_name);

  // required string instr_string = 2;
  inline bool has_instr_string() const;
  inline void clear_instr_string();
  static const int kInstrStringFieldNumber = 2;
  inline const ::std::string& instr_string() const;
  inline void set_instr_string(const ::std::string& value);
  inline void set_instr_string(const char* value);
  inline void set_instr_string(const char* value, size_t size);
  inline ::std::string* mutable_instr_string();
  inline ::std::string* release_instr_string();
  inline void set_allocated_instr_string(::std::string* instr_string);

  // required int64 inst_addr = 3;
  inline bool has_inst_addr() const;
  inline void clear_inst_addr();
  static const int kInstAddrFieldNumber = 3;
  inline ::google::protobuf::int64 inst_addr() const;
  inline void set_inst_addr(::google::protobuf::int64 value);

  // required int32 inst_len = 4;
  inline bool has_inst_len() const;
  inline void clear_inst_len();
  static const int kInstLenFieldNumber = 4;
  inline ::google::protobuf::int32 inst_len() const;
  inline void set_inst_len(::google::protobuf::int32 value);

  // required int32 op_count = 5;
  inline bool has_op_count() const;
  inline void clear_op_count();
  static const int kOpCountFieldNumber = 5;
  inline ::google::protobuf::int32 op_count() const;
  inline void set_op_count(::google::protobuf::int32 value);

  // optional string inst_addr_hex = 6;
  inline bool has_inst_addr_hex() const;
  inline void clear_inst_addr_hex();
  static const int kInstAddrHexFieldNumber = 6;
  inline const ::std::string& inst_addr_hex() const;
  inline void set_inst_addr_hex(const ::std::string& value);
  inline void set_inst_addr_hex(const char* value);
  inline void set_inst_addr_hex(const char* value, size_t size);
  inline ::std::string* mutable_inst_addr_hex();
  inline ::std::string* release_inst_addr_hex();
  inline void set_allocated_inst_addr_hex(::std::string* inst_addr_hex);

  // required bool is_branch_instruction = 7;
  inline bool has_is_branch_instruction() const;
  inline void clear_is_branch_instruction();
  static const int kIsBranchInstructionFieldNumber = 7;
  inline bool is_branch_instruction() const;
  inline void set_is_branch_instruction(bool value);

  // repeated .Annotated_Instruction.Operand argument = 8;
  inline int argument_size() const;
  inline void clear_argument();
  static const int kArgumentFieldNumber = 8;
  inline const ::Annotated_Instruction_Operand& argument(int index) const;
  inline ::Annotated_Instruction_Operand* mutable_argument(int index);
  inline ::Annotated_Instruction_Operand* add_argument();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction_Operand >&
      argument() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction_Operand >*
      mutable_argument();

  // repeated .Edge_64 referered_from = 9;
  inline int referered_from_size() const;
  inline void clear_referered_from();
  static const int kRefereredFromFieldNumber = 9;
  inline const ::Edge_64& referered_from(int index) const;
  inline ::Edge_64* mutable_referered_from(int index);
  inline ::Edge_64* add_referered_from();
  inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
      referered_from() const;
  inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
      mutable_referered_from();

  // @@protoc_insertion_point(class_scope:Annotated_Instruction)
 private:
  inline void set_has_instr_name();
  inline void clear_has_instr_name();
  inline void set_has_instr_string();
  inline void clear_has_instr_string();
  inline void set_has_inst_addr();
  inline void clear_has_inst_addr();
  inline void set_has_inst_len();
  inline void clear_has_inst_len();
  inline void set_has_op_count();
  inline void clear_has_op_count();
  inline void set_has_inst_addr_hex();
  inline void clear_has_inst_addr_hex();
  inline void set_has_is_branch_instruction();
  inline void clear_has_is_branch_instruction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* instr_name_;
  ::std::string* instr_string_;
  ::google::protobuf::int64 inst_addr_;
  ::google::protobuf::int32 inst_len_;
  ::google::protobuf::int32 op_count_;
  ::std::string* inst_addr_hex_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction_Operand > argument_;
  ::google::protobuf::RepeatedPtrField< ::Edge_64 > referered_from_;
  bool is_branch_instruction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Instruction* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Register_32_Property : public ::google::protobuf::Message {
 public:
  Annotated_Register_32_Property();
  virtual ~Annotated_Register_32_Property();

  Annotated_Register_32_Property(const Annotated_Register_32_Property& from);

  inline Annotated_Register_32_Property& operator=(const Annotated_Register_32_Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Register_32_Property& default_instance();

  void Swap(Annotated_Register_32_Property* other);

  // implements Message ----------------------------------------------

  Annotated_Register_32_Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Register_32_Property& from);
  void MergeFrom(const Annotated_Register_32_Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Unknown = 1;
  inline bool has_unknown() const;
  inline void clear_unknown();
  static const int kUnknownFieldNumber = 1;
  inline bool unknown() const;
  inline void set_unknown(bool value);

  // optional bool Alive = 2;
  inline bool has_alive() const;
  inline void clear_alive();
  static const int kAliveFieldNumber = 2;
  inline bool alive() const;
  inline void set_alive(bool value);

  // @@protoc_insertion_point(class_scope:Annotated_Register_32.Property)
 private:
  inline void set_has_unknown();
  inline void clear_has_unknown();
  inline void set_has_alive();
  inline void clear_has_alive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool unknown_;
  bool alive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Register_32_Property* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Register_32 : public ::google::protobuf::Message {
 public:
  Annotated_Register_32();
  virtual ~Annotated_Register_32();

  Annotated_Register_32(const Annotated_Register_32& from);

  inline Annotated_Register_32& operator=(const Annotated_Register_32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Register_32& default_instance();

  void Swap(Annotated_Register_32* other);

  // implements Message ----------------------------------------------

  Annotated_Register_32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Register_32& from);
  void MergeFrom(const Annotated_Register_32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Annotated_Register_32_Property Property;

  typedef Annotated_Register_32_Register Register;
  static const Register Unknown = Annotated_Register_32_Register_Unknown;
  static const Register eax = Annotated_Register_32_Register_eax;
  static const Register ecx = Annotated_Register_32_Register_ecx;
  static const Register edx = Annotated_Register_32_Register_edx;
  static const Register ebx = Annotated_Register_32_Register_ebx;
  static const Register esp = Annotated_Register_32_Register_esp;
  static const Register ebp = Annotated_Register_32_Register_ebp;
  static const Register esi = Annotated_Register_32_Register_esi;
  static const Register edi = Annotated_Register_32_Register_edi;
  static const Register eip = Annotated_Register_32_Register_eip;
  static const Register fs_base = Annotated_Register_32_Register_fs_base;
  static const Register gs_base = Annotated_Register_32_Register_gs_base;
  static const Register gtd = Annotated_Register_32_Register_gtd;
  static const Register ldt = Annotated_Register_32_Register_ldt;
  static const Register mxcsr = Annotated_Register_32_Register_mxcsr;
  static inline bool Register_IsValid(int value) {
    return Annotated_Register_32_Register_IsValid(value);
  }
  static const Register Register_MIN =
    Annotated_Register_32_Register_Register_MIN;
  static const Register Register_MAX =
    Annotated_Register_32_Register_Register_MAX;
  static const int Register_ARRAYSIZE =
    Annotated_Register_32_Register_Register_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Register_descriptor() {
    return Annotated_Register_32_Register_descriptor();
  }
  static inline const ::std::string& Register_Name(Register value) {
    return Annotated_Register_32_Register_Name(value);
  }
  static inline bool Register_Parse(const ::std::string& name,
      Register* value) {
    return Annotated_Register_32_Register_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Annotated_Register_32.Register name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::Annotated_Register_32_Register name() const;
  inline void set_name(::Annotated_Register_32_Register value);

  // required int64 used_at_addr = 2;
  inline bool has_used_at_addr() const;
  inline void clear_used_at_addr();
  static const int kUsedAtAddrFieldNumber = 2;
  inline ::google::protobuf::int64 used_at_addr() const;
  inline void set_used_at_addr(::google::protobuf::int64 value);

  // optional string used_at_addr_hex = 3;
  inline bool has_used_at_addr_hex() const;
  inline void clear_used_at_addr_hex();
  static const int kUsedAtAddrHexFieldNumber = 3;
  inline const ::std::string& used_at_addr_hex() const;
  inline void set_used_at_addr_hex(const ::std::string& value);
  inline void set_used_at_addr_hex(const char* value);
  inline void set_used_at_addr_hex(const char* value, size_t size);
  inline ::std::string* mutable_used_at_addr_hex();
  inline ::std::string* release_used_at_addr_hex();
  inline void set_allocated_used_at_addr_hex(::std::string* used_at_addr_hex);

  // repeated .Edge_32 value = 7;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 7;
  inline const ::Edge_32& value(int index) const;
  inline ::Edge_32* mutable_value(int index);
  inline ::Edge_32* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::Edge_32 >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::Edge_32 >*
      mutable_value();

  // required .Annotated_Register_32.Property fact = 8;
  inline bool has_fact() const;
  inline void clear_fact();
  static const int kFactFieldNumber = 8;
  inline const ::Annotated_Register_32_Property& fact() const;
  inline ::Annotated_Register_32_Property* mutable_fact();
  inline ::Annotated_Register_32_Property* release_fact();
  inline void set_allocated_fact(::Annotated_Register_32_Property* fact);

  // optional string abstract_expression = 9;
  inline bool has_abstract_expression() const;
  inline void clear_abstract_expression();
  static const int kAbstractExpressionFieldNumber = 9;
  inline const ::std::string& abstract_expression() const;
  inline void set_abstract_expression(const ::std::string& value);
  inline void set_abstract_expression(const char* value);
  inline void set_abstract_expression(const char* value, size_t size);
  inline ::std::string* mutable_abstract_expression();
  inline ::std::string* release_abstract_expression();
  inline void set_allocated_abstract_expression(::std::string* abstract_expression);

  // @@protoc_insertion_point(class_scope:Annotated_Register_32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_used_at_addr();
  inline void clear_has_used_at_addr();
  inline void set_has_used_at_addr_hex();
  inline void clear_has_used_at_addr_hex();
  inline void set_has_fact();
  inline void clear_has_fact();
  inline void set_has_abstract_expression();
  inline void clear_has_abstract_expression();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 used_at_addr_;
  ::std::string* used_at_addr_hex_;
  ::google::protobuf::RepeatedPtrField< ::Edge_32 > value_;
  ::Annotated_Register_32_Property* fact_;
  ::std::string* abstract_expression_;
  int name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Register_32* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Register_64_Property : public ::google::protobuf::Message {
 public:
  Annotated_Register_64_Property();
  virtual ~Annotated_Register_64_Property();

  Annotated_Register_64_Property(const Annotated_Register_64_Property& from);

  inline Annotated_Register_64_Property& operator=(const Annotated_Register_64_Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Register_64_Property& default_instance();

  void Swap(Annotated_Register_64_Property* other);

  // implements Message ----------------------------------------------

  Annotated_Register_64_Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Register_64_Property& from);
  void MergeFrom(const Annotated_Register_64_Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Unknown = 1;
  inline bool has_unknown() const;
  inline void clear_unknown();
  static const int kUnknownFieldNumber = 1;
  inline bool unknown() const;
  inline void set_unknown(bool value);

  // optional bool Alive = 2;
  inline bool has_alive() const;
  inline void clear_alive();
  static const int kAliveFieldNumber = 2;
  inline bool alive() const;
  inline void set_alive(bool value);

  // @@protoc_insertion_point(class_scope:Annotated_Register_64.Property)
 private:
  inline void set_has_unknown();
  inline void clear_has_unknown();
  inline void set_has_alive();
  inline void clear_has_alive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool unknown_;
  bool alive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Register_64_Property* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Register_64 : public ::google::protobuf::Message {
 public:
  Annotated_Register_64();
  virtual ~Annotated_Register_64();

  Annotated_Register_64(const Annotated_Register_64& from);

  inline Annotated_Register_64& operator=(const Annotated_Register_64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Register_64& default_instance();

  void Swap(Annotated_Register_64* other);

  // implements Message ----------------------------------------------

  Annotated_Register_64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Register_64& from);
  void MergeFrom(const Annotated_Register_64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Annotated_Register_64_Property Property;

  typedef Annotated_Register_64_Register Register;
  static const Register Unknown = Annotated_Register_64_Register_Unknown;
  static const Register rax = Annotated_Register_64_Register_rax;
  static const Register rcx = Annotated_Register_64_Register_rcx;
  static const Register rdx = Annotated_Register_64_Register_rdx;
  static const Register rbx = Annotated_Register_64_Register_rbx;
  static const Register rsp = Annotated_Register_64_Register_rsp;
  static const Register rbp = Annotated_Register_64_Register_rbp;
  static const Register rsi = Annotated_Register_64_Register_rsi;
  static const Register rdi = Annotated_Register_64_Register_rdi;
  static const Register rip = Annotated_Register_64_Register_rip;
  static const Register r8 = Annotated_Register_64_Register_r8;
  static const Register r9 = Annotated_Register_64_Register_r9;
  static const Register r10 = Annotated_Register_64_Register_r10;
  static const Register r11 = Annotated_Register_64_Register_r11;
  static const Register r12 = Annotated_Register_64_Register_r12;
  static const Register r13 = Annotated_Register_64_Register_r13;
  static const Register r14 = Annotated_Register_64_Register_r14;
  static const Register r15 = Annotated_Register_64_Register_r15;
  static const Register fs_base = Annotated_Register_64_Register_fs_base;
  static const Register gs_base = Annotated_Register_64_Register_gs_base;
  static const Register gdt = Annotated_Register_64_Register_gdt;
  static const Register ldt = Annotated_Register_64_Register_ldt;
  static inline bool Register_IsValid(int value) {
    return Annotated_Register_64_Register_IsValid(value);
  }
  static const Register Register_MIN =
    Annotated_Register_64_Register_Register_MIN;
  static const Register Register_MAX =
    Annotated_Register_64_Register_Register_MAX;
  static const int Register_ARRAYSIZE =
    Annotated_Register_64_Register_Register_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Register_descriptor() {
    return Annotated_Register_64_Register_descriptor();
  }
  static inline const ::std::string& Register_Name(Register value) {
    return Annotated_Register_64_Register_Name(value);
  }
  static inline bool Register_Parse(const ::std::string& name,
      Register* value) {
    return Annotated_Register_64_Register_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Annotated_Register_64.Register name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::Annotated_Register_64_Register name() const;
  inline void set_name(::Annotated_Register_64_Register value);

  // required int64 used_at_addr = 2;
  inline bool has_used_at_addr() const;
  inline void clear_used_at_addr();
  static const int kUsedAtAddrFieldNumber = 2;
  inline ::google::protobuf::int64 used_at_addr() const;
  inline void set_used_at_addr(::google::protobuf::int64 value);

  // optional string used_at_addr_hex = 3;
  inline bool has_used_at_addr_hex() const;
  inline void clear_used_at_addr_hex();
  static const int kUsedAtAddrHexFieldNumber = 3;
  inline const ::std::string& used_at_addr_hex() const;
  inline void set_used_at_addr_hex(const ::std::string& value);
  inline void set_used_at_addr_hex(const char* value);
  inline void set_used_at_addr_hex(const char* value, size_t size);
  inline ::std::string* mutable_used_at_addr_hex();
  inline ::std::string* release_used_at_addr_hex();
  inline void set_allocated_used_at_addr_hex(::std::string* used_at_addr_hex);

  // repeated .Edge_64 value = 4;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::Edge_64& value(int index) const;
  inline ::Edge_64* mutable_value(int index);
  inline ::Edge_64* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
      mutable_value();

  // required .Annotated_Register_64.Property fact = 5;
  inline bool has_fact() const;
  inline void clear_fact();
  static const int kFactFieldNumber = 5;
  inline const ::Annotated_Register_64_Property& fact() const;
  inline ::Annotated_Register_64_Property* mutable_fact();
  inline ::Annotated_Register_64_Property* release_fact();
  inline void set_allocated_fact(::Annotated_Register_64_Property* fact);

  // optional string abstract_expression = 6;
  inline bool has_abstract_expression() const;
  inline void clear_abstract_expression();
  static const int kAbstractExpressionFieldNumber = 6;
  inline const ::std::string& abstract_expression() const;
  inline void set_abstract_expression(const ::std::string& value);
  inline void set_abstract_expression(const char* value);
  inline void set_abstract_expression(const char* value, size_t size);
  inline ::std::string* mutable_abstract_expression();
  inline ::std::string* release_abstract_expression();
  inline void set_allocated_abstract_expression(::std::string* abstract_expression);

  // @@protoc_insertion_point(class_scope:Annotated_Register_64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_used_at_addr();
  inline void clear_has_used_at_addr();
  inline void set_has_used_at_addr_hex();
  inline void clear_has_used_at_addr_hex();
  inline void set_has_fact();
  inline void clear_has_fact();
  inline void set_has_abstract_expression();
  inline void clear_has_abstract_expression();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 used_at_addr_;
  ::std::string* used_at_addr_hex_;
  ::google::protobuf::RepeatedPtrField< ::Edge_64 > value_;
  ::Annotated_Register_64_Property* fact_;
  ::std::string* abstract_expression_;
  int name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Register_64* default_instance_;
};
// -------------------------------------------------------------------

class Annotated_Function : public ::google::protobuf::Message {
 public:
  Annotated_Function();
  virtual ~Annotated_Function();

  Annotated_Function(const Annotated_Function& from);

  inline Annotated_Function& operator=(const Annotated_Function& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotated_Function& default_instance();

  void Swap(Annotated_Function* other);

  // implements Message ----------------------------------------------

  Annotated_Function* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Annotated_Function& from);
  void MergeFrom(const Annotated_Function& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 start_at_addr = 2;
  inline bool has_start_at_addr() const;
  inline void clear_start_at_addr();
  static const int kStartAtAddrFieldNumber = 2;
  inline ::google::protobuf::int64 start_at_addr() const;
  inline void set_start_at_addr(::google::protobuf::int64 value);

  // optional string start_at_addr_hex = 3;
  inline bool has_start_at_addr_hex() const;
  inline void clear_start_at_addr_hex();
  static const int kStartAtAddrHexFieldNumber = 3;
  inline const ::std::string& start_at_addr_hex() const;
  inline void set_start_at_addr_hex(const ::std::string& value);
  inline void set_start_at_addr_hex(const char* value);
  inline void set_start_at_addr_hex(const char* value, size_t size);
  inline ::std::string* mutable_start_at_addr_hex();
  inline ::std::string* release_start_at_addr_hex();
  inline void set_allocated_start_at_addr_hex(::std::string* start_at_addr_hex);

  // optional int64 end_at_addr = 4;
  inline bool has_end_at_addr() const;
  inline void clear_end_at_addr();
  static const int kEndAtAddrFieldNumber = 4;
  inline ::google::protobuf::int64 end_at_addr() const;
  inline void set_end_at_addr(::google::protobuf::int64 value);

  // optional string end_at_addr_hex = 5;
  inline bool has_end_at_addr_hex() const;
  inline void clear_end_at_addr_hex();
  static const int kEndAtAddrHexFieldNumber = 5;
  inline const ::std::string& end_at_addr_hex() const;
  inline void set_end_at_addr_hex(const ::std::string& value);
  inline void set_end_at_addr_hex(const char* value);
  inline void set_end_at_addr_hex(const char* value, size_t size);
  inline ::std::string* mutable_end_at_addr_hex();
  inline ::std::string* release_end_at_addr_hex();
  inline void set_allocated_end_at_addr_hex(::std::string* end_at_addr_hex);

  // repeated .Annotated_Instruction prolog = 6;
  inline int prolog_size() const;
  inline void clear_prolog();
  static const int kPrologFieldNumber = 6;
  inline const ::Annotated_Instruction& prolog(int index) const;
  inline ::Annotated_Instruction* mutable_prolog(int index);
  inline ::Annotated_Instruction* add_prolog();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >&
      prolog() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >*
      mutable_prolog();

  // repeated .Annotated_Instruction epilog = 7;
  inline int epilog_size() const;
  inline void clear_epilog();
  static const int kEpilogFieldNumber = 7;
  inline const ::Annotated_Instruction& epilog(int index) const;
  inline ::Annotated_Instruction* mutable_epilog(int index);
  inline ::Annotated_Instruction* add_epilog();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >&
      epilog() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >*
      mutable_epilog();

  // repeated .Edge_64 referered_from = 8;
  inline int referered_from_size() const;
  inline void clear_referered_from();
  static const int kRefereredFromFieldNumber = 8;
  inline const ::Edge_64& referered_from(int index) const;
  inline ::Edge_64* mutable_referered_from(int index);
  inline ::Edge_64* add_referered_from();
  inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
      referered_from() const;
  inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
      mutable_referered_from();

  // repeated .Edge_64 calls = 9;
  inline int calls_size() const;
  inline void clear_calls();
  static const int kCallsFieldNumber = 9;
  inline const ::Edge_64& calls(int index) const;
  inline ::Edge_64* mutable_calls(int index);
  inline ::Edge_64* add_calls();
  inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
      calls() const;
  inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
      mutable_calls();

  // @@protoc_insertion_point(class_scope:Annotated_Function)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_start_at_addr();
  inline void clear_has_start_at_addr();
  inline void set_has_start_at_addr_hex();
  inline void clear_has_start_at_addr_hex();
  inline void set_has_end_at_addr();
  inline void clear_has_end_at_addr();
  inline void set_has_end_at_addr_hex();
  inline void clear_has_end_at_addr_hex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 start_at_addr_;
  ::std::string* start_at_addr_hex_;
  ::google::protobuf::int64 end_at_addr_;
  ::std::string* end_at_addr_hex_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction > prolog_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction > epilog_;
  ::google::protobuf::RepeatedPtrField< ::Edge_64 > referered_from_;
  ::google::protobuf::RepeatedPtrField< ::Edge_64 > calls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Annotated_Function* default_instance_;
};
// -------------------------------------------------------------------

class Disassembly : public ::google::protobuf::Message {
 public:
  Disassembly();
  virtual ~Disassembly();

  Disassembly(const Disassembly& from);

  inline Disassembly& operator=(const Disassembly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Disassembly& default_instance();

  void Swap(Disassembly* other);

  // implements Message ----------------------------------------------

  Disassembly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Disassembly& from);
  void MergeFrom(const Disassembly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Annotated_Instruction instr = 1;
  inline int instr_size() const;
  inline void clear_instr();
  static const int kInstrFieldNumber = 1;
  inline const ::Annotated_Instruction& instr(int index) const;
  inline ::Annotated_Instruction* mutable_instr(int index);
  inline ::Annotated_Instruction* add_instr();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >&
      instr() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >*
      mutable_instr();

  // repeated .Annotated_Branch_Instruction branch_instr = 2;
  inline int branch_instr_size() const;
  inline void clear_branch_instr();
  static const int kBranchInstrFieldNumber = 2;
  inline const ::Annotated_Branch_Instruction& branch_instr(int index) const;
  inline ::Annotated_Branch_Instruction* mutable_branch_instr(int index);
  inline ::Annotated_Branch_Instruction* add_branch_instr();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Branch_Instruction >&
      branch_instr() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Branch_Instruction >*
      mutable_branch_instr();

  // repeated .Annotated_Register_32 reg_32 = 3;
  inline int reg_32_size() const;
  inline void clear_reg_32();
  static const int kReg32FieldNumber = 3;
  inline const ::Annotated_Register_32& reg_32(int index) const;
  inline ::Annotated_Register_32* mutable_reg_32(int index);
  inline ::Annotated_Register_32* add_reg_32();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Register_32 >&
      reg_32() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Register_32 >*
      mutable_reg_32();

  // repeated .Annotated_Register_64 reg_64 = 4;
  inline int reg_64_size() const;
  inline void clear_reg_64();
  static const int kReg64FieldNumber = 4;
  inline const ::Annotated_Register_64& reg_64(int index) const;
  inline ::Annotated_Register_64* mutable_reg_64(int index);
  inline ::Annotated_Register_64* add_reg_64();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Register_64 >&
      reg_64() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Register_64 >*
      mutable_reg_64();

  // repeated .Annotated_Function func = 5;
  inline int func_size() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 5;
  inline const ::Annotated_Function& func(int index) const;
  inline ::Annotated_Function* mutable_func(int index);
  inline ::Annotated_Function* add_func();
  inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Function >&
      func() const;
  inline ::google::protobuf::RepeatedPtrField< ::Annotated_Function >*
      mutable_func();

  // @@protoc_insertion_point(class_scope:Disassembly)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction > instr_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Branch_Instruction > branch_instr_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Register_32 > reg_32_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Register_64 > reg_64_;
  ::google::protobuf::RepeatedPtrField< ::Annotated_Function > func_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CFG_2eproto();
  friend void protobuf_AssignDesc_CFG_2eproto();
  friend void protobuf_ShutdownFile_CFG_2eproto();

  void InitAsDefaultInstance();
  static Disassembly* default_instance_;
};
// ===================================================================


// ===================================================================

// JumpTbl

// repeated int64 table_entries = 1;
inline int JumpTbl::table_entries_size() const {
  return table_entries_.size();
}
inline void JumpTbl::clear_table_entries() {
  table_entries_.Clear();
}
inline ::google::protobuf::int64 JumpTbl::table_entries(int index) const {
  return table_entries_.Get(index);
}
inline void JumpTbl::set_table_entries(int index, ::google::protobuf::int64 value) {
  table_entries_.Set(index, value);
}
inline void JumpTbl::add_table_entries(::google::protobuf::int64 value) {
  table_entries_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
JumpTbl::table_entries() const {
  return table_entries_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
JumpTbl::mutable_table_entries() {
  return &table_entries_;
}

// required int32 zero_offset = 2;
inline bool JumpTbl::has_zero_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JumpTbl::set_has_zero_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JumpTbl::clear_has_zero_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JumpTbl::clear_zero_offset() {
  zero_offset_ = 0;
  clear_has_zero_offset();
}
inline ::google::protobuf::int32 JumpTbl::zero_offset() const {
  return zero_offset_;
}
inline void JumpTbl::set_zero_offset(::google::protobuf::int32 value) {
  set_has_zero_offset();
  zero_offset_ = value;
}

// optional int64 offset_from_data = 3;
inline bool JumpTbl::has_offset_from_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JumpTbl::set_has_offset_from_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JumpTbl::clear_has_offset_from_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JumpTbl::clear_offset_from_data() {
  offset_from_data_ = GOOGLE_LONGLONG(0);
  clear_has_offset_from_data();
}
inline ::google::protobuf::int64 JumpTbl::offset_from_data() const {
  return offset_from_data_;
}
inline void JumpTbl::set_offset_from_data(::google::protobuf::int64 value) {
  set_has_offset_from_data();
  offset_from_data_ = value;
}

// -------------------------------------------------------------------

// JumpIndexTbl

// required bytes table_entries = 1;
inline bool JumpIndexTbl::has_table_entries() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JumpIndexTbl::set_has_table_entries() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JumpIndexTbl::clear_has_table_entries() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JumpIndexTbl::clear_table_entries() {
  if (table_entries_ != &::google::protobuf::internal::kEmptyString) {
    table_entries_->clear();
  }
  clear_has_table_entries();
}
inline const ::std::string& JumpIndexTbl::table_entries() const {
  return *table_entries_;
}
inline void JumpIndexTbl::set_table_entries(const ::std::string& value) {
  set_has_table_entries();
  if (table_entries_ == &::google::protobuf::internal::kEmptyString) {
    table_entries_ = new ::std::string;
  }
  table_entries_->assign(value);
}
inline void JumpIndexTbl::set_table_entries(const char* value) {
  set_has_table_entries();
  if (table_entries_ == &::google::protobuf::internal::kEmptyString) {
    table_entries_ = new ::std::string;
  }
  table_entries_->assign(value);
}
inline void JumpIndexTbl::set_table_entries(const void* value, size_t size) {
  set_has_table_entries();
  if (table_entries_ == &::google::protobuf::internal::kEmptyString) {
    table_entries_ = new ::std::string;
  }
  table_entries_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JumpIndexTbl::mutable_table_entries() {
  set_has_table_entries();
  if (table_entries_ == &::google::protobuf::internal::kEmptyString) {
    table_entries_ = new ::std::string;
  }
  return table_entries_;
}
inline ::std::string* JumpIndexTbl::release_table_entries() {
  clear_has_table_entries();
  if (table_entries_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_entries_;
    table_entries_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JumpIndexTbl::set_allocated_table_entries(::std::string* table_entries) {
  if (table_entries_ != &::google::protobuf::internal::kEmptyString) {
    delete table_entries_;
  }
  if (table_entries) {
    set_has_table_entries();
    table_entries_ = table_entries;
  } else {
    clear_has_table_entries();
    table_entries_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 zero_offset = 2;
inline bool JumpIndexTbl::has_zero_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JumpIndexTbl::set_has_zero_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JumpIndexTbl::clear_has_zero_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JumpIndexTbl::clear_zero_offset() {
  zero_offset_ = 0;
  clear_has_zero_offset();
}
inline ::google::protobuf::int32 JumpIndexTbl::zero_offset() const {
  return zero_offset_;
}
inline void JumpIndexTbl::set_zero_offset(::google::protobuf::int32 value) {
  set_has_zero_offset();
  zero_offset_ = value;
}

// -------------------------------------------------------------------

// Instruction

// required bytes inst_bytes = 1;
inline bool Instruction::has_inst_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Instruction::set_has_inst_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Instruction::clear_has_inst_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Instruction::clear_inst_bytes() {
  if (inst_bytes_ != &::google::protobuf::internal::kEmptyString) {
    inst_bytes_->clear();
  }
  clear_has_inst_bytes();
}
inline const ::std::string& Instruction::inst_bytes() const {
  return *inst_bytes_;
}
inline void Instruction::set_inst_bytes(const ::std::string& value) {
  set_has_inst_bytes();
  if (inst_bytes_ == &::google::protobuf::internal::kEmptyString) {
    inst_bytes_ = new ::std::string;
  }
  inst_bytes_->assign(value);
}
inline void Instruction::set_inst_bytes(const char* value) {
  set_has_inst_bytes();
  if (inst_bytes_ == &::google::protobuf::internal::kEmptyString) {
    inst_bytes_ = new ::std::string;
  }
  inst_bytes_->assign(value);
}
inline void Instruction::set_inst_bytes(const void* value, size_t size) {
  set_has_inst_bytes();
  if (inst_bytes_ == &::google::protobuf::internal::kEmptyString) {
    inst_bytes_ = new ::std::string;
  }
  inst_bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Instruction::mutable_inst_bytes() {
  set_has_inst_bytes();
  if (inst_bytes_ == &::google::protobuf::internal::kEmptyString) {
    inst_bytes_ = new ::std::string;
  }
  return inst_bytes_;
}
inline ::std::string* Instruction::release_inst_bytes() {
  clear_has_inst_bytes();
  if (inst_bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inst_bytes_;
    inst_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Instruction::set_allocated_inst_bytes(::std::string* inst_bytes) {
  if (inst_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_bytes_;
  }
  if (inst_bytes) {
    set_has_inst_bytes();
    inst_bytes_ = inst_bytes;
  } else {
    clear_has_inst_bytes();
    inst_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 inst_addr = 2;
inline bool Instruction::has_inst_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Instruction::set_has_inst_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Instruction::clear_has_inst_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Instruction::clear_inst_addr() {
  inst_addr_ = GOOGLE_LONGLONG(0);
  clear_has_inst_addr();
}
inline ::google::protobuf::int64 Instruction::inst_addr() const {
  return inst_addr_;
}
inline void Instruction::set_inst_addr(::google::protobuf::int64 value) {
  set_has_inst_addr();
  inst_addr_ = value;
}

// optional int64 true_target = 3;
inline bool Instruction::has_true_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Instruction::set_has_true_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Instruction::clear_has_true_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Instruction::clear_true_target() {
  true_target_ = GOOGLE_LONGLONG(0);
  clear_has_true_target();
}
inline ::google::protobuf::int64 Instruction::true_target() const {
  return true_target_;
}
inline void Instruction::set_true_target(::google::protobuf::int64 value) {
  set_has_true_target();
  true_target_ = value;
}

// optional int64 false_target = 4;
inline bool Instruction::has_false_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Instruction::set_has_false_target() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Instruction::clear_has_false_target() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Instruction::clear_false_target() {
  false_target_ = GOOGLE_LONGLONG(0);
  clear_has_false_target();
}
inline ::google::protobuf::int64 Instruction::false_target() const {
  return false_target_;
}
inline void Instruction::set_false_target(::google::protobuf::int64 value) {
  set_has_false_target();
  false_target_ = value;
}

// required int32 inst_len = 5;
inline bool Instruction::has_inst_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Instruction::set_has_inst_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Instruction::clear_has_inst_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Instruction::clear_inst_len() {
  inst_len_ = 0;
  clear_has_inst_len();
}
inline ::google::protobuf::int32 Instruction::inst_len() const {
  return inst_len_;
}
inline void Instruction::set_inst_len(::google::protobuf::int32 value) {
  set_has_inst_len();
  inst_len_ = value;
}

// optional int64 data_offset = 6;
inline bool Instruction::has_data_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Instruction::set_has_data_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Instruction::clear_has_data_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Instruction::clear_data_offset() {
  data_offset_ = GOOGLE_LONGLONG(0);
  clear_has_data_offset();
}
inline ::google::protobuf::int64 Instruction::data_offset() const {
  return data_offset_;
}
inline void Instruction::set_data_offset(::google::protobuf::int64 value) {
  set_has_data_offset();
  data_offset_ = value;
}

// optional string ext_call_name = 7;
inline bool Instruction::has_ext_call_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Instruction::set_has_ext_call_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Instruction::clear_has_ext_call_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Instruction::clear_ext_call_name() {
  if (ext_call_name_ != &::google::protobuf::internal::kEmptyString) {
    ext_call_name_->clear();
  }
  clear_has_ext_call_name();
}
inline const ::std::string& Instruction::ext_call_name() const {
  return *ext_call_name_;
}
inline void Instruction::set_ext_call_name(const ::std::string& value) {
  set_has_ext_call_name();
  if (ext_call_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_call_name_ = new ::std::string;
  }
  ext_call_name_->assign(value);
}
inline void Instruction::set_ext_call_name(const char* value) {
  set_has_ext_call_name();
  if (ext_call_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_call_name_ = new ::std::string;
  }
  ext_call_name_->assign(value);
}
inline void Instruction::set_ext_call_name(const char* value, size_t size) {
  set_has_ext_call_name();
  if (ext_call_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_call_name_ = new ::std::string;
  }
  ext_call_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Instruction::mutable_ext_call_name() {
  set_has_ext_call_name();
  if (ext_call_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_call_name_ = new ::std::string;
  }
  return ext_call_name_;
}
inline ::std::string* Instruction::release_ext_call_name() {
  clear_has_ext_call_name();
  if (ext_call_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_call_name_;
    ext_call_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Instruction::set_allocated_ext_call_name(::std::string* ext_call_name) {
  if (ext_call_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_call_name_;
  }
  if (ext_call_name) {
    set_has_ext_call_name();
    ext_call_name_ = ext_call_name;
  } else {
    clear_has_ext_call_name();
    ext_call_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 call_target = 8;
inline bool Instruction::has_call_target() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Instruction::set_has_call_target() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Instruction::clear_has_call_target() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Instruction::clear_call_target() {
  call_target_ = GOOGLE_LONGLONG(0);
  clear_has_call_target();
}
inline ::google::protobuf::int64 Instruction::call_target() const {
  return call_target_;
}
inline void Instruction::set_call_target(::google::protobuf::int64 value) {
  set_has_call_target();
  call_target_ = value;
}

// optional int32 reloc_offset = 9;
inline bool Instruction::has_reloc_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Instruction::set_has_reloc_offset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Instruction::clear_has_reloc_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Instruction::clear_reloc_offset() {
  reloc_offset_ = 0;
  clear_has_reloc_offset();
}
inline ::google::protobuf::int32 Instruction::reloc_offset() const {
  return reloc_offset_;
}
inline void Instruction::set_reloc_offset(::google::protobuf::int32 value) {
  set_has_reloc_offset();
  reloc_offset_ = value;
}

// optional .JumpTbl jump_table = 10;
inline bool Instruction::has_jump_table() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Instruction::set_has_jump_table() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Instruction::clear_has_jump_table() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Instruction::clear_jump_table() {
  if (jump_table_ != NULL) jump_table_->::JumpTbl::Clear();
  clear_has_jump_table();
}
inline const ::JumpTbl& Instruction::jump_table() const {
  return jump_table_ != NULL ? *jump_table_ : *default_instance_->jump_table_;
}
inline ::JumpTbl* Instruction::mutable_jump_table() {
  set_has_jump_table();
  if (jump_table_ == NULL) jump_table_ = new ::JumpTbl;
  return jump_table_;
}
inline ::JumpTbl* Instruction::release_jump_table() {
  clear_has_jump_table();
  ::JumpTbl* temp = jump_table_;
  jump_table_ = NULL;
  return temp;
}
inline void Instruction::set_allocated_jump_table(::JumpTbl* jump_table) {
  delete jump_table_;
  jump_table_ = jump_table;
  if (jump_table) {
    set_has_jump_table();
  } else {
    clear_has_jump_table();
  }
}

// optional .JumpIndexTbl jump_index_table = 11;
inline bool Instruction::has_jump_index_table() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Instruction::set_has_jump_index_table() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Instruction::clear_has_jump_index_table() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Instruction::clear_jump_index_table() {
  if (jump_index_table_ != NULL) jump_index_table_->::JumpIndexTbl::Clear();
  clear_has_jump_index_table();
}
inline const ::JumpIndexTbl& Instruction::jump_index_table() const {
  return jump_index_table_ != NULL ? *jump_index_table_ : *default_instance_->jump_index_table_;
}
inline ::JumpIndexTbl* Instruction::mutable_jump_index_table() {
  set_has_jump_index_table();
  if (jump_index_table_ == NULL) jump_index_table_ = new ::JumpIndexTbl;
  return jump_index_table_;
}
inline ::JumpIndexTbl* Instruction::release_jump_index_table() {
  clear_has_jump_index_table();
  ::JumpIndexTbl* temp = jump_index_table_;
  jump_index_table_ = NULL;
  return temp;
}
inline void Instruction::set_allocated_jump_index_table(::JumpIndexTbl* jump_index_table) {
  delete jump_index_table_;
  jump_index_table_ = jump_index_table;
  if (jump_index_table) {
    set_has_jump_index_table();
  } else {
    clear_has_jump_index_table();
  }
}

// optional string ext_data_name = 12;
inline bool Instruction::has_ext_data_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Instruction::set_has_ext_data_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Instruction::clear_has_ext_data_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Instruction::clear_ext_data_name() {
  if (ext_data_name_ != &::google::protobuf::internal::kEmptyString) {
    ext_data_name_->clear();
  }
  clear_has_ext_data_name();
}
inline const ::std::string& Instruction::ext_data_name() const {
  return *ext_data_name_;
}
inline void Instruction::set_ext_data_name(const ::std::string& value) {
  set_has_ext_data_name();
  if (ext_data_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_data_name_ = new ::std::string;
  }
  ext_data_name_->assign(value);
}
inline void Instruction::set_ext_data_name(const char* value) {
  set_has_ext_data_name();
  if (ext_data_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_data_name_ = new ::std::string;
  }
  ext_data_name_->assign(value);
}
inline void Instruction::set_ext_data_name(const char* value, size_t size) {
  set_has_ext_data_name();
  if (ext_data_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_data_name_ = new ::std::string;
  }
  ext_data_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Instruction::mutable_ext_data_name() {
  set_has_ext_data_name();
  if (ext_data_name_ == &::google::protobuf::internal::kEmptyString) {
    ext_data_name_ = new ::std::string;
  }
  return ext_data_name_;
}
inline ::std::string* Instruction::release_ext_data_name() {
  clear_has_ext_data_name();
  if (ext_data_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ext_data_name_;
    ext_data_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Instruction::set_allocated_ext_data_name(::std::string* ext_data_name) {
  if (ext_data_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_data_name_;
  }
  if (ext_data_name) {
    set_has_ext_data_name();
    ext_data_name_ = ext_data_name;
  } else {
    clear_has_ext_data_name();
    ext_data_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 system_call_number = 13;
inline bool Instruction::has_system_call_number() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Instruction::set_has_system_call_number() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Instruction::clear_has_system_call_number() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Instruction::clear_system_call_number() {
  system_call_number_ = 0;
  clear_has_system_call_number();
}
inline ::google::protobuf::int32 Instruction::system_call_number() const {
  return system_call_number_;
}
inline void Instruction::set_system_call_number(::google::protobuf::int32 value) {
  set_has_system_call_number();
  system_call_number_ = value;
}

// optional bool local_noreturn = 14;
inline bool Instruction::has_local_noreturn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Instruction::set_has_local_noreturn() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Instruction::clear_has_local_noreturn() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Instruction::clear_local_noreturn() {
  local_noreturn_ = false;
  clear_has_local_noreturn();
}
inline bool Instruction::local_noreturn() const {
  return local_noreturn_;
}
inline void Instruction::set_local_noreturn(bool value) {
  set_has_local_noreturn();
  local_noreturn_ = value;
}

// -------------------------------------------------------------------

// Block

// repeated .Instruction insts = 1;
inline int Block::insts_size() const {
  return insts_.size();
}
inline void Block::clear_insts() {
  insts_.Clear();
}
inline const ::Instruction& Block::insts(int index) const {
  return insts_.Get(index);
}
inline ::Instruction* Block::mutable_insts(int index) {
  return insts_.Mutable(index);
}
inline ::Instruction* Block::add_insts() {
  return insts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Instruction >&
Block::insts() const {
  return insts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Instruction >*
Block::mutable_insts() {
  return &insts_;
}

// required int64 base_address = 2;
inline bool Block::has_base_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Block::set_has_base_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Block::clear_has_base_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Block::clear_base_address() {
  base_address_ = GOOGLE_LONGLONG(0);
  clear_has_base_address();
}
inline ::google::protobuf::int64 Block::base_address() const {
  return base_address_;
}
inline void Block::set_base_address(::google::protobuf::int64 value) {
  set_has_base_address();
  base_address_ = value;
}

// repeated int64 block_follows = 3;
inline int Block::block_follows_size() const {
  return block_follows_.size();
}
inline void Block::clear_block_follows() {
  block_follows_.Clear();
}
inline ::google::protobuf::int64 Block::block_follows(int index) const {
  return block_follows_.Get(index);
}
inline void Block::set_block_follows(int index, ::google::protobuf::int64 value) {
  block_follows_.Set(index, value);
}
inline void Block::add_block_follows(::google::protobuf::int64 value) {
  block_follows_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Block::block_follows() const {
  return block_follows_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Block::mutable_block_follows() {
  return &block_follows_;
}

// -------------------------------------------------------------------

// Function

// repeated .Block blocks = 1;
inline int Function::blocks_size() const {
  return blocks_.size();
}
inline void Function::clear_blocks() {
  blocks_.Clear();
}
inline const ::Block& Function::blocks(int index) const {
  return blocks_.Get(index);
}
inline ::Block* Function::mutable_blocks(int index) {
  return blocks_.Mutable(index);
}
inline ::Block* Function::add_blocks() {
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Block >&
Function::blocks() const {
  return blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Block >*
Function::mutable_blocks() {
  return &blocks_;
}

// required int64 entry_address = 2;
inline bool Function::has_entry_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Function::set_has_entry_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Function::clear_has_entry_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Function::clear_entry_address() {
  entry_address_ = GOOGLE_LONGLONG(0);
  clear_has_entry_address();
}
inline ::google::protobuf::int64 Function::entry_address() const {
  return entry_address_;
}
inline void Function::set_entry_address(::google::protobuf::int64 value) {
  set_has_entry_address();
  entry_address_ = value;
}

// -------------------------------------------------------------------

// ExternalFunction

// required string symbol_name = 1;
inline bool ExternalFunction::has_symbol_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalFunction::set_has_symbol_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalFunction::clear_has_symbol_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalFunction::clear_symbol_name() {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    symbol_name_->clear();
  }
  clear_has_symbol_name();
}
inline const ::std::string& ExternalFunction::symbol_name() const {
  return *symbol_name_;
}
inline void ExternalFunction::set_symbol_name(const ::std::string& value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
}
inline void ExternalFunction::set_symbol_name(const char* value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
}
inline void ExternalFunction::set_symbol_name(const char* value, size_t size) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExternalFunction::mutable_symbol_name() {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  return symbol_name_;
}
inline ::std::string* ExternalFunction::release_symbol_name() {
  clear_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_name_;
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExternalFunction::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_name_;
  }
  if (symbol_name) {
    set_has_symbol_name();
    symbol_name_ = symbol_name;
  } else {
    clear_has_symbol_name();
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .ExternalFunction.CallingConvention calling_convention = 2;
inline bool ExternalFunction::has_calling_convention() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalFunction::set_has_calling_convention() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalFunction::clear_has_calling_convention() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalFunction::clear_calling_convention() {
  calling_convention_ = 0;
  clear_has_calling_convention();
}
inline ::ExternalFunction_CallingConvention ExternalFunction::calling_convention() const {
  return static_cast< ::ExternalFunction_CallingConvention >(calling_convention_);
}
inline void ExternalFunction::set_calling_convention(::ExternalFunction_CallingConvention value) {
  assert(::ExternalFunction_CallingConvention_IsValid(value));
  set_has_calling_convention();
  calling_convention_ = value;
}

// required bool has_return = 3;
inline bool ExternalFunction::has_has_return() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExternalFunction::set_has_has_return() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExternalFunction::clear_has_has_return() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExternalFunction::clear_has_return() {
  has_return_ = false;
  clear_has_has_return();
}
inline bool ExternalFunction::has_return() const {
  return has_return_;
}
inline void ExternalFunction::set_has_return(bool value) {
  set_has_has_return();
  has_return_ = value;
}

// required bool no_return = 4;
inline bool ExternalFunction::has_no_return() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExternalFunction::set_has_no_return() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExternalFunction::clear_has_no_return() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExternalFunction::clear_no_return() {
  no_return_ = false;
  clear_has_no_return();
}
inline bool ExternalFunction::no_return() const {
  return no_return_;
}
inline void ExternalFunction::set_no_return(bool value) {
  set_has_no_return();
  no_return_ = value;
}

// required int32 argument_count = 5;
inline bool ExternalFunction::has_argument_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExternalFunction::set_has_argument_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExternalFunction::clear_has_argument_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExternalFunction::clear_argument_count() {
  argument_count_ = 0;
  clear_has_argument_count();
}
inline ::google::protobuf::int32 ExternalFunction::argument_count() const {
  return argument_count_;
}
inline void ExternalFunction::set_argument_count(::google::protobuf::int32 value) {
  set_has_argument_count();
  argument_count_ = value;
}

// optional string signature = 6;
inline bool ExternalFunction::has_signature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExternalFunction::set_has_signature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExternalFunction::clear_has_signature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExternalFunction::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& ExternalFunction::signature() const {
  return *signature_;
}
inline void ExternalFunction::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ExternalFunction::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void ExternalFunction::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExternalFunction::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* ExternalFunction::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExternalFunction::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExternalData

// required string symbol_name = 1;
inline bool ExternalData::has_symbol_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalData::set_has_symbol_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExternalData::clear_has_symbol_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExternalData::clear_symbol_name() {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    symbol_name_->clear();
  }
  clear_has_symbol_name();
}
inline const ::std::string& ExternalData::symbol_name() const {
  return *symbol_name_;
}
inline void ExternalData::set_symbol_name(const ::std::string& value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
}
inline void ExternalData::set_symbol_name(const char* value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
}
inline void ExternalData::set_symbol_name(const char* value, size_t size) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExternalData::mutable_symbol_name() {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  return symbol_name_;
}
inline ::std::string* ExternalData::release_symbol_name() {
  clear_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_name_;
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExternalData::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_name_;
  }
  if (symbol_name) {
    set_has_symbol_name();
    symbol_name_ = symbol_name;
  } else {
    clear_has_symbol_name();
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 data_size = 2;
inline bool ExternalData::has_data_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalData::set_has_data_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExternalData::clear_has_data_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExternalData::clear_data_size() {
  data_size_ = 0;
  clear_has_data_size();
}
inline ::google::protobuf::int32 ExternalData::data_size() const {
  return data_size_;
}
inline void ExternalData::set_data_size(::google::protobuf::int32 value) {
  set_has_data_size();
  data_size_ = value;
}

// -------------------------------------------------------------------

// DataSymbol

// required int64 base_address = 1;
inline bool DataSymbol::has_base_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSymbol::set_has_base_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSymbol::clear_has_base_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSymbol::clear_base_address() {
  base_address_ = GOOGLE_LONGLONG(0);
  clear_has_base_address();
}
inline ::google::protobuf::int64 DataSymbol::base_address() const {
  return base_address_;
}
inline void DataSymbol::set_base_address(::google::protobuf::int64 value) {
  set_has_base_address();
  base_address_ = value;
}

// required string symbol_name = 2;
inline bool DataSymbol::has_symbol_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSymbol::set_has_symbol_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSymbol::clear_has_symbol_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataSymbol::clear_symbol_name() {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    symbol_name_->clear();
  }
  clear_has_symbol_name();
}
inline const ::std::string& DataSymbol::symbol_name() const {
  return *symbol_name_;
}
inline void DataSymbol::set_symbol_name(const ::std::string& value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
}
inline void DataSymbol::set_symbol_name(const char* value) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(value);
}
inline void DataSymbol::set_symbol_name(const char* value, size_t size) {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  symbol_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataSymbol::mutable_symbol_name() {
  set_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    symbol_name_ = new ::std::string;
  }
  return symbol_name_;
}
inline ::std::string* DataSymbol::release_symbol_name() {
  clear_has_symbol_name();
  if (symbol_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_name_;
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataSymbol::set_allocated_symbol_name(::std::string* symbol_name) {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_name_;
  }
  if (symbol_name) {
    set_has_symbol_name();
    symbol_name_ = symbol_name;
  } else {
    clear_has_symbol_name();
    symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 symbol_size = 3;
inline bool DataSymbol::has_symbol_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataSymbol::set_has_symbol_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataSymbol::clear_has_symbol_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataSymbol::clear_symbol_size() {
  symbol_size_ = 0;
  clear_has_symbol_size();
}
inline ::google::protobuf::int32 DataSymbol::symbol_size() const {
  return symbol_size_;
}
inline void DataSymbol::set_symbol_size(::google::protobuf::int32 value) {
  set_has_symbol_size();
  symbol_size_ = value;
}

// -------------------------------------------------------------------

// Data

// required int64 base_address = 1;
inline bool Data::has_base_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_base_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_base_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_base_address() {
  base_address_ = GOOGLE_LONGLONG(0);
  clear_has_base_address();
}
inline ::google::protobuf::int64 Data::base_address() const {
  return base_address_;
}
inline void Data::set_base_address(::google::protobuf::int64 value) {
  set_has_base_address();
  base_address_ = value;
}

// required bytes data = 2;
inline bool Data::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Data::data() const {
  return *data_;
}
inline void Data::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Data::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Data::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Data::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Data::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Data::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .DataSymbol symbols = 3;
inline int Data::symbols_size() const {
  return symbols_.size();
}
inline void Data::clear_symbols() {
  symbols_.Clear();
}
inline const ::DataSymbol& Data::symbols(int index) const {
  return symbols_.Get(index);
}
inline ::DataSymbol* Data::mutable_symbols(int index) {
  return symbols_.Mutable(index);
}
inline ::DataSymbol* Data::add_symbols() {
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataSymbol >&
Data::symbols() const {
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataSymbol >*
Data::mutable_symbols() {
  return &symbols_;
}

// required bool read_only = 4;
inline bool Data::has_read_only() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_read_only() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_read_only() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_read_only() {
  read_only_ = false;
  clear_has_read_only();
}
inline bool Data::read_only() const {
  return read_only_;
}
inline void Data::set_read_only(bool value) {
  set_has_read_only();
  read_only_ = value;
}

// -------------------------------------------------------------------

// EntrySymbolExtra

// required int32 entry_argc = 1;
inline bool EntrySymbolExtra::has_entry_argc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntrySymbolExtra::set_has_entry_argc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntrySymbolExtra::clear_has_entry_argc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntrySymbolExtra::clear_entry_argc() {
  entry_argc_ = 0;
  clear_has_entry_argc();
}
inline ::google::protobuf::int32 EntrySymbolExtra::entry_argc() const {
  return entry_argc_;
}
inline void EntrySymbolExtra::set_entry_argc(::google::protobuf::int32 value) {
  set_has_entry_argc();
  entry_argc_ = value;
}

// required .ExternalFunction.CallingConvention entry_cconv = 2;
inline bool EntrySymbolExtra::has_entry_cconv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntrySymbolExtra::set_has_entry_cconv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntrySymbolExtra::clear_has_entry_cconv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntrySymbolExtra::clear_entry_cconv() {
  entry_cconv_ = 0;
  clear_has_entry_cconv();
}
inline ::ExternalFunction_CallingConvention EntrySymbolExtra::entry_cconv() const {
  return static_cast< ::ExternalFunction_CallingConvention >(entry_cconv_);
}
inline void EntrySymbolExtra::set_entry_cconv(::ExternalFunction_CallingConvention value) {
  assert(::ExternalFunction_CallingConvention_IsValid(value));
  set_has_entry_cconv();
  entry_cconv_ = value;
}

// required bool does_return = 3;
inline bool EntrySymbolExtra::has_does_return() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntrySymbolExtra::set_has_does_return() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntrySymbolExtra::clear_has_does_return() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntrySymbolExtra::clear_does_return() {
  does_return_ = false;
  clear_has_does_return();
}
inline bool EntrySymbolExtra::does_return() const {
  return does_return_;
}
inline void EntrySymbolExtra::set_does_return(bool value) {
  set_has_does_return();
  does_return_ = value;
}

// -------------------------------------------------------------------

// EntrySymbol

// required string entry_name = 1;
inline bool EntrySymbol::has_entry_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntrySymbol::set_has_entry_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntrySymbol::clear_has_entry_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntrySymbol::clear_entry_name() {
  if (entry_name_ != &::google::protobuf::internal::kEmptyString) {
    entry_name_->clear();
  }
  clear_has_entry_name();
}
inline const ::std::string& EntrySymbol::entry_name() const {
  return *entry_name_;
}
inline void EntrySymbol::set_entry_name(const ::std::string& value) {
  set_has_entry_name();
  if (entry_name_ == &::google::protobuf::internal::kEmptyString) {
    entry_name_ = new ::std::string;
  }
  entry_name_->assign(value);
}
inline void EntrySymbol::set_entry_name(const char* value) {
  set_has_entry_name();
  if (entry_name_ == &::google::protobuf::internal::kEmptyString) {
    entry_name_ = new ::std::string;
  }
  entry_name_->assign(value);
}
inline void EntrySymbol::set_entry_name(const char* value, size_t size) {
  set_has_entry_name();
  if (entry_name_ == &::google::protobuf::internal::kEmptyString) {
    entry_name_ = new ::std::string;
  }
  entry_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EntrySymbol::mutable_entry_name() {
  set_has_entry_name();
  if (entry_name_ == &::google::protobuf::internal::kEmptyString) {
    entry_name_ = new ::std::string;
  }
  return entry_name_;
}
inline ::std::string* EntrySymbol::release_entry_name() {
  clear_has_entry_name();
  if (entry_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entry_name_;
    entry_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EntrySymbol::set_allocated_entry_name(::std::string* entry_name) {
  if (entry_name_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_name_;
  }
  if (entry_name) {
    set_has_entry_name();
    entry_name_ = entry_name;
  } else {
    clear_has_entry_name();
    entry_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 entry_address = 2;
inline bool EntrySymbol::has_entry_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntrySymbol::set_has_entry_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntrySymbol::clear_has_entry_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntrySymbol::clear_entry_address() {
  entry_address_ = GOOGLE_LONGLONG(0);
  clear_has_entry_address();
}
inline ::google::protobuf::int64 EntrySymbol::entry_address() const {
  return entry_address_;
}
inline void EntrySymbol::set_entry_address(::google::protobuf::int64 value) {
  set_has_entry_address();
  entry_address_ = value;
}

// optional .EntrySymbolExtra entry_extra = 3;
inline bool EntrySymbol::has_entry_extra() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntrySymbol::set_has_entry_extra() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntrySymbol::clear_has_entry_extra() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntrySymbol::clear_entry_extra() {
  if (entry_extra_ != NULL) entry_extra_->::EntrySymbolExtra::Clear();
  clear_has_entry_extra();
}
inline const ::EntrySymbolExtra& EntrySymbol::entry_extra() const {
  return entry_extra_ != NULL ? *entry_extra_ : *default_instance_->entry_extra_;
}
inline ::EntrySymbolExtra* EntrySymbol::mutable_entry_extra() {
  set_has_entry_extra();
  if (entry_extra_ == NULL) entry_extra_ = new ::EntrySymbolExtra;
  return entry_extra_;
}
inline ::EntrySymbolExtra* EntrySymbol::release_entry_extra() {
  clear_has_entry_extra();
  ::EntrySymbolExtra* temp = entry_extra_;
  entry_extra_ = NULL;
  return temp;
}
inline void EntrySymbol::set_allocated_entry_extra(::EntrySymbolExtra* entry_extra) {
  delete entry_extra_;
  entry_extra_ = entry_extra;
  if (entry_extra) {
    set_has_entry_extra();
  } else {
    clear_has_entry_extra();
  }
}

// -------------------------------------------------------------------

// Module

// repeated .Function internal_funcs = 1;
inline int Module::internal_funcs_size() const {
  return internal_funcs_.size();
}
inline void Module::clear_internal_funcs() {
  internal_funcs_.Clear();
}
inline const ::Function& Module::internal_funcs(int index) const {
  return internal_funcs_.Get(index);
}
inline ::Function* Module::mutable_internal_funcs(int index) {
  return internal_funcs_.Mutable(index);
}
inline ::Function* Module::add_internal_funcs() {
  return internal_funcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Function >&
Module::internal_funcs() const {
  return internal_funcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Function >*
Module::mutable_internal_funcs() {
  return &internal_funcs_;
}

// repeated .ExternalFunction external_funcs = 2;
inline int Module::external_funcs_size() const {
  return external_funcs_.size();
}
inline void Module::clear_external_funcs() {
  external_funcs_.Clear();
}
inline const ::ExternalFunction& Module::external_funcs(int index) const {
  return external_funcs_.Get(index);
}
inline ::ExternalFunction* Module::mutable_external_funcs(int index) {
  return external_funcs_.Mutable(index);
}
inline ::ExternalFunction* Module::add_external_funcs() {
  return external_funcs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExternalFunction >&
Module::external_funcs() const {
  return external_funcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ExternalFunction >*
Module::mutable_external_funcs() {
  return &external_funcs_;
}

// repeated .Data internal_data = 3;
inline int Module::internal_data_size() const {
  return internal_data_.size();
}
inline void Module::clear_internal_data() {
  internal_data_.Clear();
}
inline const ::Data& Module::internal_data(int index) const {
  return internal_data_.Get(index);
}
inline ::Data* Module::mutable_internal_data(int index) {
  return internal_data_.Mutable(index);
}
inline ::Data* Module::add_internal_data() {
  return internal_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Data >&
Module::internal_data() const {
  return internal_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Data >*
Module::mutable_internal_data() {
  return &internal_data_;
}

// required string module_name = 4;
inline bool Module::has_module_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Module::set_has_module_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Module::clear_has_module_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Module::clear_module_name() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    module_name_->clear();
  }
  clear_has_module_name();
}
inline const ::std::string& Module::module_name() const {
  return *module_name_;
}
inline void Module::set_module_name(const ::std::string& value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void Module::set_module_name(const char* value) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(value);
}
inline void Module::set_module_name(const char* value, size_t size) {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  module_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Module::mutable_module_name() {
  set_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    module_name_ = new ::std::string;
  }
  return module_name_;
}
inline ::std::string* Module::release_module_name() {
  clear_has_module_name();
  if (module_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = module_name_;
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Module::set_allocated_module_name(::std::string* module_name) {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (module_name) {
    set_has_module_name();
    module_name_ = module_name;
  } else {
    clear_has_module_name();
    module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .EntrySymbol entries = 5;
inline int Module::entries_size() const {
  return entries_.size();
}
inline void Module::clear_entries() {
  entries_.Clear();
}
inline const ::EntrySymbol& Module::entries(int index) const {
  return entries_.Get(index);
}
inline ::EntrySymbol* Module::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::EntrySymbol* Module::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EntrySymbol >&
Module::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::EntrySymbol >*
Module::mutable_entries() {
  return &entries_;
}

// repeated .ExternalData external_data = 6;
inline int Module::external_data_size() const {
  return external_data_.size();
}
inline void Module::clear_external_data() {
  external_data_.Clear();
}
inline const ::ExternalData& Module::external_data(int index) const {
  return external_data_.Get(index);
}
inline ::ExternalData* Module::mutable_external_data(int index) {
  return external_data_.Mutable(index);
}
inline ::ExternalData* Module::add_external_data() {
  return external_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExternalData >&
Module::external_data() const {
  return external_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ExternalData >*
Module::mutable_external_data() {
  return &external_data_;
}

// -------------------------------------------------------------------

// Edge_64

// required int64 value = 1;
inline bool Edge_64::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge_64::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge_64::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge_64::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 Edge_64::value() const {
  return value_;
}
inline void Edge_64::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// required .Edge_64.Kind kind = 2;
inline bool Edge_64::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge_64::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge_64::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge_64::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::Edge_64_Kind Edge_64::kind() const {
  return static_cast< ::Edge_64_Kind >(kind_);
}
inline void Edge_64::set_kind(::Edge_64_Kind value) {
  assert(::Edge_64_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
}

// optional bool label = 3;
inline bool Edge_64::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Edge_64::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Edge_64::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Edge_64::clear_label() {
  label_ = false;
  clear_has_label();
}
inline bool Edge_64::label() const {
  return label_;
}
inline void Edge_64::set_label(bool value) {
  set_has_label();
  label_ = value;
}

// -------------------------------------------------------------------

// Edge_32

// required int32 value = 1;
inline bool Edge_32::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge_32::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge_32::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge_32::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 Edge_32::value() const {
  return value_;
}
inline void Edge_32::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required .Edge_32.Kind kind = 2;
inline bool Edge_32::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge_32::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge_32::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge_32::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::Edge_32_Kind Edge_32::kind() const {
  return static_cast< ::Edge_32_Kind >(kind_);
}
inline void Edge_32::set_kind(::Edge_32_Kind value) {
  assert(::Edge_32_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
}

// optional bool label = 3;
inline bool Edge_32::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Edge_32::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Edge_32::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Edge_32::clear_label() {
  label_ = false;
  clear_has_label();
}
inline bool Edge_32::label() const {
  return label_;
}
inline void Edge_32::set_label(bool value) {
  set_has_label();
  label_ = value;
}

// -------------------------------------------------------------------

// Annotated_Branch_Instruction

// required .Annotated_Branch_Instruction.Branch branch_instr_name = 1;
inline bool Annotated_Branch_Instruction::has_branch_instr_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_branch_instr_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Branch_Instruction::clear_has_branch_instr_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Branch_Instruction::clear_branch_instr_name() {
  branch_instr_name_ = 0;
  clear_has_branch_instr_name();
}
inline ::Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::branch_instr_name() const {
  return static_cast< ::Annotated_Branch_Instruction_Branch >(branch_instr_name_);
}
inline void Annotated_Branch_Instruction::set_branch_instr_name(::Annotated_Branch_Instruction_Branch value) {
  assert(::Annotated_Branch_Instruction_Branch_IsValid(value));
  set_has_branch_instr_name();
  branch_instr_name_ = value;
}

// required bool is_resolved = 2;
inline bool Annotated_Branch_Instruction::has_is_resolved() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_is_resolved() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Branch_Instruction::clear_has_is_resolved() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Branch_Instruction::clear_is_resolved() {
  is_resolved_ = false;
  clear_has_is_resolved();
}
inline bool Annotated_Branch_Instruction::is_resolved() const {
  return is_resolved_;
}
inline void Annotated_Branch_Instruction::set_is_resolved(bool value) {
  set_has_is_resolved();
  is_resolved_ = value;
}

// required bool is_indirect = 3;
inline bool Annotated_Branch_Instruction::has_is_indirect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_is_indirect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotated_Branch_Instruction::clear_has_is_indirect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotated_Branch_Instruction::clear_is_indirect() {
  is_indirect_ = false;
  clear_has_is_indirect();
}
inline bool Annotated_Branch_Instruction::is_indirect() const {
  return is_indirect_;
}
inline void Annotated_Branch_Instruction::set_is_indirect(bool value) {
  set_has_is_indirect();
  is_indirect_ = value;
}

// required bool is_conditional = 4;
inline bool Annotated_Branch_Instruction::has_is_conditional() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_is_conditional() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Annotated_Branch_Instruction::clear_has_is_conditional() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Annotated_Branch_Instruction::clear_is_conditional() {
  is_conditional_ = false;
  clear_has_is_conditional();
}
inline bool Annotated_Branch_Instruction::is_conditional() const {
  return is_conditional_;
}
inline void Annotated_Branch_Instruction::set_is_conditional(bool value) {
  set_has_is_conditional();
  is_conditional_ = value;
}

// required bool is_leaf = 5;
inline bool Annotated_Branch_Instruction::has_is_leaf() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_is_leaf() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Annotated_Branch_Instruction::clear_has_is_leaf() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Annotated_Branch_Instruction::clear_is_leaf() {
  is_leaf_ = false;
  clear_has_is_leaf();
}
inline bool Annotated_Branch_Instruction::is_leaf() const {
  return is_leaf_;
}
inline void Annotated_Branch_Instruction::set_is_leaf(bool value) {
  set_has_is_leaf();
  is_leaf_ = value;
}

// repeated .Edge_64 target_to = 6;
inline int Annotated_Branch_Instruction::target_to_size() const {
  return target_to_.size();
}
inline void Annotated_Branch_Instruction::clear_target_to() {
  target_to_.Clear();
}
inline const ::Edge_64& Annotated_Branch_Instruction::target_to(int index) const {
  return target_to_.Get(index);
}
inline ::Edge_64* Annotated_Branch_Instruction::mutable_target_to(int index) {
  return target_to_.Mutable(index);
}
inline ::Edge_64* Annotated_Branch_Instruction::add_target_to() {
  return target_to_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
Annotated_Branch_Instruction::target_to() const {
  return target_to_;
}
inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
Annotated_Branch_Instruction::mutable_target_to() {
  return &target_to_;
}

// required .Annotated_Instruction instr = 7;
inline bool Annotated_Branch_Instruction::has_instr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_instr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Annotated_Branch_Instruction::clear_has_instr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Annotated_Branch_Instruction::clear_instr() {
  if (instr_ != NULL) instr_->::Annotated_Instruction::Clear();
  clear_has_instr();
}
inline const ::Annotated_Instruction& Annotated_Branch_Instruction::instr() const {
  return instr_ != NULL ? *instr_ : *default_instance_->instr_;
}
inline ::Annotated_Instruction* Annotated_Branch_Instruction::mutable_instr() {
  set_has_instr();
  if (instr_ == NULL) instr_ = new ::Annotated_Instruction;
  return instr_;
}
inline ::Annotated_Instruction* Annotated_Branch_Instruction::release_instr() {
  clear_has_instr();
  ::Annotated_Instruction* temp = instr_;
  instr_ = NULL;
  return temp;
}
inline void Annotated_Branch_Instruction::set_allocated_instr(::Annotated_Instruction* instr) {
  delete instr_;
  instr_ = instr;
  if (instr) {
    set_has_instr();
  } else {
    clear_has_instr();
  }
}

// optional string abstract_expression = 8;
inline bool Annotated_Branch_Instruction::has_abstract_expression() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Annotated_Branch_Instruction::set_has_abstract_expression() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Annotated_Branch_Instruction::clear_has_abstract_expression() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Annotated_Branch_Instruction::clear_abstract_expression() {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    abstract_expression_->clear();
  }
  clear_has_abstract_expression();
}
inline const ::std::string& Annotated_Branch_Instruction::abstract_expression() const {
  return *abstract_expression_;
}
inline void Annotated_Branch_Instruction::set_abstract_expression(const ::std::string& value) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(value);
}
inline void Annotated_Branch_Instruction::set_abstract_expression(const char* value) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(value);
}
inline void Annotated_Branch_Instruction::set_abstract_expression(const char* value, size_t size) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Branch_Instruction::mutable_abstract_expression() {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  return abstract_expression_;
}
inline ::std::string* Annotated_Branch_Instruction::release_abstract_expression() {
  clear_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = abstract_expression_;
    abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Branch_Instruction::set_allocated_abstract_expression(::std::string* abstract_expression) {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    delete abstract_expression_;
  }
  if (abstract_expression) {
    set_has_abstract_expression();
    abstract_expression_ = abstract_expression;
  } else {
    clear_has_abstract_expression();
    abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Annotated_Instruction_Operand

// required int32 pos = 1;
inline bool Annotated_Instruction_Operand::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Instruction_Operand::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Instruction_Operand::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Instruction_Operand::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Annotated_Instruction_Operand::pos() const {
  return pos_;
}
inline void Annotated_Instruction_Operand::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
}

// required .Annotated_Instruction.Operand.Operand_Type type = 2;
inline bool Annotated_Instruction_Operand::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Instruction_Operand::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Instruction_Operand::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Instruction_Operand::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::type() const {
  return static_cast< ::Annotated_Instruction_Operand_Operand_Type >(type_);
}
inline void Annotated_Instruction_Operand::set_type(::Annotated_Instruction_Operand_Operand_Type value) {
  assert(::Annotated_Instruction_Operand_Operand_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string value = 3;
inline bool Annotated_Instruction_Operand::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotated_Instruction_Operand::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotated_Instruction_Operand::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotated_Instruction_Operand::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Annotated_Instruction_Operand::value() const {
  return *value_;
}
inline void Annotated_Instruction_Operand::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Annotated_Instruction_Operand::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Annotated_Instruction_Operand::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Instruction_Operand::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Annotated_Instruction_Operand::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Instruction_Operand::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Annotated_Instruction

// required string instr_name = 1;
inline bool Annotated_Instruction::has_instr_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Instruction::set_has_instr_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Instruction::clear_has_instr_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Instruction::clear_instr_name() {
  if (instr_name_ != &::google::protobuf::internal::kEmptyString) {
    instr_name_->clear();
  }
  clear_has_instr_name();
}
inline const ::std::string& Annotated_Instruction::instr_name() const {
  return *instr_name_;
}
inline void Annotated_Instruction::set_instr_name(const ::std::string& value) {
  set_has_instr_name();
  if (instr_name_ == &::google::protobuf::internal::kEmptyString) {
    instr_name_ = new ::std::string;
  }
  instr_name_->assign(value);
}
inline void Annotated_Instruction::set_instr_name(const char* value) {
  set_has_instr_name();
  if (instr_name_ == &::google::protobuf::internal::kEmptyString) {
    instr_name_ = new ::std::string;
  }
  instr_name_->assign(value);
}
inline void Annotated_Instruction::set_instr_name(const char* value, size_t size) {
  set_has_instr_name();
  if (instr_name_ == &::google::protobuf::internal::kEmptyString) {
    instr_name_ = new ::std::string;
  }
  instr_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Instruction::mutable_instr_name() {
  set_has_instr_name();
  if (instr_name_ == &::google::protobuf::internal::kEmptyString) {
    instr_name_ = new ::std::string;
  }
  return instr_name_;
}
inline ::std::string* Annotated_Instruction::release_instr_name() {
  clear_has_instr_name();
  if (instr_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instr_name_;
    instr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Instruction::set_allocated_instr_name(::std::string* instr_name) {
  if (instr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete instr_name_;
  }
  if (instr_name) {
    set_has_instr_name();
    instr_name_ = instr_name;
  } else {
    clear_has_instr_name();
    instr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string instr_string = 2;
inline bool Annotated_Instruction::has_instr_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Instruction::set_has_instr_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Instruction::clear_has_instr_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Instruction::clear_instr_string() {
  if (instr_string_ != &::google::protobuf::internal::kEmptyString) {
    instr_string_->clear();
  }
  clear_has_instr_string();
}
inline const ::std::string& Annotated_Instruction::instr_string() const {
  return *instr_string_;
}
inline void Annotated_Instruction::set_instr_string(const ::std::string& value) {
  set_has_instr_string();
  if (instr_string_ == &::google::protobuf::internal::kEmptyString) {
    instr_string_ = new ::std::string;
  }
  instr_string_->assign(value);
}
inline void Annotated_Instruction::set_instr_string(const char* value) {
  set_has_instr_string();
  if (instr_string_ == &::google::protobuf::internal::kEmptyString) {
    instr_string_ = new ::std::string;
  }
  instr_string_->assign(value);
}
inline void Annotated_Instruction::set_instr_string(const char* value, size_t size) {
  set_has_instr_string();
  if (instr_string_ == &::google::protobuf::internal::kEmptyString) {
    instr_string_ = new ::std::string;
  }
  instr_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Instruction::mutable_instr_string() {
  set_has_instr_string();
  if (instr_string_ == &::google::protobuf::internal::kEmptyString) {
    instr_string_ = new ::std::string;
  }
  return instr_string_;
}
inline ::std::string* Annotated_Instruction::release_instr_string() {
  clear_has_instr_string();
  if (instr_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instr_string_;
    instr_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Instruction::set_allocated_instr_string(::std::string* instr_string) {
  if (instr_string_ != &::google::protobuf::internal::kEmptyString) {
    delete instr_string_;
  }
  if (instr_string) {
    set_has_instr_string();
    instr_string_ = instr_string;
  } else {
    clear_has_instr_string();
    instr_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 inst_addr = 3;
inline bool Annotated_Instruction::has_inst_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotated_Instruction::set_has_inst_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotated_Instruction::clear_has_inst_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotated_Instruction::clear_inst_addr() {
  inst_addr_ = GOOGLE_LONGLONG(0);
  clear_has_inst_addr();
}
inline ::google::protobuf::int64 Annotated_Instruction::inst_addr() const {
  return inst_addr_;
}
inline void Annotated_Instruction::set_inst_addr(::google::protobuf::int64 value) {
  set_has_inst_addr();
  inst_addr_ = value;
}

// required int32 inst_len = 4;
inline bool Annotated_Instruction::has_inst_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Annotated_Instruction::set_has_inst_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Annotated_Instruction::clear_has_inst_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Annotated_Instruction::clear_inst_len() {
  inst_len_ = 0;
  clear_has_inst_len();
}
inline ::google::protobuf::int32 Annotated_Instruction::inst_len() const {
  return inst_len_;
}
inline void Annotated_Instruction::set_inst_len(::google::protobuf::int32 value) {
  set_has_inst_len();
  inst_len_ = value;
}

// required int32 op_count = 5;
inline bool Annotated_Instruction::has_op_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Annotated_Instruction::set_has_op_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Annotated_Instruction::clear_has_op_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Annotated_Instruction::clear_op_count() {
  op_count_ = 0;
  clear_has_op_count();
}
inline ::google::protobuf::int32 Annotated_Instruction::op_count() const {
  return op_count_;
}
inline void Annotated_Instruction::set_op_count(::google::protobuf::int32 value) {
  set_has_op_count();
  op_count_ = value;
}

// optional string inst_addr_hex = 6;
inline bool Annotated_Instruction::has_inst_addr_hex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Annotated_Instruction::set_has_inst_addr_hex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Annotated_Instruction::clear_has_inst_addr_hex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Annotated_Instruction::clear_inst_addr_hex() {
  if (inst_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    inst_addr_hex_->clear();
  }
  clear_has_inst_addr_hex();
}
inline const ::std::string& Annotated_Instruction::inst_addr_hex() const {
  return *inst_addr_hex_;
}
inline void Annotated_Instruction::set_inst_addr_hex(const ::std::string& value) {
  set_has_inst_addr_hex();
  if (inst_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    inst_addr_hex_ = new ::std::string;
  }
  inst_addr_hex_->assign(value);
}
inline void Annotated_Instruction::set_inst_addr_hex(const char* value) {
  set_has_inst_addr_hex();
  if (inst_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    inst_addr_hex_ = new ::std::string;
  }
  inst_addr_hex_->assign(value);
}
inline void Annotated_Instruction::set_inst_addr_hex(const char* value, size_t size) {
  set_has_inst_addr_hex();
  if (inst_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    inst_addr_hex_ = new ::std::string;
  }
  inst_addr_hex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Instruction::mutable_inst_addr_hex() {
  set_has_inst_addr_hex();
  if (inst_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    inst_addr_hex_ = new ::std::string;
  }
  return inst_addr_hex_;
}
inline ::std::string* Annotated_Instruction::release_inst_addr_hex() {
  clear_has_inst_addr_hex();
  if (inst_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = inst_addr_hex_;
    inst_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Instruction::set_allocated_inst_addr_hex(::std::string* inst_addr_hex) {
  if (inst_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_addr_hex_;
  }
  if (inst_addr_hex) {
    set_has_inst_addr_hex();
    inst_addr_hex_ = inst_addr_hex;
  } else {
    clear_has_inst_addr_hex();
    inst_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool is_branch_instruction = 7;
inline bool Annotated_Instruction::has_is_branch_instruction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Annotated_Instruction::set_has_is_branch_instruction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Annotated_Instruction::clear_has_is_branch_instruction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Annotated_Instruction::clear_is_branch_instruction() {
  is_branch_instruction_ = false;
  clear_has_is_branch_instruction();
}
inline bool Annotated_Instruction::is_branch_instruction() const {
  return is_branch_instruction_;
}
inline void Annotated_Instruction::set_is_branch_instruction(bool value) {
  set_has_is_branch_instruction();
  is_branch_instruction_ = value;
}

// repeated .Annotated_Instruction.Operand argument = 8;
inline int Annotated_Instruction::argument_size() const {
  return argument_.size();
}
inline void Annotated_Instruction::clear_argument() {
  argument_.Clear();
}
inline const ::Annotated_Instruction_Operand& Annotated_Instruction::argument(int index) const {
  return argument_.Get(index);
}
inline ::Annotated_Instruction_Operand* Annotated_Instruction::mutable_argument(int index) {
  return argument_.Mutable(index);
}
inline ::Annotated_Instruction_Operand* Annotated_Instruction::add_argument() {
  return argument_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction_Operand >&
Annotated_Instruction::argument() const {
  return argument_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction_Operand >*
Annotated_Instruction::mutable_argument() {
  return &argument_;
}

// repeated .Edge_64 referered_from = 9;
inline int Annotated_Instruction::referered_from_size() const {
  return referered_from_.size();
}
inline void Annotated_Instruction::clear_referered_from() {
  referered_from_.Clear();
}
inline const ::Edge_64& Annotated_Instruction::referered_from(int index) const {
  return referered_from_.Get(index);
}
inline ::Edge_64* Annotated_Instruction::mutable_referered_from(int index) {
  return referered_from_.Mutable(index);
}
inline ::Edge_64* Annotated_Instruction::add_referered_from() {
  return referered_from_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
Annotated_Instruction::referered_from() const {
  return referered_from_;
}
inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
Annotated_Instruction::mutable_referered_from() {
  return &referered_from_;
}

// -------------------------------------------------------------------

// Annotated_Register_32_Property

// required bool Unknown = 1;
inline bool Annotated_Register_32_Property::has_unknown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Register_32_Property::set_has_unknown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Register_32_Property::clear_has_unknown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Register_32_Property::clear_unknown() {
  unknown_ = false;
  clear_has_unknown();
}
inline bool Annotated_Register_32_Property::unknown() const {
  return unknown_;
}
inline void Annotated_Register_32_Property::set_unknown(bool value) {
  set_has_unknown();
  unknown_ = value;
}

// optional bool Alive = 2;
inline bool Annotated_Register_32_Property::has_alive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Register_32_Property::set_has_alive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Register_32_Property::clear_has_alive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Register_32_Property::clear_alive() {
  alive_ = false;
  clear_has_alive();
}
inline bool Annotated_Register_32_Property::alive() const {
  return alive_;
}
inline void Annotated_Register_32_Property::set_alive(bool value) {
  set_has_alive();
  alive_ = value;
}

// -------------------------------------------------------------------

// Annotated_Register_32

// required .Annotated_Register_32.Register name = 1;
inline bool Annotated_Register_32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Register_32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Register_32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Register_32::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::Annotated_Register_32_Register Annotated_Register_32::name() const {
  return static_cast< ::Annotated_Register_32_Register >(name_);
}
inline void Annotated_Register_32::set_name(::Annotated_Register_32_Register value) {
  assert(::Annotated_Register_32_Register_IsValid(value));
  set_has_name();
  name_ = value;
}

// required int64 used_at_addr = 2;
inline bool Annotated_Register_32::has_used_at_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Register_32::set_has_used_at_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Register_32::clear_has_used_at_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Register_32::clear_used_at_addr() {
  used_at_addr_ = GOOGLE_LONGLONG(0);
  clear_has_used_at_addr();
}
inline ::google::protobuf::int64 Annotated_Register_32::used_at_addr() const {
  return used_at_addr_;
}
inline void Annotated_Register_32::set_used_at_addr(::google::protobuf::int64 value) {
  set_has_used_at_addr();
  used_at_addr_ = value;
}

// optional string used_at_addr_hex = 3;
inline bool Annotated_Register_32::has_used_at_addr_hex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotated_Register_32::set_has_used_at_addr_hex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotated_Register_32::clear_has_used_at_addr_hex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotated_Register_32::clear_used_at_addr_hex() {
  if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_->clear();
  }
  clear_has_used_at_addr_hex();
}
inline const ::std::string& Annotated_Register_32::used_at_addr_hex() const {
  return *used_at_addr_hex_;
}
inline void Annotated_Register_32::set_used_at_addr_hex(const ::std::string& value) {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  used_at_addr_hex_->assign(value);
}
inline void Annotated_Register_32::set_used_at_addr_hex(const char* value) {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  used_at_addr_hex_->assign(value);
}
inline void Annotated_Register_32::set_used_at_addr_hex(const char* value, size_t size) {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  used_at_addr_hex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Register_32::mutable_used_at_addr_hex() {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  return used_at_addr_hex_;
}
inline ::std::string* Annotated_Register_32::release_used_at_addr_hex() {
  clear_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = used_at_addr_hex_;
    used_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Register_32::set_allocated_used_at_addr_hex(::std::string* used_at_addr_hex) {
  if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete used_at_addr_hex_;
  }
  if (used_at_addr_hex) {
    set_has_used_at_addr_hex();
    used_at_addr_hex_ = used_at_addr_hex;
  } else {
    clear_has_used_at_addr_hex();
    used_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Edge_32 value = 7;
inline int Annotated_Register_32::value_size() const {
  return value_.size();
}
inline void Annotated_Register_32::clear_value() {
  value_.Clear();
}
inline const ::Edge_32& Annotated_Register_32::value(int index) const {
  return value_.Get(index);
}
inline ::Edge_32* Annotated_Register_32::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::Edge_32* Annotated_Register_32::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Edge_32 >&
Annotated_Register_32::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::Edge_32 >*
Annotated_Register_32::mutable_value() {
  return &value_;
}

// required .Annotated_Register_32.Property fact = 8;
inline bool Annotated_Register_32::has_fact() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Annotated_Register_32::set_has_fact() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Annotated_Register_32::clear_has_fact() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Annotated_Register_32::clear_fact() {
  if (fact_ != NULL) fact_->::Annotated_Register_32_Property::Clear();
  clear_has_fact();
}
inline const ::Annotated_Register_32_Property& Annotated_Register_32::fact() const {
  return fact_ != NULL ? *fact_ : *default_instance_->fact_;
}
inline ::Annotated_Register_32_Property* Annotated_Register_32::mutable_fact() {
  set_has_fact();
  if (fact_ == NULL) fact_ = new ::Annotated_Register_32_Property;
  return fact_;
}
inline ::Annotated_Register_32_Property* Annotated_Register_32::release_fact() {
  clear_has_fact();
  ::Annotated_Register_32_Property* temp = fact_;
  fact_ = NULL;
  return temp;
}
inline void Annotated_Register_32::set_allocated_fact(::Annotated_Register_32_Property* fact) {
  delete fact_;
  fact_ = fact;
  if (fact) {
    set_has_fact();
  } else {
    clear_has_fact();
  }
}

// optional string abstract_expression = 9;
inline bool Annotated_Register_32::has_abstract_expression() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Annotated_Register_32::set_has_abstract_expression() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Annotated_Register_32::clear_has_abstract_expression() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Annotated_Register_32::clear_abstract_expression() {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    abstract_expression_->clear();
  }
  clear_has_abstract_expression();
}
inline const ::std::string& Annotated_Register_32::abstract_expression() const {
  return *abstract_expression_;
}
inline void Annotated_Register_32::set_abstract_expression(const ::std::string& value) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(value);
}
inline void Annotated_Register_32::set_abstract_expression(const char* value) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(value);
}
inline void Annotated_Register_32::set_abstract_expression(const char* value, size_t size) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Register_32::mutable_abstract_expression() {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  return abstract_expression_;
}
inline ::std::string* Annotated_Register_32::release_abstract_expression() {
  clear_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = abstract_expression_;
    abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Register_32::set_allocated_abstract_expression(::std::string* abstract_expression) {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    delete abstract_expression_;
  }
  if (abstract_expression) {
    set_has_abstract_expression();
    abstract_expression_ = abstract_expression;
  } else {
    clear_has_abstract_expression();
    abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Annotated_Register_64_Property

// required bool Unknown = 1;
inline bool Annotated_Register_64_Property::has_unknown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Register_64_Property::set_has_unknown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Register_64_Property::clear_has_unknown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Register_64_Property::clear_unknown() {
  unknown_ = false;
  clear_has_unknown();
}
inline bool Annotated_Register_64_Property::unknown() const {
  return unknown_;
}
inline void Annotated_Register_64_Property::set_unknown(bool value) {
  set_has_unknown();
  unknown_ = value;
}

// optional bool Alive = 2;
inline bool Annotated_Register_64_Property::has_alive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Register_64_Property::set_has_alive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Register_64_Property::clear_has_alive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Register_64_Property::clear_alive() {
  alive_ = false;
  clear_has_alive();
}
inline bool Annotated_Register_64_Property::alive() const {
  return alive_;
}
inline void Annotated_Register_64_Property::set_alive(bool value) {
  set_has_alive();
  alive_ = value;
}

// -------------------------------------------------------------------

// Annotated_Register_64

// required .Annotated_Register_64.Register name = 1;
inline bool Annotated_Register_64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Register_64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Register_64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Register_64::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::Annotated_Register_64_Register Annotated_Register_64::name() const {
  return static_cast< ::Annotated_Register_64_Register >(name_);
}
inline void Annotated_Register_64::set_name(::Annotated_Register_64_Register value) {
  assert(::Annotated_Register_64_Register_IsValid(value));
  set_has_name();
  name_ = value;
}

// required int64 used_at_addr = 2;
inline bool Annotated_Register_64::has_used_at_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Register_64::set_has_used_at_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Register_64::clear_has_used_at_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Register_64::clear_used_at_addr() {
  used_at_addr_ = GOOGLE_LONGLONG(0);
  clear_has_used_at_addr();
}
inline ::google::protobuf::int64 Annotated_Register_64::used_at_addr() const {
  return used_at_addr_;
}
inline void Annotated_Register_64::set_used_at_addr(::google::protobuf::int64 value) {
  set_has_used_at_addr();
  used_at_addr_ = value;
}

// optional string used_at_addr_hex = 3;
inline bool Annotated_Register_64::has_used_at_addr_hex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotated_Register_64::set_has_used_at_addr_hex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotated_Register_64::clear_has_used_at_addr_hex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotated_Register_64::clear_used_at_addr_hex() {
  if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_->clear();
  }
  clear_has_used_at_addr_hex();
}
inline const ::std::string& Annotated_Register_64::used_at_addr_hex() const {
  return *used_at_addr_hex_;
}
inline void Annotated_Register_64::set_used_at_addr_hex(const ::std::string& value) {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  used_at_addr_hex_->assign(value);
}
inline void Annotated_Register_64::set_used_at_addr_hex(const char* value) {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  used_at_addr_hex_->assign(value);
}
inline void Annotated_Register_64::set_used_at_addr_hex(const char* value, size_t size) {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  used_at_addr_hex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Register_64::mutable_used_at_addr_hex() {
  set_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    used_at_addr_hex_ = new ::std::string;
  }
  return used_at_addr_hex_;
}
inline ::std::string* Annotated_Register_64::release_used_at_addr_hex() {
  clear_has_used_at_addr_hex();
  if (used_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = used_at_addr_hex_;
    used_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Register_64::set_allocated_used_at_addr_hex(::std::string* used_at_addr_hex) {
  if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete used_at_addr_hex_;
  }
  if (used_at_addr_hex) {
    set_has_used_at_addr_hex();
    used_at_addr_hex_ = used_at_addr_hex;
  } else {
    clear_has_used_at_addr_hex();
    used_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Edge_64 value = 4;
inline int Annotated_Register_64::value_size() const {
  return value_.size();
}
inline void Annotated_Register_64::clear_value() {
  value_.Clear();
}
inline const ::Edge_64& Annotated_Register_64::value(int index) const {
  return value_.Get(index);
}
inline ::Edge_64* Annotated_Register_64::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::Edge_64* Annotated_Register_64::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
Annotated_Register_64::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
Annotated_Register_64::mutable_value() {
  return &value_;
}

// required .Annotated_Register_64.Property fact = 5;
inline bool Annotated_Register_64::has_fact() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Annotated_Register_64::set_has_fact() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Annotated_Register_64::clear_has_fact() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Annotated_Register_64::clear_fact() {
  if (fact_ != NULL) fact_->::Annotated_Register_64_Property::Clear();
  clear_has_fact();
}
inline const ::Annotated_Register_64_Property& Annotated_Register_64::fact() const {
  return fact_ != NULL ? *fact_ : *default_instance_->fact_;
}
inline ::Annotated_Register_64_Property* Annotated_Register_64::mutable_fact() {
  set_has_fact();
  if (fact_ == NULL) fact_ = new ::Annotated_Register_64_Property;
  return fact_;
}
inline ::Annotated_Register_64_Property* Annotated_Register_64::release_fact() {
  clear_has_fact();
  ::Annotated_Register_64_Property* temp = fact_;
  fact_ = NULL;
  return temp;
}
inline void Annotated_Register_64::set_allocated_fact(::Annotated_Register_64_Property* fact) {
  delete fact_;
  fact_ = fact;
  if (fact) {
    set_has_fact();
  } else {
    clear_has_fact();
  }
}

// optional string abstract_expression = 6;
inline bool Annotated_Register_64::has_abstract_expression() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Annotated_Register_64::set_has_abstract_expression() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Annotated_Register_64::clear_has_abstract_expression() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Annotated_Register_64::clear_abstract_expression() {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    abstract_expression_->clear();
  }
  clear_has_abstract_expression();
}
inline const ::std::string& Annotated_Register_64::abstract_expression() const {
  return *abstract_expression_;
}
inline void Annotated_Register_64::set_abstract_expression(const ::std::string& value) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(value);
}
inline void Annotated_Register_64::set_abstract_expression(const char* value) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(value);
}
inline void Annotated_Register_64::set_abstract_expression(const char* value, size_t size) {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  abstract_expression_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Register_64::mutable_abstract_expression() {
  set_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    abstract_expression_ = new ::std::string;
  }
  return abstract_expression_;
}
inline ::std::string* Annotated_Register_64::release_abstract_expression() {
  clear_has_abstract_expression();
  if (abstract_expression_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = abstract_expression_;
    abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Register_64::set_allocated_abstract_expression(::std::string* abstract_expression) {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    delete abstract_expression_;
  }
  if (abstract_expression) {
    set_has_abstract_expression();
    abstract_expression_ = abstract_expression;
  } else {
    clear_has_abstract_expression();
    abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Annotated_Function

// required string name = 1;
inline bool Annotated_Function::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotated_Function::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Annotated_Function::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Annotated_Function::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Annotated_Function::name() const {
  return *name_;
}
inline void Annotated_Function::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Annotated_Function::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Annotated_Function::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Function::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Annotated_Function::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Function::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 start_at_addr = 2;
inline bool Annotated_Function::has_start_at_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Annotated_Function::set_has_start_at_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Annotated_Function::clear_has_start_at_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Annotated_Function::clear_start_at_addr() {
  start_at_addr_ = GOOGLE_LONGLONG(0);
  clear_has_start_at_addr();
}
inline ::google::protobuf::int64 Annotated_Function::start_at_addr() const {
  return start_at_addr_;
}
inline void Annotated_Function::set_start_at_addr(::google::protobuf::int64 value) {
  set_has_start_at_addr();
  start_at_addr_ = value;
}

// optional string start_at_addr_hex = 3;
inline bool Annotated_Function::has_start_at_addr_hex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Annotated_Function::set_has_start_at_addr_hex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Annotated_Function::clear_has_start_at_addr_hex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Annotated_Function::clear_start_at_addr_hex() {
  if (start_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    start_at_addr_hex_->clear();
  }
  clear_has_start_at_addr_hex();
}
inline const ::std::string& Annotated_Function::start_at_addr_hex() const {
  return *start_at_addr_hex_;
}
inline void Annotated_Function::set_start_at_addr_hex(const ::std::string& value) {
  set_has_start_at_addr_hex();
  if (start_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    start_at_addr_hex_ = new ::std::string;
  }
  start_at_addr_hex_->assign(value);
}
inline void Annotated_Function::set_start_at_addr_hex(const char* value) {
  set_has_start_at_addr_hex();
  if (start_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    start_at_addr_hex_ = new ::std::string;
  }
  start_at_addr_hex_->assign(value);
}
inline void Annotated_Function::set_start_at_addr_hex(const char* value, size_t size) {
  set_has_start_at_addr_hex();
  if (start_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    start_at_addr_hex_ = new ::std::string;
  }
  start_at_addr_hex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Function::mutable_start_at_addr_hex() {
  set_has_start_at_addr_hex();
  if (start_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    start_at_addr_hex_ = new ::std::string;
  }
  return start_at_addr_hex_;
}
inline ::std::string* Annotated_Function::release_start_at_addr_hex() {
  clear_has_start_at_addr_hex();
  if (start_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_at_addr_hex_;
    start_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Function::set_allocated_start_at_addr_hex(::std::string* start_at_addr_hex) {
  if (start_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete start_at_addr_hex_;
  }
  if (start_at_addr_hex) {
    set_has_start_at_addr_hex();
    start_at_addr_hex_ = start_at_addr_hex;
  } else {
    clear_has_start_at_addr_hex();
    start_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 end_at_addr = 4;
inline bool Annotated_Function::has_end_at_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Annotated_Function::set_has_end_at_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Annotated_Function::clear_has_end_at_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Annotated_Function::clear_end_at_addr() {
  end_at_addr_ = GOOGLE_LONGLONG(0);
  clear_has_end_at_addr();
}
inline ::google::protobuf::int64 Annotated_Function::end_at_addr() const {
  return end_at_addr_;
}
inline void Annotated_Function::set_end_at_addr(::google::protobuf::int64 value) {
  set_has_end_at_addr();
  end_at_addr_ = value;
}

// optional string end_at_addr_hex = 5;
inline bool Annotated_Function::has_end_at_addr_hex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Annotated_Function::set_has_end_at_addr_hex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Annotated_Function::clear_has_end_at_addr_hex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Annotated_Function::clear_end_at_addr_hex() {
  if (end_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    end_at_addr_hex_->clear();
  }
  clear_has_end_at_addr_hex();
}
inline const ::std::string& Annotated_Function::end_at_addr_hex() const {
  return *end_at_addr_hex_;
}
inline void Annotated_Function::set_end_at_addr_hex(const ::std::string& value) {
  set_has_end_at_addr_hex();
  if (end_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    end_at_addr_hex_ = new ::std::string;
  }
  end_at_addr_hex_->assign(value);
}
inline void Annotated_Function::set_end_at_addr_hex(const char* value) {
  set_has_end_at_addr_hex();
  if (end_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    end_at_addr_hex_ = new ::std::string;
  }
  end_at_addr_hex_->assign(value);
}
inline void Annotated_Function::set_end_at_addr_hex(const char* value, size_t size) {
  set_has_end_at_addr_hex();
  if (end_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    end_at_addr_hex_ = new ::std::string;
  }
  end_at_addr_hex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Annotated_Function::mutable_end_at_addr_hex() {
  set_has_end_at_addr_hex();
  if (end_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    end_at_addr_hex_ = new ::std::string;
  }
  return end_at_addr_hex_;
}
inline ::std::string* Annotated_Function::release_end_at_addr_hex() {
  clear_has_end_at_addr_hex();
  if (end_at_addr_hex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_at_addr_hex_;
    end_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Annotated_Function::set_allocated_end_at_addr_hex(::std::string* end_at_addr_hex) {
  if (end_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete end_at_addr_hex_;
  }
  if (end_at_addr_hex) {
    set_has_end_at_addr_hex();
    end_at_addr_hex_ = end_at_addr_hex;
  } else {
    clear_has_end_at_addr_hex();
    end_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Annotated_Instruction prolog = 6;
inline int Annotated_Function::prolog_size() const {
  return prolog_.size();
}
inline void Annotated_Function::clear_prolog() {
  prolog_.Clear();
}
inline const ::Annotated_Instruction& Annotated_Function::prolog(int index) const {
  return prolog_.Get(index);
}
inline ::Annotated_Instruction* Annotated_Function::mutable_prolog(int index) {
  return prolog_.Mutable(index);
}
inline ::Annotated_Instruction* Annotated_Function::add_prolog() {
  return prolog_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >&
Annotated_Function::prolog() const {
  return prolog_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >*
Annotated_Function::mutable_prolog() {
  return &prolog_;
}

// repeated .Annotated_Instruction epilog = 7;
inline int Annotated_Function::epilog_size() const {
  return epilog_.size();
}
inline void Annotated_Function::clear_epilog() {
  epilog_.Clear();
}
inline const ::Annotated_Instruction& Annotated_Function::epilog(int index) const {
  return epilog_.Get(index);
}
inline ::Annotated_Instruction* Annotated_Function::mutable_epilog(int index) {
  return epilog_.Mutable(index);
}
inline ::Annotated_Instruction* Annotated_Function::add_epilog() {
  return epilog_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >&
Annotated_Function::epilog() const {
  return epilog_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >*
Annotated_Function::mutable_epilog() {
  return &epilog_;
}

// repeated .Edge_64 referered_from = 8;
inline int Annotated_Function::referered_from_size() const {
  return referered_from_.size();
}
inline void Annotated_Function::clear_referered_from() {
  referered_from_.Clear();
}
inline const ::Edge_64& Annotated_Function::referered_from(int index) const {
  return referered_from_.Get(index);
}
inline ::Edge_64* Annotated_Function::mutable_referered_from(int index) {
  return referered_from_.Mutable(index);
}
inline ::Edge_64* Annotated_Function::add_referered_from() {
  return referered_from_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
Annotated_Function::referered_from() const {
  return referered_from_;
}
inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
Annotated_Function::mutable_referered_from() {
  return &referered_from_;
}

// repeated .Edge_64 calls = 9;
inline int Annotated_Function::calls_size() const {
  return calls_.size();
}
inline void Annotated_Function::clear_calls() {
  calls_.Clear();
}
inline const ::Edge_64& Annotated_Function::calls(int index) const {
  return calls_.Get(index);
}
inline ::Edge_64* Annotated_Function::mutable_calls(int index) {
  return calls_.Mutable(index);
}
inline ::Edge_64* Annotated_Function::add_calls() {
  return calls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Edge_64 >&
Annotated_Function::calls() const {
  return calls_;
}
inline ::google::protobuf::RepeatedPtrField< ::Edge_64 >*
Annotated_Function::mutable_calls() {
  return &calls_;
}

// -------------------------------------------------------------------

// Disassembly

// repeated .Annotated_Instruction instr = 1;
inline int Disassembly::instr_size() const {
  return instr_.size();
}
inline void Disassembly::clear_instr() {
  instr_.Clear();
}
inline const ::Annotated_Instruction& Disassembly::instr(int index) const {
  return instr_.Get(index);
}
inline ::Annotated_Instruction* Disassembly::mutable_instr(int index) {
  return instr_.Mutable(index);
}
inline ::Annotated_Instruction* Disassembly::add_instr() {
  return instr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >&
Disassembly::instr() const {
  return instr_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Instruction >*
Disassembly::mutable_instr() {
  return &instr_;
}

// repeated .Annotated_Branch_Instruction branch_instr = 2;
inline int Disassembly::branch_instr_size() const {
  return branch_instr_.size();
}
inline void Disassembly::clear_branch_instr() {
  branch_instr_.Clear();
}
inline const ::Annotated_Branch_Instruction& Disassembly::branch_instr(int index) const {
  return branch_instr_.Get(index);
}
inline ::Annotated_Branch_Instruction* Disassembly::mutable_branch_instr(int index) {
  return branch_instr_.Mutable(index);
}
inline ::Annotated_Branch_Instruction* Disassembly::add_branch_instr() {
  return branch_instr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Branch_Instruction >&
Disassembly::branch_instr() const {
  return branch_instr_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Branch_Instruction >*
Disassembly::mutable_branch_instr() {
  return &branch_instr_;
}

// repeated .Annotated_Register_32 reg_32 = 3;
inline int Disassembly::reg_32_size() const {
  return reg_32_.size();
}
inline void Disassembly::clear_reg_32() {
  reg_32_.Clear();
}
inline const ::Annotated_Register_32& Disassembly::reg_32(int index) const {
  return reg_32_.Get(index);
}
inline ::Annotated_Register_32* Disassembly::mutable_reg_32(int index) {
  return reg_32_.Mutable(index);
}
inline ::Annotated_Register_32* Disassembly::add_reg_32() {
  return reg_32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Register_32 >&
Disassembly::reg_32() const {
  return reg_32_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Register_32 >*
Disassembly::mutable_reg_32() {
  return &reg_32_;
}

// repeated .Annotated_Register_64 reg_64 = 4;
inline int Disassembly::reg_64_size() const {
  return reg_64_.size();
}
inline void Disassembly::clear_reg_64() {
  reg_64_.Clear();
}
inline const ::Annotated_Register_64& Disassembly::reg_64(int index) const {
  return reg_64_.Get(index);
}
inline ::Annotated_Register_64* Disassembly::mutable_reg_64(int index) {
  return reg_64_.Mutable(index);
}
inline ::Annotated_Register_64* Disassembly::add_reg_64() {
  return reg_64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Register_64 >&
Disassembly::reg_64() const {
  return reg_64_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Register_64 >*
Disassembly::mutable_reg_64() {
  return &reg_64_;
}

// repeated .Annotated_Function func = 5;
inline int Disassembly::func_size() const {
  return func_.size();
}
inline void Disassembly::clear_func() {
  func_.Clear();
}
inline const ::Annotated_Function& Disassembly::func(int index) const {
  return func_.Get(index);
}
inline ::Annotated_Function* Disassembly::mutable_func(int index) {
  return func_.Mutable(index);
}
inline ::Annotated_Function* Disassembly::add_func() {
  return func_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Annotated_Function >&
Disassembly::func() const {
  return func_;
}
inline ::google::protobuf::RepeatedPtrField< ::Annotated_Function >*
Disassembly::mutable_func() {
  return &func_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ExternalFunction_CallingConvention>() {
  return ::ExternalFunction_CallingConvention_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Edge_64_Kind>() {
  return ::Edge_64_Kind_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Edge_32_Kind>() {
  return ::Edge_32_Kind_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Annotated_Branch_Instruction_Branch>() {
  return ::Annotated_Branch_Instruction_Branch_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Annotated_Instruction_Operand_Operand_Type>() {
  return ::Annotated_Instruction_Operand_Operand_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Annotated_Register_32_Register>() {
  return ::Annotated_Register_32_Register_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Annotated_Register_64_Register>() {
  return ::Annotated_Register_64_Register_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CFG_2eproto__INCLUDED
