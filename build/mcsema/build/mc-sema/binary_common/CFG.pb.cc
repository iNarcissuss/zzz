// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CFG.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CFG.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* JumpTbl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpTbl_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpIndexTbl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpIndexTbl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Block_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Block_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalFunction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ExternalFunction_CallingConvention_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExternalData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntrySymbolExtra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntrySymbolExtra_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntrySymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntrySymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Module_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Module_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_64_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Edge_64_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Edge_32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_32_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Edge_32_Kind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Branch_Instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Branch_Instruction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Annotated_Branch_Instruction_Branch_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Instruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Instruction_Operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Instruction_Operand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Annotated_Instruction_Operand_Operand_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Register_32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Register_32_reflection_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Register_32_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Register_32_Property_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Annotated_Register_32_Register_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Register_64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Register_64_reflection_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Register_64_Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Register_64_Property_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Annotated_Register_64_Register_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Annotated_Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Annotated_Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* Disassembly_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Disassembly_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CFG_2eproto() {
  protobuf_AddDesc_CFG_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CFG.proto");
  GOOGLE_CHECK(file != NULL);
  JumpTbl_descriptor_ = file->message_type(0);
  static const int JumpTbl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTbl, table_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTbl, zero_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTbl, offset_from_data_),
  };
  JumpTbl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpTbl_descriptor_,
      JumpTbl::default_instance_,
      JumpTbl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTbl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpTbl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpTbl));
  JumpIndexTbl_descriptor_ = file->message_type(1);
  static const int JumpIndexTbl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpIndexTbl, table_entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpIndexTbl, zero_offset_),
  };
  JumpIndexTbl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpIndexTbl_descriptor_,
      JumpIndexTbl::default_instance_,
      JumpIndexTbl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpIndexTbl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpIndexTbl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpIndexTbl));
  Instruction_descriptor_ = file->message_type(2);
  static const int Instruction_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, inst_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, inst_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, true_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, false_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, inst_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, data_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, ext_call_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, call_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, reloc_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, jump_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, jump_index_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, ext_data_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, system_call_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, local_noreturn_),
  };
  Instruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instruction_descriptor_,
      Instruction::default_instance_,
      Instruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instruction));
  Block_descriptor_ = file->message_type(3);
  static const int Block_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, insts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, base_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, block_follows_),
  };
  Block_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Block_descriptor_,
      Block::default_instance_,
      Block_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Block, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Block));
  Function_descriptor_ = file->message_type(4);
  static const int Function_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, entry_address_),
  };
  Function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Function_descriptor_,
      Function::default_instance_,
      Function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Function));
  ExternalFunction_descriptor_ = file->message_type(5);
  static const int ExternalFunction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, symbol_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, calling_convention_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, has_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, no_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, argument_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, signature_),
  };
  ExternalFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalFunction_descriptor_,
      ExternalFunction::default_instance_,
      ExternalFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalFunction));
  ExternalFunction_CallingConvention_descriptor_ = ExternalFunction_descriptor_->enum_type(0);
  ExternalData_descriptor_ = file->message_type(6);
  static const int ExternalData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalData, symbol_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalData, data_size_),
  };
  ExternalData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalData_descriptor_,
      ExternalData::default_instance_,
      ExternalData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalData));
  DataSymbol_descriptor_ = file->message_type(7);
  static const int DataSymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSymbol, base_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSymbol, symbol_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSymbol, symbol_size_),
  };
  DataSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataSymbol_descriptor_,
      DataSymbol::default_instance_,
      DataSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataSymbol));
  Data_descriptor_ = file->message_type(8);
  static const int Data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, base_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, symbols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, read_only_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  EntrySymbolExtra_descriptor_ = file->message_type(9);
  static const int EntrySymbolExtra_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbolExtra, entry_argc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbolExtra, entry_cconv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbolExtra, does_return_),
  };
  EntrySymbolExtra_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntrySymbolExtra_descriptor_,
      EntrySymbolExtra::default_instance_,
      EntrySymbolExtra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbolExtra, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbolExtra, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntrySymbolExtra));
  EntrySymbol_descriptor_ = file->message_type(10);
  static const int EntrySymbol_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbol, entry_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbol, entry_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbol, entry_extra_),
  };
  EntrySymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntrySymbol_descriptor_,
      EntrySymbol::default_instance_,
      EntrySymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntrySymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntrySymbol));
  Module_descriptor_ = file->message_type(11);
  static const int Module_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, internal_funcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, external_funcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, internal_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, module_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, external_data_),
  };
  Module_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Module_descriptor_,
      Module::default_instance_,
      Module_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Module, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Module));
  Edge_64_descriptor_ = file->message_type(12);
  static const int Edge_64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_64, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_64, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_64, label_),
  };
  Edge_64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge_64_descriptor_,
      Edge_64::default_instance_,
      Edge_64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge_64));
  Edge_64_Kind_descriptor_ = Edge_64_descriptor_->enum_type(0);
  Edge_32_descriptor_ = file->message_type(13);
  static const int Edge_32_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_32, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_32, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_32, label_),
  };
  Edge_32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge_32_descriptor_,
      Edge_32::default_instance_,
      Edge_32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge_32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge_32));
  Edge_32_Kind_descriptor_ = Edge_32_descriptor_->enum_type(0);
  Annotated_Branch_Instruction_descriptor_ = file->message_type(14);
  static const int Annotated_Branch_Instruction_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, branch_instr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, is_resolved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, is_indirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, is_conditional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, is_leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, target_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, abstract_expression_),
  };
  Annotated_Branch_Instruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Branch_Instruction_descriptor_,
      Annotated_Branch_Instruction::default_instance_,
      Annotated_Branch_Instruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Branch_Instruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Branch_Instruction));
  Annotated_Branch_Instruction_Branch_descriptor_ = Annotated_Branch_Instruction_descriptor_->enum_type(0);
  Annotated_Instruction_descriptor_ = file->message_type(15);
  static const int Annotated_Instruction_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, instr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, instr_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, inst_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, inst_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, op_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, inst_addr_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, is_branch_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, argument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, referered_from_),
  };
  Annotated_Instruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Instruction_descriptor_,
      Annotated_Instruction::default_instance_,
      Annotated_Instruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Instruction));
  Annotated_Instruction_Operand_descriptor_ = Annotated_Instruction_descriptor_->nested_type(0);
  static const int Annotated_Instruction_Operand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction_Operand, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction_Operand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction_Operand, value_),
  };
  Annotated_Instruction_Operand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Instruction_Operand_descriptor_,
      Annotated_Instruction_Operand::default_instance_,
      Annotated_Instruction_Operand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction_Operand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Instruction_Operand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Instruction_Operand));
  Annotated_Instruction_Operand_Operand_Type_descriptor_ = Annotated_Instruction_Operand_descriptor_->enum_type(0);
  Annotated_Register_32_descriptor_ = file->message_type(16);
  static const int Annotated_Register_32_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, used_at_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, used_at_addr_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, fact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, abstract_expression_),
  };
  Annotated_Register_32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Register_32_descriptor_,
      Annotated_Register_32::default_instance_,
      Annotated_Register_32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Register_32));
  Annotated_Register_32_Property_descriptor_ = Annotated_Register_32_descriptor_->nested_type(0);
  static const int Annotated_Register_32_Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32_Property, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32_Property, alive_),
  };
  Annotated_Register_32_Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Register_32_Property_descriptor_,
      Annotated_Register_32_Property::default_instance_,
      Annotated_Register_32_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32_Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_32_Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Register_32_Property));
  Annotated_Register_32_Register_descriptor_ = Annotated_Register_32_descriptor_->enum_type(0);
  Annotated_Register_64_descriptor_ = file->message_type(17);
  static const int Annotated_Register_64_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, used_at_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, used_at_addr_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, fact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, abstract_expression_),
  };
  Annotated_Register_64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Register_64_descriptor_,
      Annotated_Register_64::default_instance_,
      Annotated_Register_64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Register_64));
  Annotated_Register_64_Property_descriptor_ = Annotated_Register_64_descriptor_->nested_type(0);
  static const int Annotated_Register_64_Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64_Property, unknown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64_Property, alive_),
  };
  Annotated_Register_64_Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Register_64_Property_descriptor_,
      Annotated_Register_64_Property::default_instance_,
      Annotated_Register_64_Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64_Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Register_64_Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Register_64_Property));
  Annotated_Register_64_Register_descriptor_ = Annotated_Register_64_descriptor_->enum_type(0);
  Annotated_Function_descriptor_ = file->message_type(18);
  static const int Annotated_Function_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, start_at_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, start_at_addr_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, end_at_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, end_at_addr_hex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, prolog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, epilog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, referered_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, calls_),
  };
  Annotated_Function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Annotated_Function_descriptor_,
      Annotated_Function::default_instance_,
      Annotated_Function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Annotated_Function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Annotated_Function));
  Disassembly_descriptor_ = file->message_type(19);
  static const int Disassembly_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, branch_instr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, reg_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, reg_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, func_),
  };
  Disassembly_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Disassembly_descriptor_,
      Disassembly::default_instance_,
      Disassembly_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Disassembly, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Disassembly));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CFG_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpTbl_descriptor_, &JumpTbl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpIndexTbl_descriptor_, &JumpIndexTbl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instruction_descriptor_, &Instruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Block_descriptor_, &Block::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Function_descriptor_, &Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalFunction_descriptor_, &ExternalFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalData_descriptor_, &ExternalData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataSymbol_descriptor_, &DataSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntrySymbolExtra_descriptor_, &EntrySymbolExtra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntrySymbol_descriptor_, &EntrySymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Module_descriptor_, &Module::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge_64_descriptor_, &Edge_64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge_32_descriptor_, &Edge_32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Branch_Instruction_descriptor_, &Annotated_Branch_Instruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Instruction_descriptor_, &Annotated_Instruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Instruction_Operand_descriptor_, &Annotated_Instruction_Operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Register_32_descriptor_, &Annotated_Register_32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Register_32_Property_descriptor_, &Annotated_Register_32_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Register_64_descriptor_, &Annotated_Register_64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Register_64_Property_descriptor_, &Annotated_Register_64_Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Annotated_Function_descriptor_, &Annotated_Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Disassembly_descriptor_, &Disassembly::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CFG_2eproto() {
  delete JumpTbl::default_instance_;
  delete JumpTbl_reflection_;
  delete JumpIndexTbl::default_instance_;
  delete JumpIndexTbl_reflection_;
  delete Instruction::default_instance_;
  delete Instruction_reflection_;
  delete Block::default_instance_;
  delete Block_reflection_;
  delete Function::default_instance_;
  delete Function_reflection_;
  delete ExternalFunction::default_instance_;
  delete ExternalFunction_reflection_;
  delete ExternalData::default_instance_;
  delete ExternalData_reflection_;
  delete DataSymbol::default_instance_;
  delete DataSymbol_reflection_;
  delete Data::default_instance_;
  delete Data_reflection_;
  delete EntrySymbolExtra::default_instance_;
  delete EntrySymbolExtra_reflection_;
  delete EntrySymbol::default_instance_;
  delete EntrySymbol_reflection_;
  delete Module::default_instance_;
  delete Module_reflection_;
  delete Edge_64::default_instance_;
  delete Edge_64_reflection_;
  delete Edge_32::default_instance_;
  delete Edge_32_reflection_;
  delete Annotated_Branch_Instruction::default_instance_;
  delete Annotated_Branch_Instruction_reflection_;
  delete Annotated_Instruction::default_instance_;
  delete Annotated_Instruction_reflection_;
  delete Annotated_Instruction_Operand::default_instance_;
  delete Annotated_Instruction_Operand_reflection_;
  delete Annotated_Register_32::default_instance_;
  delete Annotated_Register_32_reflection_;
  delete Annotated_Register_32_Property::default_instance_;
  delete Annotated_Register_32_Property_reflection_;
  delete Annotated_Register_64::default_instance_;
  delete Annotated_Register_64_reflection_;
  delete Annotated_Register_64_Property::default_instance_;
  delete Annotated_Register_64_Property_reflection_;
  delete Annotated_Function::default_instance_;
  delete Annotated_Function_reflection_;
  delete Disassembly::default_instance_;
  delete Disassembly_reflection_;
}

void protobuf_AddDesc_CFG_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tCFG.proto\"O\n\007JumpTbl\022\025\n\rtable_entries\030"
    "\001 \003(\003\022\023\n\013zero_offset\030\002 \002(\005\022\030\n\020offset_fro"
    "m_data\030\003 \001(\003\":\n\014JumpIndexTbl\022\025\n\rtable_en"
    "tries\030\001 \002(\014\022\023\n\013zero_offset\030\002 \002(\005\"\332\002\n\013Ins"
    "truction\022\022\n\ninst_bytes\030\001 \002(\014\022\021\n\tinst_add"
    "r\030\002 \002(\003\022\023\n\013true_target\030\003 \001(\003\022\024\n\014false_ta"
    "rget\030\004 \001(\003\022\020\n\010inst_len\030\005 \002(\005\022\023\n\013data_off"
    "set\030\006 \001(\003\022\025\n\rext_call_name\030\007 \001(\t\022\023\n\013call"
    "_target\030\010 \001(\003\022\024\n\014reloc_offset\030\t \001(\005\022\034\n\nj"
    "ump_table\030\n \001(\0132\010.JumpTbl\022\'\n\020jump_index_"
    "table\030\013 \001(\0132\r.JumpIndexTbl\022\025\n\rext_data_n"
    "ame\030\014 \001(\t\022\032\n\022system_call_number\030\r \001(\005\022\026\n"
    "\016local_noreturn\030\016 \001(\010\"Q\n\005Block\022\033\n\005insts\030"
    "\001 \003(\0132\014.Instruction\022\024\n\014base_address\030\002 \002("
    "\003\022\025\n\rblock_follows\030\003 \003(\003\"9\n\010Function\022\026\n\006"
    "blocks\030\001 \003(\0132\006.Block\022\025\n\rentry_address\030\002 "
    "\002(\003\"\203\002\n\020ExternalFunction\022\023\n\013symbol_name\030"
    "\001 \002(\t\022\?\n\022calling_convention\030\002 \002(\0162#.Exte"
    "rnalFunction.CallingConvention\022\022\n\nhas_re"
    "turn\030\003 \002(\010\022\021\n\tno_return\030\004 \002(\010\022\026\n\016argumen"
    "t_count\030\005 \002(\005\022\021\n\tsignature\030\006 \001(\t\"G\n\021Call"
    "ingConvention\022\021\n\rCallerCleanup\020\000\022\021\n\rCall"
    "eeCleanup\020\001\022\014\n\010FastCall\020\002\"6\n\014ExternalDat"
    "a\022\023\n\013symbol_name\030\001 \002(\t\022\021\n\tdata_size\030\002 \002("
    "\005\"L\n\nDataSymbol\022\024\n\014base_address\030\001 \002(\003\022\023\n"
    "\013symbol_name\030\002 \002(\t\022\023\n\013symbol_size\030\003 \002(\005\""
    "[\n\004Data\022\024\n\014base_address\030\001 \002(\003\022\014\n\004data\030\002 "
    "\002(\014\022\034\n\007symbols\030\003 \003(\0132\013.DataSymbol\022\021\n\trea"
    "d_only\030\004 \002(\010\"u\n\020EntrySymbolExtra\022\022\n\nentr"
    "y_argc\030\001 \002(\005\0228\n\013entry_cconv\030\002 \002(\0162#.Exte"
    "rnalFunction.CallingConvention\022\023\n\013does_r"
    "eturn\030\003 \002(\010\"`\n\013EntrySymbol\022\022\n\nentry_name"
    "\030\001 \002(\t\022\025\n\rentry_address\030\002 \002(\003\022&\n\013entry_e"
    "xtra\030\003 \001(\0132\021.EntrySymbolExtra\"\316\001\n\006Module"
    "\022!\n\016internal_funcs\030\001 \003(\0132\t.Function\022)\n\016e"
    "xternal_funcs\030\002 \003(\0132\021.ExternalFunction\022\034"
    "\n\rinternal_data\030\003 \003(\0132\005.Data\022\023\n\013module_n"
    "ame\030\004 \002(\t\022\035\n\007entries\030\005 \003(\0132\014.EntrySymbol"
    "\022$\n\rexternal_data\030\006 \003(\0132\r.ExternalData\"l"
    "\n\007Edge_64\022\r\n\005value\030\001 \002(\003\022\033\n\004kind\030\002 \002(\0162\r"
    ".Edge_64.Kind\022\r\n\005label\030\003 \001(\010\"&\n\004Kind\022\013\n\007"
    "Unknown\020\000\022\007\n\003May\020\001\022\010\n\004Must\020\002\"l\n\007Edge_32\022"
    "\r\n\005value\030\001 \002(\005\022\033\n\004kind\030\002 \002(\0162\r.Edge_32.K"
    "ind\022\r\n\005label\030\003 \001(\010\"&\n\004Kind\022\013\n\007Unknown\020\000\022"
    "\007\n\003May\020\001\022\010\n\004Must\020\002\"\205\004\n\034Annotated_Branch_"
    "Instruction\022\?\n\021branch_instr_name\030\001 \002(\0162$"
    ".Annotated_Branch_Instruction.Branch\022\023\n\013"
    "is_resolved\030\002 \002(\010\022\023\n\013is_indirect\030\003 \002(\010\022\026"
    "\n\016is_conditional\030\004 \002(\010\022\017\n\007is_leaf\030\005 \002(\010\022"
    "\033\n\ttarget_to\030\006 \003(\0132\010.Edge_64\022%\n\005instr\030\007 "
    "\002(\0132\026.Annotated_Instruction\022\033\n\023abstract_"
    "expression\030\010 \001(\t\"\357\001\n\006Branch\022\013\n\007Unknown\020\000"
    "\022\007\n\003jmp\020\001\022\010\n\004ljmp\020\002\022\006\n\002jo\020\003\022\007\n\003jno\020\004\022\006\n\002"
    "jb\020\005\022\007\n\003jae\020\006\022\006\n\002je\020\007\022\007\n\003jne\020\010\022\007\n\003jbe\020\t\022"
    "\006\n\002ja\020\n\022\006\n\002js\020\013\022\007\n\003jns\020\014\022\006\n\002jp\020\r\022\007\n\003jnp\020"
    "\016\022\006\n\002jl\020\017\022\007\n\003jge\020\020\022\007\n\003jle\020\021\022\006\n\002jg\020\022\022\n\n\006l"
    "oopne\020\023\022\t\n\005loope\020\024\022\010\n\004loop\020\025\022\t\n\005jCcxz\020\026\022"
    "\007\n\003ret\020\027\022\010\n\004call\020\030\"\270\003\n\025Annotated_Instruc"
    "tion\022\022\n\ninstr_name\030\001 \002(\t\022\024\n\014instr_string"
    "\030\002 \002(\t\022\021\n\tinst_addr\030\003 \002(\003\022\020\n\010inst_len\030\004 "
    "\002(\005\022\020\n\010op_count\030\005 \002(\005\022\025\n\rinst_addr_hex\030\006"
    " \001(\t\022\035\n\025is_branch_instruction\030\007 \002(\010\0220\n\010a"
    "rgument\030\010 \003(\0132\036.Annotated_Instruction.Op"
    "erand\022 \n\016referered_from\030\t \003(\0132\010.Edge_64\032"
    "\263\001\n\007Operand\022\013\n\003pos\030\001 \002(\005\0229\n\004type\030\002 \002(\0162+"
    ".Annotated_Instruction.Operand.Operand_T"
    "ype\022\r\n\005value\030\003 \001(\t\"Q\n\014Operand_Type\022\013\n\007Un"
    "known\020\000\022\r\n\tImmediate\020\001\022\014\n\010Register\020\002\022\n\n\006"
    "Memory\020\003\022\013\n\007Address\020\004\"\251\003\n\025Annotated_Regi"
    "ster_32\022-\n\004name\030\001 \002(\0162\037.Annotated_Regist"
    "er_32.Register\022\024\n\014used_at_addr\030\002 \002(\003\022\030\n\020"
    "used_at_addr_hex\030\003 \001(\t\022\027\n\005value\030\007 \003(\0132\010."
    "Edge_32\022-\n\004fact\030\010 \002(\0132\037.Annotated_Regist"
    "er_32.Property\022\033\n\023abstract_expression\030\t "
    "\001(\t\032*\n\010Property\022\017\n\007Unknown\030\001 \002(\010\022\r\n\005Aliv"
    "e\030\002 \001(\010\"\237\001\n\010Register\022\013\n\007Unknown\020\000\022\007\n\003eax"
    "\020\001\022\007\n\003ecx\020\002\022\007\n\003edx\020\003\022\007\n\003ebx\020\004\022\007\n\003esp\020\005\022\007"
    "\n\003ebp\020\006\022\007\n\003esi\020\007\022\007\n\003edi\020\010\022\007\n\003eip\020\t\022\013\n\007fs"
    "_base\020\n\022\013\n\007gs_base\020\013\022\007\n\003gtd\020\014\022\007\n\003ldt\020\r\022\t"
    "\n\005mxcsr\020\016\"\344\003\n\025Annotated_Register_64\022-\n\004n"
    "ame\030\001 \002(\0162\037.Annotated_Register_64.Regist"
    "er\022\024\n\014used_at_addr\030\002 \002(\003\022\030\n\020used_at_addr"
    "_hex\030\003 \001(\t\022\027\n\005value\030\004 \003(\0132\010.Edge_64\022-\n\004f"
    "act\030\005 \002(\0132\037.Annotated_Register_64.Proper"
    "ty\022\033\n\023abstract_expression\030\006 \001(\t\032*\n\010Prope"
    "rty\022\017\n\007Unknown\030\001 \002(\010\022\r\n\005Alive\030\002 \001(\010\"\332\001\n\010"
    "Register\022\013\n\007Unknown\020\000\022\007\n\003rax\020\n\022\007\n\003rcx\020\013\022"
    "\007\n\003rdx\020\014\022\007\n\003rbx\020\r\022\007\n\003rsp\020\016\022\007\n\003rbp\020\017\022\007\n\003r"
    "si\020\020\022\007\n\003rdi\020\021\022\007\n\003rip\020\022\022\006\n\002r8\020\023\022\006\n\002r9\020\024\022\007"
    "\n\003r10\020\025\022\007\n\003r11\020\026\022\007\n\003r12\020\027\022\007\n\003r13\020\030\022\007\n\003r1"
    "4\020\031\022\007\n\003r15\020\032\022\013\n\007fs_base\020\033\022\013\n\007gs_base\020\034\022\007"
    "\n\003gdt\020\035\022\007\n\003ldt\020\036\"\215\002\n\022Annotated_Function\022"
    "\014\n\004name\030\001 \002(\t\022\025\n\rstart_at_addr\030\002 \002(\003\022\031\n\021"
    "start_at_addr_hex\030\003 \001(\t\022\023\n\013end_at_addr\030\004"
    " \001(\003\022\027\n\017end_at_addr_hex\030\005 \001(\t\022&\n\006prolog\030"
    "\006 \003(\0132\026.Annotated_Instruction\022&\n\006epilog\030"
    "\007 \003(\0132\026.Annotated_Instruction\022 \n\016referer"
    "ed_from\030\010 \003(\0132\010.Edge_64\022\027\n\005calls\030\t \003(\0132\010"
    ".Edge_64\"\334\001\n\013Disassembly\022%\n\005instr\030\001 \003(\0132"
    "\026.Annotated_Instruction\0223\n\014branch_instr\030"
    "\002 \003(\0132\035.Annotated_Branch_Instruction\022&\n\006"
    "reg_32\030\003 \003(\0132\026.Annotated_Register_32\022&\n\006"
    "reg_64\030\004 \003(\0132\026.Annotated_Register_64\022!\n\004"
    "func\030\005 \003(\0132\023.Annotated_Function", 4151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CFG.proto", &protobuf_RegisterTypes);
  JumpTbl::default_instance_ = new JumpTbl();
  JumpIndexTbl::default_instance_ = new JumpIndexTbl();
  Instruction::default_instance_ = new Instruction();
  Block::default_instance_ = new Block();
  Function::default_instance_ = new Function();
  ExternalFunction::default_instance_ = new ExternalFunction();
  ExternalData::default_instance_ = new ExternalData();
  DataSymbol::default_instance_ = new DataSymbol();
  Data::default_instance_ = new Data();
  EntrySymbolExtra::default_instance_ = new EntrySymbolExtra();
  EntrySymbol::default_instance_ = new EntrySymbol();
  Module::default_instance_ = new Module();
  Edge_64::default_instance_ = new Edge_64();
  Edge_32::default_instance_ = new Edge_32();
  Annotated_Branch_Instruction::default_instance_ = new Annotated_Branch_Instruction();
  Annotated_Instruction::default_instance_ = new Annotated_Instruction();
  Annotated_Instruction_Operand::default_instance_ = new Annotated_Instruction_Operand();
  Annotated_Register_32::default_instance_ = new Annotated_Register_32();
  Annotated_Register_32_Property::default_instance_ = new Annotated_Register_32_Property();
  Annotated_Register_64::default_instance_ = new Annotated_Register_64();
  Annotated_Register_64_Property::default_instance_ = new Annotated_Register_64_Property();
  Annotated_Function::default_instance_ = new Annotated_Function();
  Disassembly::default_instance_ = new Disassembly();
  JumpTbl::default_instance_->InitAsDefaultInstance();
  JumpIndexTbl::default_instance_->InitAsDefaultInstance();
  Instruction::default_instance_->InitAsDefaultInstance();
  Block::default_instance_->InitAsDefaultInstance();
  Function::default_instance_->InitAsDefaultInstance();
  ExternalFunction::default_instance_->InitAsDefaultInstance();
  ExternalData::default_instance_->InitAsDefaultInstance();
  DataSymbol::default_instance_->InitAsDefaultInstance();
  Data::default_instance_->InitAsDefaultInstance();
  EntrySymbolExtra::default_instance_->InitAsDefaultInstance();
  EntrySymbol::default_instance_->InitAsDefaultInstance();
  Module::default_instance_->InitAsDefaultInstance();
  Edge_64::default_instance_->InitAsDefaultInstance();
  Edge_32::default_instance_->InitAsDefaultInstance();
  Annotated_Branch_Instruction::default_instance_->InitAsDefaultInstance();
  Annotated_Instruction::default_instance_->InitAsDefaultInstance();
  Annotated_Instruction_Operand::default_instance_->InitAsDefaultInstance();
  Annotated_Register_32::default_instance_->InitAsDefaultInstance();
  Annotated_Register_32_Property::default_instance_->InitAsDefaultInstance();
  Annotated_Register_64::default_instance_->InitAsDefaultInstance();
  Annotated_Register_64_Property::default_instance_->InitAsDefaultInstance();
  Annotated_Function::default_instance_->InitAsDefaultInstance();
  Disassembly::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CFG_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CFG_2eproto {
  StaticDescriptorInitializer_CFG_2eproto() {
    protobuf_AddDesc_CFG_2eproto();
  }
} static_descriptor_initializer_CFG_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int JumpTbl::kTableEntriesFieldNumber;
const int JumpTbl::kZeroOffsetFieldNumber;
const int JumpTbl::kOffsetFromDataFieldNumber;
#endif  // !_MSC_VER

JumpTbl::JumpTbl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JumpTbl::InitAsDefaultInstance() {
}

JumpTbl::JumpTbl(const JumpTbl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JumpTbl::SharedCtor() {
  _cached_size_ = 0;
  zero_offset_ = 0;
  offset_from_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpTbl::~JumpTbl() {
  SharedDtor();
}

void JumpTbl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JumpTbl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpTbl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpTbl_descriptor_;
}

const JumpTbl& JumpTbl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

JumpTbl* JumpTbl::default_instance_ = NULL;

JumpTbl* JumpTbl::New() const {
  return new JumpTbl;
}

void JumpTbl::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    zero_offset_ = 0;
    offset_from_data_ = GOOGLE_LONGLONG(0);
  }
  table_entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpTbl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 table_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_table_entries())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_table_entries())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_table_entries;
        if (input->ExpectTag(16)) goto parse_zero_offset;
        break;
      }

      // required int32 zero_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zero_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_offset_)));
          set_has_zero_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset_from_data;
        break;
      }

      // optional int64 offset_from_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset_from_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_from_data_)));
          set_has_offset_from_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JumpTbl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 table_entries = 1;
  for (int i = 0; i < this->table_entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->table_entries(i), output);
  }

  // required int32 zero_offset = 2;
  if (has_zero_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zero_offset(), output);
  }

  // optional int64 offset_from_data = 3;
  if (has_offset_from_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset_from_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JumpTbl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 table_entries = 1;
  for (int i = 0; i < this->table_entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->table_entries(i), target);
  }

  // required int32 zero_offset = 2;
  if (has_zero_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zero_offset(), target);
  }

  // optional int64 offset_from_data = 3;
  if (has_offset_from_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset_from_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JumpTbl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 zero_offset = 2;
    if (has_zero_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_offset());
    }

    // optional int64 offset_from_data = 3;
    if (has_offset_from_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_from_data());
    }

  }
  // repeated int64 table_entries = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_entries_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->table_entries(i));
    }
    total_size += 1 * this->table_entries_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpTbl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpTbl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpTbl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpTbl::MergeFrom(const JumpTbl& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_entries_.MergeFrom(from.table_entries_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_zero_offset()) {
      set_zero_offset(from.zero_offset());
    }
    if (from.has_offset_from_data()) {
      set_offset_from_data(from.offset_from_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpTbl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpTbl::CopyFrom(const JumpTbl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpTbl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void JumpTbl::Swap(JumpTbl* other) {
  if (other != this) {
    table_entries_.Swap(&other->table_entries_);
    std::swap(zero_offset_, other->zero_offset_);
    std::swap(offset_from_data_, other->offset_from_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpTbl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpTbl_descriptor_;
  metadata.reflection = JumpTbl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JumpIndexTbl::kTableEntriesFieldNumber;
const int JumpIndexTbl::kZeroOffsetFieldNumber;
#endif  // !_MSC_VER

JumpIndexTbl::JumpIndexTbl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JumpIndexTbl::InitAsDefaultInstance() {
}

JumpIndexTbl::JumpIndexTbl(const JumpIndexTbl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JumpIndexTbl::SharedCtor() {
  _cached_size_ = 0;
  table_entries_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zero_offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpIndexTbl::~JumpIndexTbl() {
  SharedDtor();
}

void JumpIndexTbl::SharedDtor() {
  if (table_entries_ != &::google::protobuf::internal::kEmptyString) {
    delete table_entries_;
  }
  if (this != default_instance_) {
  }
}

void JumpIndexTbl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpIndexTbl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpIndexTbl_descriptor_;
}

const JumpIndexTbl& JumpIndexTbl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

JumpIndexTbl* JumpIndexTbl::default_instance_ = NULL;

JumpIndexTbl* JumpIndexTbl::New() const {
  return new JumpIndexTbl;
}

void JumpIndexTbl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_entries()) {
      if (table_entries_ != &::google::protobuf::internal::kEmptyString) {
        table_entries_->clear();
      }
    }
    zero_offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpIndexTbl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zero_offset;
        break;
      }

      // required int32 zero_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zero_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_offset_)));
          set_has_zero_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JumpIndexTbl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes table_entries = 1;
  if (has_table_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_entries(), output);
  }

  // required int32 zero_offset = 2;
  if (has_zero_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zero_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JumpIndexTbl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes table_entries = 1;
  if (has_table_entries()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_entries(), target);
  }

  // required int32 zero_offset = 2;
  if (has_zero_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zero_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JumpIndexTbl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_entries = 1;
    if (has_table_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_entries());
    }

    // required int32 zero_offset = 2;
    if (has_zero_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpIndexTbl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpIndexTbl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpIndexTbl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpIndexTbl::MergeFrom(const JumpIndexTbl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_entries()) {
      set_table_entries(from.table_entries());
    }
    if (from.has_zero_offset()) {
      set_zero_offset(from.zero_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpIndexTbl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpIndexTbl::CopyFrom(const JumpIndexTbl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpIndexTbl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JumpIndexTbl::Swap(JumpIndexTbl* other) {
  if (other != this) {
    std::swap(table_entries_, other->table_entries_);
    std::swap(zero_offset_, other->zero_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpIndexTbl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpIndexTbl_descriptor_;
  metadata.reflection = JumpIndexTbl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instruction::kInstBytesFieldNumber;
const int Instruction::kInstAddrFieldNumber;
const int Instruction::kTrueTargetFieldNumber;
const int Instruction::kFalseTargetFieldNumber;
const int Instruction::kInstLenFieldNumber;
const int Instruction::kDataOffsetFieldNumber;
const int Instruction::kExtCallNameFieldNumber;
const int Instruction::kCallTargetFieldNumber;
const int Instruction::kRelocOffsetFieldNumber;
const int Instruction::kJumpTableFieldNumber;
const int Instruction::kJumpIndexTableFieldNumber;
const int Instruction::kExtDataNameFieldNumber;
const int Instruction::kSystemCallNumberFieldNumber;
const int Instruction::kLocalNoreturnFieldNumber;
#endif  // !_MSC_VER

Instruction::Instruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instruction::InitAsDefaultInstance() {
  jump_table_ = const_cast< ::JumpTbl*>(&::JumpTbl::default_instance());
  jump_index_table_ = const_cast< ::JumpIndexTbl*>(&::JumpIndexTbl::default_instance());
}

Instruction::Instruction(const Instruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instruction::SharedCtor() {
  _cached_size_ = 0;
  inst_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_addr_ = GOOGLE_LONGLONG(0);
  true_target_ = GOOGLE_LONGLONG(0);
  false_target_ = GOOGLE_LONGLONG(0);
  inst_len_ = 0;
  data_offset_ = GOOGLE_LONGLONG(0);
  ext_call_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  call_target_ = GOOGLE_LONGLONG(0);
  reloc_offset_ = 0;
  jump_table_ = NULL;
  jump_index_table_ = NULL;
  ext_data_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  system_call_number_ = 0;
  local_noreturn_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instruction::~Instruction() {
  SharedDtor();
}

void Instruction::SharedDtor() {
  if (inst_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_bytes_;
  }
  if (ext_call_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_call_name_;
  }
  if (ext_data_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ext_data_name_;
  }
  if (this != default_instance_) {
    delete jump_table_;
    delete jump_index_table_;
  }
}

void Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instruction_descriptor_;
}

const Instruction& Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Instruction* Instruction::default_instance_ = NULL;

Instruction* Instruction::New() const {
  return new Instruction;
}

void Instruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_inst_bytes()) {
      if (inst_bytes_ != &::google::protobuf::internal::kEmptyString) {
        inst_bytes_->clear();
      }
    }
    inst_addr_ = GOOGLE_LONGLONG(0);
    true_target_ = GOOGLE_LONGLONG(0);
    false_target_ = GOOGLE_LONGLONG(0);
    inst_len_ = 0;
    data_offset_ = GOOGLE_LONGLONG(0);
    if (has_ext_call_name()) {
      if (ext_call_name_ != &::google::protobuf::internal::kEmptyString) {
        ext_call_name_->clear();
      }
    }
    call_target_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reloc_offset_ = 0;
    if (has_jump_table()) {
      if (jump_table_ != NULL) jump_table_->::JumpTbl::Clear();
    }
    if (has_jump_index_table()) {
      if (jump_index_table_ != NULL) jump_index_table_->::JumpIndexTbl::Clear();
    }
    if (has_ext_data_name()) {
      if (ext_data_name_ != &::google::protobuf::internal::kEmptyString) {
        ext_data_name_->clear();
      }
    }
    system_call_number_ = 0;
    local_noreturn_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes inst_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_inst_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inst_addr;
        break;
      }

      // required int64 inst_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inst_addr_)));
          set_has_inst_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_true_target;
        break;
      }

      // optional int64 true_target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_true_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &true_target_)));
          set_has_true_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_false_target;
        break;
      }

      // optional int64 false_target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_false_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &false_target_)));
          set_has_false_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_inst_len;
        break;
      }

      // required int32 inst_len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inst_len_)));
          set_has_inst_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_offset;
        break;
      }

      // optional int64 data_offset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_offset_)));
          set_has_data_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ext_call_name;
        break;
      }

      // optional string ext_call_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_call_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_call_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_call_name().data(), this->ext_call_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_call_target;
        break;
      }

      // optional int64 call_target = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_call_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &call_target_)));
          set_has_call_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reloc_offset;
        break;
      }

      // optional int32 reloc_offset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reloc_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reloc_offset_)));
          set_has_reloc_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_jump_table;
        break;
      }

      // optional .JumpTbl jump_table = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jump_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jump_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_jump_index_table;
        break;
      }

      // optional .JumpIndexTbl jump_index_table = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jump_index_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jump_index_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ext_data_name;
        break;
      }

      // optional string ext_data_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext_data_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext_data_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ext_data_name().data(), this->ext_data_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_system_call_number;
        break;
      }

      // optional int32 system_call_number = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_system_call_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &system_call_number_)));
          set_has_system_call_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_local_noreturn;
        break;
      }

      // optional bool local_noreturn = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_noreturn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_noreturn_)));
          set_has_local_noreturn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes inst_bytes = 1;
  if (has_inst_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->inst_bytes(), output);
  }

  // required int64 inst_addr = 2;
  if (has_inst_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->inst_addr(), output);
  }

  // optional int64 true_target = 3;
  if (has_true_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->true_target(), output);
  }

  // optional int64 false_target = 4;
  if (has_false_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->false_target(), output);
  }

  // required int32 inst_len = 5;
  if (has_inst_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->inst_len(), output);
  }

  // optional int64 data_offset = 6;
  if (has_data_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->data_offset(), output);
  }

  // optional string ext_call_name = 7;
  if (has_ext_call_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_call_name().data(), this->ext_call_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ext_call_name(), output);
  }

  // optional int64 call_target = 8;
  if (has_call_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->call_target(), output);
  }

  // optional int32 reloc_offset = 9;
  if (has_reloc_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reloc_offset(), output);
  }

  // optional .JumpTbl jump_table = 10;
  if (has_jump_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->jump_table(), output);
  }

  // optional .JumpIndexTbl jump_index_table = 11;
  if (has_jump_index_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->jump_index_table(), output);
  }

  // optional string ext_data_name = 12;
  if (has_ext_data_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_data_name().data(), this->ext_data_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ext_data_name(), output);
  }

  // optional int32 system_call_number = 13;
  if (has_system_call_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->system_call_number(), output);
  }

  // optional bool local_noreturn = 14;
  if (has_local_noreturn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->local_noreturn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes inst_bytes = 1;
  if (has_inst_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->inst_bytes(), target);
  }

  // required int64 inst_addr = 2;
  if (has_inst_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->inst_addr(), target);
  }

  // optional int64 true_target = 3;
  if (has_true_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->true_target(), target);
  }

  // optional int64 false_target = 4;
  if (has_false_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->false_target(), target);
  }

  // required int32 inst_len = 5;
  if (has_inst_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->inst_len(), target);
  }

  // optional int64 data_offset = 6;
  if (has_data_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->data_offset(), target);
  }

  // optional string ext_call_name = 7;
  if (has_ext_call_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_call_name().data(), this->ext_call_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ext_call_name(), target);
  }

  // optional int64 call_target = 8;
  if (has_call_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->call_target(), target);
  }

  // optional int32 reloc_offset = 9;
  if (has_reloc_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reloc_offset(), target);
  }

  // optional .JumpTbl jump_table = 10;
  if (has_jump_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->jump_table(), target);
  }

  // optional .JumpIndexTbl jump_index_table = 11;
  if (has_jump_index_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->jump_index_table(), target);
  }

  // optional string ext_data_name = 12;
  if (has_ext_data_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ext_data_name().data(), this->ext_data_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ext_data_name(), target);
  }

  // optional int32 system_call_number = 13;
  if (has_system_call_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->system_call_number(), target);
  }

  // optional bool local_noreturn = 14;
  if (has_local_noreturn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->local_noreturn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instruction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes inst_bytes = 1;
    if (has_inst_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->inst_bytes());
    }

    // required int64 inst_addr = 2;
    if (has_inst_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inst_addr());
    }

    // optional int64 true_target = 3;
    if (has_true_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->true_target());
    }

    // optional int64 false_target = 4;
    if (has_false_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->false_target());
    }

    // required int32 inst_len = 5;
    if (has_inst_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inst_len());
    }

    // optional int64 data_offset = 6;
    if (has_data_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->data_offset());
    }

    // optional string ext_call_name = 7;
    if (has_ext_call_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_call_name());
    }

    // optional int64 call_target = 8;
    if (has_call_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->call_target());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reloc_offset = 9;
    if (has_reloc_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reloc_offset());
    }

    // optional .JumpTbl jump_table = 10;
    if (has_jump_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jump_table());
    }

    // optional .JumpIndexTbl jump_index_table = 11;
    if (has_jump_index_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jump_index_table());
    }

    // optional string ext_data_name = 12;
    if (has_ext_data_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ext_data_name());
    }

    // optional int32 system_call_number = 13;
    if (has_system_call_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->system_call_number());
    }

    // optional bool local_noreturn = 14;
    if (has_local_noreturn()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instruction::MergeFrom(const Instruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inst_bytes()) {
      set_inst_bytes(from.inst_bytes());
    }
    if (from.has_inst_addr()) {
      set_inst_addr(from.inst_addr());
    }
    if (from.has_true_target()) {
      set_true_target(from.true_target());
    }
    if (from.has_false_target()) {
      set_false_target(from.false_target());
    }
    if (from.has_inst_len()) {
      set_inst_len(from.inst_len());
    }
    if (from.has_data_offset()) {
      set_data_offset(from.data_offset());
    }
    if (from.has_ext_call_name()) {
      set_ext_call_name(from.ext_call_name());
    }
    if (from.has_call_target()) {
      set_call_target(from.call_target());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reloc_offset()) {
      set_reloc_offset(from.reloc_offset());
    }
    if (from.has_jump_table()) {
      mutable_jump_table()->::JumpTbl::MergeFrom(from.jump_table());
    }
    if (from.has_jump_index_table()) {
      mutable_jump_index_table()->::JumpIndexTbl::MergeFrom(from.jump_index_table());
    }
    if (from.has_ext_data_name()) {
      set_ext_data_name(from.ext_data_name());
    }
    if (from.has_system_call_number()) {
      set_system_call_number(from.system_call_number());
    }
    if (from.has_local_noreturn()) {
      set_local_noreturn(from.local_noreturn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instruction::CopyFrom(const Instruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_jump_table()) {
    if (!this->jump_table().IsInitialized()) return false;
  }
  if (has_jump_index_table()) {
    if (!this->jump_index_table().IsInitialized()) return false;
  }
  return true;
}

void Instruction::Swap(Instruction* other) {
  if (other != this) {
    std::swap(inst_bytes_, other->inst_bytes_);
    std::swap(inst_addr_, other->inst_addr_);
    std::swap(true_target_, other->true_target_);
    std::swap(false_target_, other->false_target_);
    std::swap(inst_len_, other->inst_len_);
    std::swap(data_offset_, other->data_offset_);
    std::swap(ext_call_name_, other->ext_call_name_);
    std::swap(call_target_, other->call_target_);
    std::swap(reloc_offset_, other->reloc_offset_);
    std::swap(jump_table_, other->jump_table_);
    std::swap(jump_index_table_, other->jump_index_table_);
    std::swap(ext_data_name_, other->ext_data_name_);
    std::swap(system_call_number_, other->system_call_number_);
    std::swap(local_noreturn_, other->local_noreturn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instruction_descriptor_;
  metadata.reflection = Instruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Block::kInstsFieldNumber;
const int Block::kBaseAddressFieldNumber;
const int Block::kBlockFollowsFieldNumber;
#endif  // !_MSC_VER

Block::Block()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Block::InitAsDefaultInstance() {
}

Block::Block(const Block& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Block::SharedCtor() {
  _cached_size_ = 0;
  base_address_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Block::~Block() {
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Block::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Block::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Block_descriptor_;
}

const Block& Block::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Block* Block::default_instance_ = NULL;

Block* Block::New() const {
  return new Block;
}

void Block::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    base_address_ = GOOGLE_LONGLONG(0);
  }
  insts_.Clear();
  block_follows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Block::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Instruction insts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_insts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_insts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_insts;
        if (input->ExpectTag(16)) goto parse_base_address;
        break;
      }

      // required int64 base_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_address_)));
          set_has_base_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_follows;
        break;
      }

      // repeated int64 block_follows = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_follows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_block_follows())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_block_follows())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_follows;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Block::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Instruction insts = 1;
  for (int i = 0; i < this->insts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->insts(i), output);
  }

  // required int64 base_address = 2;
  if (has_base_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->base_address(), output);
  }

  // repeated int64 block_follows = 3;
  for (int i = 0; i < this->block_follows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->block_follows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Block::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Instruction insts = 1;
  for (int i = 0; i < this->insts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->insts(i), target);
  }

  // required int64 base_address = 2;
  if (has_base_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->base_address(), target);
  }

  // repeated int64 block_follows = 3;
  for (int i = 0; i < this->block_follows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->block_follows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Block::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 base_address = 2;
    if (has_base_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_address());
    }

  }
  // repeated .Instruction insts = 1;
  total_size += 1 * this->insts_size();
  for (int i = 0; i < this->insts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->insts(i));
  }

  // repeated int64 block_follows = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->block_follows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->block_follows(i));
    }
    total_size += 1 * this->block_follows_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Block::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Block* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Block*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
  GOOGLE_CHECK_NE(&from, this);
  insts_.MergeFrom(from.insts_);
  block_follows_.MergeFrom(from.block_follows_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_base_address()) {
      set_base_address(from.base_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Block::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < insts_size(); i++) {
    if (!this->insts(i).IsInitialized()) return false;
  }
  return true;
}

void Block::Swap(Block* other) {
  if (other != this) {
    insts_.Swap(&other->insts_);
    std::swap(base_address_, other->base_address_);
    block_follows_.Swap(&other->block_follows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Block::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Block_descriptor_;
  metadata.reflection = Block_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Function::kBlocksFieldNumber;
const int Function::kEntryAddressFieldNumber;
#endif  // !_MSC_VER

Function::Function()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Function::InitAsDefaultInstance() {
}

Function::Function(const Function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Function::SharedCtor() {
  _cached_size_ = 0;
  entry_address_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Function::~Function() {
  SharedDtor();
}

void Function::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Function* Function::default_instance_ = NULL;

Function* Function::New() const {
  return new Function;
}

void Function::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    entry_address_ = GOOGLE_LONGLONG(0);
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Block blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blocks;
        if (input->ExpectTag(16)) goto parse_entry_address;
        break;
      }

      // required int64 entry_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entry_address_)));
          set_has_entry_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Block blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocks(i), output);
  }

  // required int64 entry_address = 2;
  if (has_entry_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->entry_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Block blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocks(i), target);
  }

  // required int64 entry_address = 2;
  if (has_entry_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->entry_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Function::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 entry_address = 2;
    if (has_entry_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entry_address());
    }

  }
  // repeated .Block blocks = 1;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_entry_address()) {
      set_entry_address(from.entry_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void Function::Swap(Function* other) {
  if (other != this) {
    blocks_.Swap(&other->blocks_);
    std::swap(entry_address_, other->entry_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ExternalFunction_CallingConvention_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalFunction_CallingConvention_descriptor_;
}
bool ExternalFunction_CallingConvention_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ExternalFunction_CallingConvention ExternalFunction::CallerCleanup;
const ExternalFunction_CallingConvention ExternalFunction::CalleeCleanup;
const ExternalFunction_CallingConvention ExternalFunction::FastCall;
const ExternalFunction_CallingConvention ExternalFunction::CallingConvention_MIN;
const ExternalFunction_CallingConvention ExternalFunction::CallingConvention_MAX;
const int ExternalFunction::CallingConvention_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ExternalFunction::kSymbolNameFieldNumber;
const int ExternalFunction::kCallingConventionFieldNumber;
const int ExternalFunction::kHasReturnFieldNumber;
const int ExternalFunction::kNoReturnFieldNumber;
const int ExternalFunction::kArgumentCountFieldNumber;
const int ExternalFunction::kSignatureFieldNumber;
#endif  // !_MSC_VER

ExternalFunction::ExternalFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalFunction::InitAsDefaultInstance() {
}

ExternalFunction::ExternalFunction(const ExternalFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalFunction::SharedCtor() {
  _cached_size_ = 0;
  symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  calling_convention_ = 0;
  has_return_ = false;
  no_return_ = false;
  argument_count_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalFunction::~ExternalFunction() {
  SharedDtor();
}

void ExternalFunction::SharedDtor() {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_name_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void ExternalFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalFunction_descriptor_;
}

const ExternalFunction& ExternalFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

ExternalFunction* ExternalFunction::default_instance_ = NULL;

ExternalFunction* ExternalFunction::New() const {
  return new ExternalFunction;
}

void ExternalFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol_name()) {
      if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
        symbol_name_->clear();
      }
    }
    calling_convention_ = 0;
    has_return_ = false;
    no_return_ = false;
    argument_count_ = 0;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol_name().data(), this->symbol_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_calling_convention;
        break;
      }

      // required .ExternalFunction.CallingConvention calling_convention = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calling_convention:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExternalFunction_CallingConvention_IsValid(value)) {
            set_calling_convention(static_cast< ::ExternalFunction_CallingConvention >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_has_return;
        break;
      }

      // required bool has_return = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_return_)));
          set_has_has_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_no_return;
        break;
      }

      // required bool no_return = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_return_)));
          set_has_no_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_argument_count;
        break;
      }

      // required int32 argument_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_argument_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argument_count_)));
          set_has_argument_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_signature;
        break;
      }

      // optional string signature = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol_name = 1;
  if (has_symbol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol_name().data(), this->symbol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol_name(), output);
  }

  // required .ExternalFunction.CallingConvention calling_convention = 2;
  if (has_calling_convention()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->calling_convention(), output);
  }

  // required bool has_return = 3;
  if (has_has_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->has_return(), output);
  }

  // required bool no_return = 4;
  if (has_no_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->no_return(), output);
  }

  // required int32 argument_count = 5;
  if (has_argument_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->argument_count(), output);
  }

  // optional string signature = 6;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol_name = 1;
  if (has_symbol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol_name().data(), this->symbol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol_name(), target);
  }

  // required .ExternalFunction.CallingConvention calling_convention = 2;
  if (has_calling_convention()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->calling_convention(), target);
  }

  // required bool has_return = 3;
  if (has_has_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->has_return(), target);
  }

  // required bool no_return = 4;
  if (has_no_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->no_return(), target);
  }

  // required int32 argument_count = 5;
  if (has_argument_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->argument_count(), target);
  }

  // optional string signature = 6;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol_name = 1;
    if (has_symbol_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol_name());
    }

    // required .ExternalFunction.CallingConvention calling_convention = 2;
    if (has_calling_convention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->calling_convention());
    }

    // required bool has_return = 3;
    if (has_has_return()) {
      total_size += 1 + 1;
    }

    // required bool no_return = 4;
    if (has_no_return()) {
      total_size += 1 + 1;
    }

    // required int32 argument_count = 5;
    if (has_argument_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->argument_count());
    }

    // optional string signature = 6;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalFunction::MergeFrom(const ExternalFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol_name()) {
      set_symbol_name(from.symbol_name());
    }
    if (from.has_calling_convention()) {
      set_calling_convention(from.calling_convention());
    }
    if (from.has_has_return()) {
      set_has_return(from.has_return());
    }
    if (from.has_no_return()) {
      set_no_return(from.no_return());
    }
    if (from.has_argument_count()) {
      set_argument_count(from.argument_count());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalFunction::CopyFrom(const ExternalFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalFunction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ExternalFunction::Swap(ExternalFunction* other) {
  if (other != this) {
    std::swap(symbol_name_, other->symbol_name_);
    std::swap(calling_convention_, other->calling_convention_);
    std::swap(has_return_, other->has_return_);
    std::swap(no_return_, other->no_return_);
    std::swap(argument_count_, other->argument_count_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalFunction_descriptor_;
  metadata.reflection = ExternalFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExternalData::kSymbolNameFieldNumber;
const int ExternalData::kDataSizeFieldNumber;
#endif  // !_MSC_VER

ExternalData::ExternalData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalData::InitAsDefaultInstance() {
}

ExternalData::ExternalData(const ExternalData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalData::SharedCtor() {
  _cached_size_ = 0;
  symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalData::~ExternalData() {
  SharedDtor();
}

void ExternalData::SharedDtor() {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_name_;
  }
  if (this != default_instance_) {
  }
}

void ExternalData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalData_descriptor_;
}

const ExternalData& ExternalData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

ExternalData* ExternalData::default_instance_ = NULL;

ExternalData* ExternalData::New() const {
  return new ExternalData;
}

void ExternalData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol_name()) {
      if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
        symbol_name_->clear();
      }
    }
    data_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol_name().data(), this->symbol_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_size;
        break;
      }

      // required int32 data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol_name = 1;
  if (has_symbol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol_name().data(), this->symbol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol_name(), output);
  }

  // required int32 data_size = 2;
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol_name = 1;
  if (has_symbol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol_name().data(), this->symbol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol_name(), target);
  }

  // required int32 data_size = 2;
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol_name = 1;
    if (has_symbol_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol_name());
    }

    // required int32 data_size = 2;
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalData::MergeFrom(const ExternalData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol_name()) {
      set_symbol_name(from.symbol_name());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalData::CopyFrom(const ExternalData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExternalData::Swap(ExternalData* other) {
  if (other != this) {
    std::swap(symbol_name_, other->symbol_name_);
    std::swap(data_size_, other->data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalData_descriptor_;
  metadata.reflection = ExternalData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataSymbol::kBaseAddressFieldNumber;
const int DataSymbol::kSymbolNameFieldNumber;
const int DataSymbol::kSymbolSizeFieldNumber;
#endif  // !_MSC_VER

DataSymbol::DataSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataSymbol::InitAsDefaultInstance() {
}

DataSymbol::DataSymbol(const DataSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataSymbol::SharedCtor() {
  _cached_size_ = 0;
  base_address_ = GOOGLE_LONGLONG(0);
  symbol_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataSymbol::~DataSymbol() {
  SharedDtor();
}

void DataSymbol::SharedDtor() {
  if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_name_;
  }
  if (this != default_instance_) {
  }
}

void DataSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataSymbol_descriptor_;
}

const DataSymbol& DataSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

DataSymbol* DataSymbol::default_instance_ = NULL;

DataSymbol* DataSymbol::New() const {
  return new DataSymbol;
}

void DataSymbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_address_ = GOOGLE_LONGLONG(0);
    if (has_symbol_name()) {
      if (symbol_name_ != &::google::protobuf::internal::kEmptyString) {
        symbol_name_->clear();
      }
    }
    symbol_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 base_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_address_)));
          set_has_base_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol_name;
        break;
      }

      // required string symbol_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol_name().data(), this->symbol_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_symbol_size;
        break;
      }

      // required int32 symbol_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symbol_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbol_size_)));
          set_has_symbol_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 base_address = 1;
  if (has_base_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->base_address(), output);
  }

  // required string symbol_name = 2;
  if (has_symbol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol_name().data(), this->symbol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol_name(), output);
  }

  // required int32 symbol_size = 3;
  if (has_symbol_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->symbol_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 base_address = 1;
  if (has_base_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->base_address(), target);
  }

  // required string symbol_name = 2;
  if (has_symbol_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol_name().data(), this->symbol_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol_name(), target);
  }

  // required int32 symbol_size = 3;
  if (has_symbol_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->symbol_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataSymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 base_address = 1;
    if (has_base_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_address());
    }

    // required string symbol_name = 2;
    if (has_symbol_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol_name());
    }

    // required int32 symbol_size = 3;
    if (has_symbol_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symbol_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataSymbol::MergeFrom(const DataSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_address()) {
      set_base_address(from.base_address());
    }
    if (from.has_symbol_name()) {
      set_symbol_name(from.symbol_name());
    }
    if (from.has_symbol_size()) {
      set_symbol_size(from.symbol_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSymbol::CopyFrom(const DataSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSymbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DataSymbol::Swap(DataSymbol* other) {
  if (other != this) {
    std::swap(base_address_, other->base_address_);
    std::swap(symbol_name_, other->symbol_name_);
    std::swap(symbol_size_, other->symbol_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataSymbol_descriptor_;
  metadata.reflection = DataSymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kBaseAddressFieldNumber;
const int Data::kDataFieldNumber;
const int Data::kSymbolsFieldNumber;
const int Data::kReadOnlyFieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  base_address_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  read_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_address_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    read_only_ = false;
  }
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 base_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &base_address_)));
          set_has_base_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbols;
        break;
      }

      // repeated .DataSymbol symbols = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbols;
        if (input->ExpectTag(32)) goto parse_read_only;
        break;
      }

      // required bool read_only = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
          set_has_read_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 base_address = 1;
  if (has_base_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->base_address(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  // repeated .DataSymbol symbols = 3;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->symbols(i), output);
  }

  // required bool read_only = 4;
  if (has_read_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 base_address = 1;
  if (has_base_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->base_address(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // repeated .DataSymbol symbols = 3;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->symbols(i), target);
  }

  // required bool read_only = 4;
  if (has_read_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 base_address = 1;
    if (has_base_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->base_address());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bool read_only = 4;
    if (has_read_only()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DataSymbol symbols = 3;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_address()) {
      set_base_address(from.base_address());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_read_only()) {
      set_read_only(from.read_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < symbols_size(); i++) {
    if (!this->symbols(i).IsInitialized()) return false;
  }
  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(base_address_, other->base_address_);
    std::swap(data_, other->data_);
    symbols_.Swap(&other->symbols_);
    std::swap(read_only_, other->read_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntrySymbolExtra::kEntryArgcFieldNumber;
const int EntrySymbolExtra::kEntryCconvFieldNumber;
const int EntrySymbolExtra::kDoesReturnFieldNumber;
#endif  // !_MSC_VER

EntrySymbolExtra::EntrySymbolExtra()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntrySymbolExtra::InitAsDefaultInstance() {
}

EntrySymbolExtra::EntrySymbolExtra(const EntrySymbolExtra& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntrySymbolExtra::SharedCtor() {
  _cached_size_ = 0;
  entry_argc_ = 0;
  entry_cconv_ = 0;
  does_return_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntrySymbolExtra::~EntrySymbolExtra() {
  SharedDtor();
}

void EntrySymbolExtra::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntrySymbolExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntrySymbolExtra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntrySymbolExtra_descriptor_;
}

const EntrySymbolExtra& EntrySymbolExtra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

EntrySymbolExtra* EntrySymbolExtra::default_instance_ = NULL;

EntrySymbolExtra* EntrySymbolExtra::New() const {
  return new EntrySymbolExtra;
}

void EntrySymbolExtra::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entry_argc_ = 0;
    entry_cconv_ = 0;
    does_return_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntrySymbolExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entry_argc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entry_argc_)));
          set_has_entry_argc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entry_cconv;
        break;
      }

      // required .ExternalFunction.CallingConvention entry_cconv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_cconv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ExternalFunction_CallingConvention_IsValid(value)) {
            set_entry_cconv(static_cast< ::ExternalFunction_CallingConvention >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_does_return;
        break;
      }

      // required bool does_return = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_does_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &does_return_)));
          set_has_does_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntrySymbolExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 entry_argc = 1;
  if (has_entry_argc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entry_argc(), output);
  }

  // required .ExternalFunction.CallingConvention entry_cconv = 2;
  if (has_entry_cconv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->entry_cconv(), output);
  }

  // required bool does_return = 3;
  if (has_does_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->does_return(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntrySymbolExtra::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 entry_argc = 1;
  if (has_entry_argc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entry_argc(), target);
  }

  // required .ExternalFunction.CallingConvention entry_cconv = 2;
  if (has_entry_cconv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->entry_cconv(), target);
  }

  // required bool does_return = 3;
  if (has_does_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->does_return(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntrySymbolExtra::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entry_argc = 1;
    if (has_entry_argc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entry_argc());
    }

    // required .ExternalFunction.CallingConvention entry_cconv = 2;
    if (has_entry_cconv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_cconv());
    }

    // required bool does_return = 3;
    if (has_does_return()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntrySymbolExtra::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntrySymbolExtra* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntrySymbolExtra*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntrySymbolExtra::MergeFrom(const EntrySymbolExtra& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_argc()) {
      set_entry_argc(from.entry_argc());
    }
    if (from.has_entry_cconv()) {
      set_entry_cconv(from.entry_cconv());
    }
    if (from.has_does_return()) {
      set_does_return(from.does_return());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntrySymbolExtra::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntrySymbolExtra::CopyFrom(const EntrySymbolExtra& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntrySymbolExtra::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EntrySymbolExtra::Swap(EntrySymbolExtra* other) {
  if (other != this) {
    std::swap(entry_argc_, other->entry_argc_);
    std::swap(entry_cconv_, other->entry_cconv_);
    std::swap(does_return_, other->does_return_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntrySymbolExtra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntrySymbolExtra_descriptor_;
  metadata.reflection = EntrySymbolExtra_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntrySymbol::kEntryNameFieldNumber;
const int EntrySymbol::kEntryAddressFieldNumber;
const int EntrySymbol::kEntryExtraFieldNumber;
#endif  // !_MSC_VER

EntrySymbol::EntrySymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntrySymbol::InitAsDefaultInstance() {
  entry_extra_ = const_cast< ::EntrySymbolExtra*>(&::EntrySymbolExtra::default_instance());
}

EntrySymbol::EntrySymbol(const EntrySymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntrySymbol::SharedCtor() {
  _cached_size_ = 0;
  entry_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_address_ = GOOGLE_LONGLONG(0);
  entry_extra_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntrySymbol::~EntrySymbol() {
  SharedDtor();
}

void EntrySymbol::SharedDtor() {
  if (entry_name_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_name_;
  }
  if (this != default_instance_) {
    delete entry_extra_;
  }
}

void EntrySymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntrySymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntrySymbol_descriptor_;
}

const EntrySymbol& EntrySymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

EntrySymbol* EntrySymbol::default_instance_ = NULL;

EntrySymbol* EntrySymbol::New() const {
  return new EntrySymbol;
}

void EntrySymbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entry_name()) {
      if (entry_name_ != &::google::protobuf::internal::kEmptyString) {
        entry_name_->clear();
      }
    }
    entry_address_ = GOOGLE_LONGLONG(0);
    if (has_entry_extra()) {
      if (entry_extra_ != NULL) entry_extra_->::EntrySymbolExtra::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntrySymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string entry_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_name().data(), this->entry_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entry_address;
        break;
      }

      // required int64 entry_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entry_address_)));
          set_has_entry_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entry_extra;
        break;
      }

      // optional .EntrySymbolExtra entry_extra = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntrySymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string entry_name = 1;
  if (has_entry_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_name().data(), this->entry_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entry_name(), output);
  }

  // required int64 entry_address = 2;
  if (has_entry_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->entry_address(), output);
  }

  // optional .EntrySymbolExtra entry_extra = 3;
  if (has_entry_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entry_extra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntrySymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string entry_name = 1;
  if (has_entry_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_name().data(), this->entry_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entry_name(), target);
  }

  // required int64 entry_address = 2;
  if (has_entry_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->entry_address(), target);
  }

  // optional .EntrySymbolExtra entry_extra = 3;
  if (has_entry_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entry_extra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntrySymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string entry_name = 1;
    if (has_entry_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_name());
    }

    // required int64 entry_address = 2;
    if (has_entry_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entry_address());
    }

    // optional .EntrySymbolExtra entry_extra = 3;
    if (has_entry_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry_extra());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntrySymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntrySymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntrySymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntrySymbol::MergeFrom(const EntrySymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_name()) {
      set_entry_name(from.entry_name());
    }
    if (from.has_entry_address()) {
      set_entry_address(from.entry_address());
    }
    if (from.has_entry_extra()) {
      mutable_entry_extra()->::EntrySymbolExtra::MergeFrom(from.entry_extra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntrySymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntrySymbol::CopyFrom(const EntrySymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntrySymbol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_entry_extra()) {
    if (!this->entry_extra().IsInitialized()) return false;
  }
  return true;
}

void EntrySymbol::Swap(EntrySymbol* other) {
  if (other != this) {
    std::swap(entry_name_, other->entry_name_);
    std::swap(entry_address_, other->entry_address_);
    std::swap(entry_extra_, other->entry_extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntrySymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntrySymbol_descriptor_;
  metadata.reflection = EntrySymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Module::kInternalFuncsFieldNumber;
const int Module::kExternalFuncsFieldNumber;
const int Module::kInternalDataFieldNumber;
const int Module::kModuleNameFieldNumber;
const int Module::kEntriesFieldNumber;
const int Module::kExternalDataFieldNumber;
#endif  // !_MSC_VER

Module::Module()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Module::InitAsDefaultInstance() {
}

Module::Module(const Module& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Module::SharedCtor() {
  _cached_size_ = 0;
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Module::~Module() {
  SharedDtor();
}

void Module::SharedDtor() {
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (this != default_instance_) {
  }
}

void Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Module::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Module_descriptor_;
}

const Module& Module::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Module* Module::default_instance_ = NULL;

Module* Module::New() const {
  return new Module;
}

void Module::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
  }
  internal_funcs_.Clear();
  external_funcs_.Clear();
  internal_data_.Clear();
  entries_.Clear();
  external_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Function internal_funcs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_funcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internal_funcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_internal_funcs;
        if (input->ExpectTag(18)) goto parse_external_funcs;
        break;
      }

      // repeated .ExternalFunction external_funcs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_funcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_external_funcs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_external_funcs;
        if (input->ExpectTag(26)) goto parse_internal_data;
        break;
      }

      // repeated .Data internal_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_internal_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_internal_data;
        if (input->ExpectTag(34)) goto parse_module_name;
        break;
      }

      // required string module_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        break;
      }

      // repeated .EntrySymbol entries = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_entries;
        if (input->ExpectTag(50)) goto parse_external_data;
        break;
      }

      // repeated .ExternalData external_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_external_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_external_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Function internal_funcs = 1;
  for (int i = 0; i < this->internal_funcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->internal_funcs(i), output);
  }

  // repeated .ExternalFunction external_funcs = 2;
  for (int i = 0; i < this->external_funcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->external_funcs(i), output);
  }

  // repeated .Data internal_data = 3;
  for (int i = 0; i < this->internal_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->internal_data(i), output);
  }

  // required string module_name = 4;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->module_name(), output);
  }

  // repeated .EntrySymbol entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->entries(i), output);
  }

  // repeated .ExternalData external_data = 6;
  for (int i = 0; i < this->external_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->external_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Module::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Function internal_funcs = 1;
  for (int i = 0; i < this->internal_funcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->internal_funcs(i), target);
  }

  // repeated .ExternalFunction external_funcs = 2;
  for (int i = 0; i < this->external_funcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->external_funcs(i), target);
  }

  // repeated .Data internal_data = 3;
  for (int i = 0; i < this->internal_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->internal_data(i), target);
  }

  // required string module_name = 4;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->module_name(), target);
  }

  // repeated .EntrySymbol entries = 5;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->entries(i), target);
  }

  // repeated .ExternalData external_data = 6;
  for (int i = 0; i < this->external_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->external_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Module::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required string module_name = 4;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

  }
  // repeated .Function internal_funcs = 1;
  total_size += 1 * this->internal_funcs_size();
  for (int i = 0; i < this->internal_funcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_funcs(i));
  }

  // repeated .ExternalFunction external_funcs = 2;
  total_size += 1 * this->external_funcs_size();
  for (int i = 0; i < this->external_funcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->external_funcs(i));
  }

  // repeated .Data internal_data = 3;
  total_size += 1 * this->internal_data_size();
  for (int i = 0; i < this->internal_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->internal_data(i));
  }

  // repeated .EntrySymbol entries = 5;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  // repeated .ExternalData external_data = 6;
  total_size += 1 * this->external_data_size();
  for (int i = 0; i < this->external_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->external_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Module::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Module* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Module*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Module::MergeFrom(const Module& from) {
  GOOGLE_CHECK_NE(&from, this);
  internal_funcs_.MergeFrom(from.internal_funcs_);
  external_funcs_.MergeFrom(from.external_funcs_);
  internal_data_.MergeFrom(from.internal_data_);
  entries_.MergeFrom(from.entries_);
  external_data_.MergeFrom(from.external_data_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Module::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Module::CopyFrom(const Module& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Module::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  for (int i = 0; i < internal_funcs_size(); i++) {
    if (!this->internal_funcs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < external_funcs_size(); i++) {
    if (!this->external_funcs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < internal_data_size(); i++) {
    if (!this->internal_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < external_data_size(); i++) {
    if (!this->external_data(i).IsInitialized()) return false;
  }
  return true;
}

void Module::Swap(Module* other) {
  if (other != this) {
    internal_funcs_.Swap(&other->internal_funcs_);
    external_funcs_.Swap(&other->external_funcs_);
    internal_data_.Swap(&other->internal_data_);
    std::swap(module_name_, other->module_name_);
    entries_.Swap(&other->entries_);
    external_data_.Swap(&other->external_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Module::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Module_descriptor_;
  metadata.reflection = Module_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Edge_64_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_64_Kind_descriptor_;
}
bool Edge_64_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Edge_64_Kind Edge_64::Unknown;
const Edge_64_Kind Edge_64::May;
const Edge_64_Kind Edge_64::Must;
const Edge_64_Kind Edge_64::Kind_MIN;
const Edge_64_Kind Edge_64::Kind_MAX;
const int Edge_64::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Edge_64::kValueFieldNumber;
const int Edge_64::kKindFieldNumber;
const int Edge_64::kLabelFieldNumber;
#endif  // !_MSC_VER

Edge_64::Edge_64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge_64::InitAsDefaultInstance() {
}

Edge_64::Edge_64(const Edge_64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge_64::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  kind_ = 0;
  label_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge_64::~Edge_64() {
  SharedDtor();
}

void Edge_64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Edge_64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge_64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_64_descriptor_;
}

const Edge_64& Edge_64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Edge_64* Edge_64::default_instance_ = NULL;

Edge_64* Edge_64::New() const {
  return new Edge_64;
}

void Edge_64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = GOOGLE_LONGLONG(0);
    kind_ = 0;
    label_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge_64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required .Edge_64.Kind kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Edge_64_Kind_IsValid(value)) {
            set_kind(static_cast< ::Edge_64_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_label;
        break;
      }

      // optional bool label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge_64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  // required .Edge_64.Kind kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // optional bool label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge_64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  // required .Edge_64.Kind kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // optional bool label = 3;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge_64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // required .Edge_64.Kind kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional bool label = 3;
    if (has_label()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge_64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge_64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge_64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge_64::MergeFrom(const Edge_64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge_64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge_64::CopyFrom(const Edge_64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge_64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Edge_64::Swap(Edge_64* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(kind_, other->kind_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge_64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_64_descriptor_;
  metadata.reflection = Edge_64_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Edge_32_Kind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_32_Kind_descriptor_;
}
bool Edge_32_Kind_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Edge_32_Kind Edge_32::Unknown;
const Edge_32_Kind Edge_32::May;
const Edge_32_Kind Edge_32::Must;
const Edge_32_Kind Edge_32::Kind_MIN;
const Edge_32_Kind Edge_32::Kind_MAX;
const int Edge_32::Kind_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Edge_32::kValueFieldNumber;
const int Edge_32::kKindFieldNumber;
const int Edge_32::kLabelFieldNumber;
#endif  // !_MSC_VER

Edge_32::Edge_32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge_32::InitAsDefaultInstance() {
}

Edge_32::Edge_32(const Edge_32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge_32::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  kind_ = 0;
  label_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge_32::~Edge_32() {
  SharedDtor();
}

void Edge_32::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Edge_32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge_32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_32_descriptor_;
}

const Edge_32& Edge_32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Edge_32* Edge_32::default_instance_ = NULL;

Edge_32* Edge_32::New() const {
  return new Edge_32;
}

void Edge_32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    kind_ = 0;
    label_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge_32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kind;
        break;
      }

      // required .Edge_32.Kind kind = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Edge_32_Kind_IsValid(value)) {
            set_kind(static_cast< ::Edge_32_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_label;
        break;
      }

      // optional bool label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge_32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  // required .Edge_32.Kind kind = 2;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // optional bool label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge_32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  // required .Edge_32.Kind kind = 2;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // optional bool label = 3;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge_32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // required .Edge_32.Kind kind = 2;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional bool label = 3;
    if (has_label()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge_32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge_32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge_32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge_32::MergeFrom(const Edge_32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge_32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge_32::CopyFrom(const Edge_32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge_32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Edge_32::Swap(Edge_32* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(kind_, other->kind_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge_32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_32_descriptor_;
  metadata.reflection = Edge_32_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Annotated_Branch_Instruction_Branch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Branch_Instruction_Branch_descriptor_;
}
bool Annotated_Branch_Instruction_Branch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::Unknown;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jmp;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::ljmp;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jo;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jno;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jb;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jae;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::je;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jne;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jbe;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::ja;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::js;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jns;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jp;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jnp;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jl;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jge;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jle;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jg;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::loopne;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::loope;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::loop;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::jCcxz;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::ret;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::call;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::Branch_MIN;
const Annotated_Branch_Instruction_Branch Annotated_Branch_Instruction::Branch_MAX;
const int Annotated_Branch_Instruction::Branch_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Annotated_Branch_Instruction::kBranchInstrNameFieldNumber;
const int Annotated_Branch_Instruction::kIsResolvedFieldNumber;
const int Annotated_Branch_Instruction::kIsIndirectFieldNumber;
const int Annotated_Branch_Instruction::kIsConditionalFieldNumber;
const int Annotated_Branch_Instruction::kIsLeafFieldNumber;
const int Annotated_Branch_Instruction::kTargetToFieldNumber;
const int Annotated_Branch_Instruction::kInstrFieldNumber;
const int Annotated_Branch_Instruction::kAbstractExpressionFieldNumber;
#endif  // !_MSC_VER

Annotated_Branch_Instruction::Annotated_Branch_Instruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Branch_Instruction::InitAsDefaultInstance() {
  instr_ = const_cast< ::Annotated_Instruction*>(&::Annotated_Instruction::default_instance());
}

Annotated_Branch_Instruction::Annotated_Branch_Instruction(const Annotated_Branch_Instruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Branch_Instruction::SharedCtor() {
  _cached_size_ = 0;
  branch_instr_name_ = 0;
  is_resolved_ = false;
  is_indirect_ = false;
  is_conditional_ = false;
  is_leaf_ = false;
  instr_ = NULL;
  abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Branch_Instruction::~Annotated_Branch_Instruction() {
  SharedDtor();
}

void Annotated_Branch_Instruction::SharedDtor() {
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    delete abstract_expression_;
  }
  if (this != default_instance_) {
    delete instr_;
  }
}

void Annotated_Branch_Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Branch_Instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Branch_Instruction_descriptor_;
}

const Annotated_Branch_Instruction& Annotated_Branch_Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Branch_Instruction* Annotated_Branch_Instruction::default_instance_ = NULL;

Annotated_Branch_Instruction* Annotated_Branch_Instruction::New() const {
  return new Annotated_Branch_Instruction;
}

void Annotated_Branch_Instruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    branch_instr_name_ = 0;
    is_resolved_ = false;
    is_indirect_ = false;
    is_conditional_ = false;
    is_leaf_ = false;
    if (has_instr()) {
      if (instr_ != NULL) instr_->::Annotated_Instruction::Clear();
    }
    if (has_abstract_expression()) {
      if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
        abstract_expression_->clear();
      }
    }
  }
  target_to_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Branch_Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Annotated_Branch_Instruction.Branch branch_instr_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Annotated_Branch_Instruction_Branch_IsValid(value)) {
            set_branch_instr_name(static_cast< ::Annotated_Branch_Instruction_Branch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_resolved;
        break;
      }

      // required bool is_resolved = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_resolved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_resolved_)));
          set_has_is_resolved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_indirect;
        break;
      }

      // required bool is_indirect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_indirect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_indirect_)));
          set_has_is_indirect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_conditional;
        break;
      }

      // required bool is_conditional = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_conditional:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_conditional_)));
          set_has_is_conditional();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_leaf;
        break;
      }

      // required bool is_leaf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_leaf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leaf_)));
          set_has_is_leaf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target_to;
        break;
      }

      // repeated .Edge_64 target_to = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_to()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target_to;
        if (input->ExpectTag(58)) goto parse_instr;
        break;
      }

      // required .Annotated_Instruction instr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_abstract_expression;
        break;
      }

      // optional string abstract_expression = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abstract_expression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract_expression()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abstract_expression().data(), this->abstract_expression().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Branch_Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Annotated_Branch_Instruction.Branch branch_instr_name = 1;
  if (has_branch_instr_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->branch_instr_name(), output);
  }

  // required bool is_resolved = 2;
  if (has_is_resolved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_resolved(), output);
  }

  // required bool is_indirect = 3;
  if (has_is_indirect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_indirect(), output);
  }

  // required bool is_conditional = 4;
  if (has_is_conditional()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_conditional(), output);
  }

  // required bool is_leaf = 5;
  if (has_is_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_leaf(), output);
  }

  // repeated .Edge_64 target_to = 6;
  for (int i = 0; i < this->target_to_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->target_to(i), output);
  }

  // required .Annotated_Instruction instr = 7;
  if (has_instr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->instr(), output);
  }

  // optional string abstract_expression = 8;
  if (has_abstract_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abstract_expression().data(), this->abstract_expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->abstract_expression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Branch_Instruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Annotated_Branch_Instruction.Branch branch_instr_name = 1;
  if (has_branch_instr_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->branch_instr_name(), target);
  }

  // required bool is_resolved = 2;
  if (has_is_resolved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_resolved(), target);
  }

  // required bool is_indirect = 3;
  if (has_is_indirect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_indirect(), target);
  }

  // required bool is_conditional = 4;
  if (has_is_conditional()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_conditional(), target);
  }

  // required bool is_leaf = 5;
  if (has_is_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_leaf(), target);
  }

  // repeated .Edge_64 target_to = 6;
  for (int i = 0; i < this->target_to_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->target_to(i), target);
  }

  // required .Annotated_Instruction instr = 7;
  if (has_instr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->instr(), target);
  }

  // optional string abstract_expression = 8;
  if (has_abstract_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abstract_expression().data(), this->abstract_expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->abstract_expression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Branch_Instruction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Annotated_Branch_Instruction.Branch branch_instr_name = 1;
    if (has_branch_instr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->branch_instr_name());
    }

    // required bool is_resolved = 2;
    if (has_is_resolved()) {
      total_size += 1 + 1;
    }

    // required bool is_indirect = 3;
    if (has_is_indirect()) {
      total_size += 1 + 1;
    }

    // required bool is_conditional = 4;
    if (has_is_conditional()) {
      total_size += 1 + 1;
    }

    // required bool is_leaf = 5;
    if (has_is_leaf()) {
      total_size += 1 + 1;
    }

    // required .Annotated_Instruction instr = 7;
    if (has_instr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instr());
    }

    // optional string abstract_expression = 8;
    if (has_abstract_expression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abstract_expression());
    }

  }
  // repeated .Edge_64 target_to = 6;
  total_size += 1 * this->target_to_size();
  for (int i = 0; i < this->target_to_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_to(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Branch_Instruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Branch_Instruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Branch_Instruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Branch_Instruction::MergeFrom(const Annotated_Branch_Instruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_to_.MergeFrom(from.target_to_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branch_instr_name()) {
      set_branch_instr_name(from.branch_instr_name());
    }
    if (from.has_is_resolved()) {
      set_is_resolved(from.is_resolved());
    }
    if (from.has_is_indirect()) {
      set_is_indirect(from.is_indirect());
    }
    if (from.has_is_conditional()) {
      set_is_conditional(from.is_conditional());
    }
    if (from.has_is_leaf()) {
      set_is_leaf(from.is_leaf());
    }
    if (from.has_instr()) {
      mutable_instr()->::Annotated_Instruction::MergeFrom(from.instr());
    }
    if (from.has_abstract_expression()) {
      set_abstract_expression(from.abstract_expression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Branch_Instruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Branch_Instruction::CopyFrom(const Annotated_Branch_Instruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Branch_Instruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  for (int i = 0; i < target_to_size(); i++) {
    if (!this->target_to(i).IsInitialized()) return false;
  }
  if (has_instr()) {
    if (!this->instr().IsInitialized()) return false;
  }
  return true;
}

void Annotated_Branch_Instruction::Swap(Annotated_Branch_Instruction* other) {
  if (other != this) {
    std::swap(branch_instr_name_, other->branch_instr_name_);
    std::swap(is_resolved_, other->is_resolved_);
    std::swap(is_indirect_, other->is_indirect_);
    std::swap(is_conditional_, other->is_conditional_);
    std::swap(is_leaf_, other->is_leaf_);
    target_to_.Swap(&other->target_to_);
    std::swap(instr_, other->instr_);
    std::swap(abstract_expression_, other->abstract_expression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Branch_Instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Branch_Instruction_descriptor_;
  metadata.reflection = Annotated_Branch_Instruction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Annotated_Instruction_Operand_Operand_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Instruction_Operand_Operand_Type_descriptor_;
}
bool Annotated_Instruction_Operand_Operand_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Unknown;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Immediate;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Register;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Memory;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Address;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Operand_Type_MIN;
const Annotated_Instruction_Operand_Operand_Type Annotated_Instruction_Operand::Operand_Type_MAX;
const int Annotated_Instruction_Operand::Operand_Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Annotated_Instruction_Operand::kPosFieldNumber;
const int Annotated_Instruction_Operand::kTypeFieldNumber;
const int Annotated_Instruction_Operand::kValueFieldNumber;
#endif  // !_MSC_VER

Annotated_Instruction_Operand::Annotated_Instruction_Operand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Instruction_Operand::InitAsDefaultInstance() {
}

Annotated_Instruction_Operand::Annotated_Instruction_Operand(const Annotated_Instruction_Operand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Instruction_Operand::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  type_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Instruction_Operand::~Annotated_Instruction_Operand() {
  SharedDtor();
}

void Annotated_Instruction_Operand::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Annotated_Instruction_Operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Instruction_Operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Instruction_Operand_descriptor_;
}

const Annotated_Instruction_Operand& Annotated_Instruction_Operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Instruction_Operand* Annotated_Instruction_Operand::default_instance_ = NULL;

Annotated_Instruction_Operand* Annotated_Instruction_Operand::New() const {
  return new Annotated_Instruction_Operand;
}

void Annotated_Instruction_Operand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    type_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Instruction_Operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Annotated_Instruction.Operand.Operand_Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Annotated_Instruction_Operand_Operand_Type_IsValid(value)) {
            set_type(static_cast< ::Annotated_Instruction_Operand_Operand_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Instruction_Operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required .Annotated_Instruction.Operand.Operand_Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Instruction_Operand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required .Annotated_Instruction.Operand.Operand_Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Instruction_Operand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required .Annotated_Instruction.Operand.Operand_Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Instruction_Operand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Instruction_Operand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Instruction_Operand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Instruction_Operand::MergeFrom(const Annotated_Instruction_Operand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Instruction_Operand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Instruction_Operand::CopyFrom(const Annotated_Instruction_Operand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Instruction_Operand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Annotated_Instruction_Operand::Swap(Annotated_Instruction_Operand* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Instruction_Operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Instruction_Operand_descriptor_;
  metadata.reflection = Annotated_Instruction_Operand_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Annotated_Instruction::kInstrNameFieldNumber;
const int Annotated_Instruction::kInstrStringFieldNumber;
const int Annotated_Instruction::kInstAddrFieldNumber;
const int Annotated_Instruction::kInstLenFieldNumber;
const int Annotated_Instruction::kOpCountFieldNumber;
const int Annotated_Instruction::kInstAddrHexFieldNumber;
const int Annotated_Instruction::kIsBranchInstructionFieldNumber;
const int Annotated_Instruction::kArgumentFieldNumber;
const int Annotated_Instruction::kRefereredFromFieldNumber;
#endif  // !_MSC_VER

Annotated_Instruction::Annotated_Instruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Instruction::InitAsDefaultInstance() {
}

Annotated_Instruction::Annotated_Instruction(const Annotated_Instruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Instruction::SharedCtor() {
  _cached_size_ = 0;
  instr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instr_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inst_addr_ = GOOGLE_LONGLONG(0);
  inst_len_ = 0;
  op_count_ = 0;
  inst_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_branch_instruction_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Instruction::~Annotated_Instruction() {
  SharedDtor();
}

void Annotated_Instruction::SharedDtor() {
  if (instr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete instr_name_;
  }
  if (instr_string_ != &::google::protobuf::internal::kEmptyString) {
    delete instr_string_;
  }
  if (inst_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete inst_addr_hex_;
  }
  if (this != default_instance_) {
  }
}

void Annotated_Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Instruction_descriptor_;
}

const Annotated_Instruction& Annotated_Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Instruction* Annotated_Instruction::default_instance_ = NULL;

Annotated_Instruction* Annotated_Instruction::New() const {
  return new Annotated_Instruction;
}

void Annotated_Instruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instr_name()) {
      if (instr_name_ != &::google::protobuf::internal::kEmptyString) {
        instr_name_->clear();
      }
    }
    if (has_instr_string()) {
      if (instr_string_ != &::google::protobuf::internal::kEmptyString) {
        instr_string_->clear();
      }
    }
    inst_addr_ = GOOGLE_LONGLONG(0);
    inst_len_ = 0;
    op_count_ = 0;
    if (has_inst_addr_hex()) {
      if (inst_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
        inst_addr_hex_->clear();
      }
    }
    is_branch_instruction_ = false;
  }
  argument_.Clear();
  referered_from_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string instr_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instr_name().data(), this->instr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instr_string;
        break;
      }

      // required string instr_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instr_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instr_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instr_string().data(), this->instr_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inst_addr;
        break;
      }

      // required int64 inst_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inst_addr_)));
          set_has_inst_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inst_len;
        break;
      }

      // required int32 inst_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inst_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inst_len_)));
          set_has_inst_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_op_count;
        break;
      }

      // required int32 op_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_count_)));
          set_has_op_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_inst_addr_hex;
        break;
      }

      // optional string inst_addr_hex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inst_addr_hex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inst_addr_hex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inst_addr_hex().data(), this->inst_addr_hex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_branch_instruction;
        break;
      }

      // required bool is_branch_instruction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_branch_instruction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_branch_instruction_)));
          set_has_is_branch_instruction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_argument;
        break;
      }

      // repeated .Annotated_Instruction.Operand argument = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_argument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_argument;
        if (input->ExpectTag(74)) goto parse_referered_from;
        break;
      }

      // repeated .Edge_64 referered_from = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referered_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_referered_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_referered_from;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string instr_name = 1;
  if (has_instr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_name().data(), this->instr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instr_name(), output);
  }

  // required string instr_string = 2;
  if (has_instr_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_string().data(), this->instr_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instr_string(), output);
  }

  // required int64 inst_addr = 3;
  if (has_inst_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->inst_addr(), output);
  }

  // required int32 inst_len = 4;
  if (has_inst_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->inst_len(), output);
  }

  // required int32 op_count = 5;
  if (has_op_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->op_count(), output);
  }

  // optional string inst_addr_hex = 6;
  if (has_inst_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_addr_hex().data(), this->inst_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->inst_addr_hex(), output);
  }

  // required bool is_branch_instruction = 7;
  if (has_is_branch_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_branch_instruction(), output);
  }

  // repeated .Annotated_Instruction.Operand argument = 8;
  for (int i = 0; i < this->argument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->argument(i), output);
  }

  // repeated .Edge_64 referered_from = 9;
  for (int i = 0; i < this->referered_from_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->referered_from(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Instruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string instr_name = 1;
  if (has_instr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_name().data(), this->instr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instr_name(), target);
  }

  // required string instr_string = 2;
  if (has_instr_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_string().data(), this->instr_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instr_string(), target);
  }

  // required int64 inst_addr = 3;
  if (has_inst_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->inst_addr(), target);
  }

  // required int32 inst_len = 4;
  if (has_inst_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->inst_len(), target);
  }

  // required int32 op_count = 5;
  if (has_op_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->op_count(), target);
  }

  // optional string inst_addr_hex = 6;
  if (has_inst_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inst_addr_hex().data(), this->inst_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inst_addr_hex(), target);
  }

  // required bool is_branch_instruction = 7;
  if (has_is_branch_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_branch_instruction(), target);
  }

  // repeated .Annotated_Instruction.Operand argument = 8;
  for (int i = 0; i < this->argument_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->argument(i), target);
  }

  // repeated .Edge_64 referered_from = 9;
  for (int i = 0; i < this->referered_from_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->referered_from(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Instruction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string instr_name = 1;
    if (has_instr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instr_name());
    }

    // required string instr_string = 2;
    if (has_instr_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instr_string());
    }

    // required int64 inst_addr = 3;
    if (has_inst_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inst_addr());
    }

    // required int32 inst_len = 4;
    if (has_inst_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inst_len());
    }

    // required int32 op_count = 5;
    if (has_op_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_count());
    }

    // optional string inst_addr_hex = 6;
    if (has_inst_addr_hex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inst_addr_hex());
    }

    // required bool is_branch_instruction = 7;
    if (has_is_branch_instruction()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Annotated_Instruction.Operand argument = 8;
  total_size += 1 * this->argument_size();
  for (int i = 0; i < this->argument_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->argument(i));
  }

  // repeated .Edge_64 referered_from = 9;
  total_size += 1 * this->referered_from_size();
  for (int i = 0; i < this->referered_from_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->referered_from(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Instruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Instruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Instruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Instruction::MergeFrom(const Annotated_Instruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  argument_.MergeFrom(from.argument_);
  referered_from_.MergeFrom(from.referered_from_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instr_name()) {
      set_instr_name(from.instr_name());
    }
    if (from.has_instr_string()) {
      set_instr_string(from.instr_string());
    }
    if (from.has_inst_addr()) {
      set_inst_addr(from.inst_addr());
    }
    if (from.has_inst_len()) {
      set_inst_len(from.inst_len());
    }
    if (from.has_op_count()) {
      set_op_count(from.op_count());
    }
    if (from.has_inst_addr_hex()) {
      set_inst_addr_hex(from.inst_addr_hex());
    }
    if (from.has_is_branch_instruction()) {
      set_is_branch_instruction(from.is_branch_instruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Instruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Instruction::CopyFrom(const Annotated_Instruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Instruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  for (int i = 0; i < argument_size(); i++) {
    if (!this->argument(i).IsInitialized()) return false;
  }
  for (int i = 0; i < referered_from_size(); i++) {
    if (!this->referered_from(i).IsInitialized()) return false;
  }
  return true;
}

void Annotated_Instruction::Swap(Annotated_Instruction* other) {
  if (other != this) {
    std::swap(instr_name_, other->instr_name_);
    std::swap(instr_string_, other->instr_string_);
    std::swap(inst_addr_, other->inst_addr_);
    std::swap(inst_len_, other->inst_len_);
    std::swap(op_count_, other->op_count_);
    std::swap(inst_addr_hex_, other->inst_addr_hex_);
    std::swap(is_branch_instruction_, other->is_branch_instruction_);
    argument_.Swap(&other->argument_);
    referered_from_.Swap(&other->referered_from_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Instruction_descriptor_;
  metadata.reflection = Annotated_Instruction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Annotated_Register_32_Register_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Register_32_Register_descriptor_;
}
bool Annotated_Register_32_Register_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Annotated_Register_32_Register Annotated_Register_32::Unknown;
const Annotated_Register_32_Register Annotated_Register_32::eax;
const Annotated_Register_32_Register Annotated_Register_32::ecx;
const Annotated_Register_32_Register Annotated_Register_32::edx;
const Annotated_Register_32_Register Annotated_Register_32::ebx;
const Annotated_Register_32_Register Annotated_Register_32::esp;
const Annotated_Register_32_Register Annotated_Register_32::ebp;
const Annotated_Register_32_Register Annotated_Register_32::esi;
const Annotated_Register_32_Register Annotated_Register_32::edi;
const Annotated_Register_32_Register Annotated_Register_32::eip;
const Annotated_Register_32_Register Annotated_Register_32::fs_base;
const Annotated_Register_32_Register Annotated_Register_32::gs_base;
const Annotated_Register_32_Register Annotated_Register_32::gtd;
const Annotated_Register_32_Register Annotated_Register_32::ldt;
const Annotated_Register_32_Register Annotated_Register_32::mxcsr;
const Annotated_Register_32_Register Annotated_Register_32::Register_MIN;
const Annotated_Register_32_Register Annotated_Register_32::Register_MAX;
const int Annotated_Register_32::Register_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Annotated_Register_32_Property::kUnknownFieldNumber;
const int Annotated_Register_32_Property::kAliveFieldNumber;
#endif  // !_MSC_VER

Annotated_Register_32_Property::Annotated_Register_32_Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Register_32_Property::InitAsDefaultInstance() {
}

Annotated_Register_32_Property::Annotated_Register_32_Property(const Annotated_Register_32_Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Register_32_Property::SharedCtor() {
  _cached_size_ = 0;
  unknown_ = false;
  alive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Register_32_Property::~Annotated_Register_32_Property() {
  SharedDtor();
}

void Annotated_Register_32_Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Annotated_Register_32_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Register_32_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Register_32_Property_descriptor_;
}

const Annotated_Register_32_Property& Annotated_Register_32_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Register_32_Property* Annotated_Register_32_Property::default_instance_ = NULL;

Annotated_Register_32_Property* Annotated_Register_32_Property::New() const {
  return new Annotated_Register_32_Property;
}

void Annotated_Register_32_Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unknown_ = false;
    alive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Register_32_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Unknown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unknown_)));
          set_has_unknown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Alive;
        break;
      }

      // optional bool Alive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
          set_has_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Register_32_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool Unknown = 1;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->unknown(), output);
  }

  // optional bool Alive = 2;
  if (has_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->alive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Register_32_Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool Unknown = 1;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->unknown(), target);
  }

  // optional bool Alive = 2;
  if (has_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->alive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Register_32_Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Unknown = 1;
    if (has_unknown()) {
      total_size += 1 + 1;
    }

    // optional bool Alive = 2;
    if (has_alive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Register_32_Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Register_32_Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Register_32_Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Register_32_Property::MergeFrom(const Annotated_Register_32_Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown()) {
      set_unknown(from.unknown());
    }
    if (from.has_alive()) {
      set_alive(from.alive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Register_32_Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Register_32_Property::CopyFrom(const Annotated_Register_32_Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Register_32_Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Annotated_Register_32_Property::Swap(Annotated_Register_32_Property* other) {
  if (other != this) {
    std::swap(unknown_, other->unknown_);
    std::swap(alive_, other->alive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Register_32_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Register_32_Property_descriptor_;
  metadata.reflection = Annotated_Register_32_Property_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Annotated_Register_32::kNameFieldNumber;
const int Annotated_Register_32::kUsedAtAddrFieldNumber;
const int Annotated_Register_32::kUsedAtAddrHexFieldNumber;
const int Annotated_Register_32::kValueFieldNumber;
const int Annotated_Register_32::kFactFieldNumber;
const int Annotated_Register_32::kAbstractExpressionFieldNumber;
#endif  // !_MSC_VER

Annotated_Register_32::Annotated_Register_32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Register_32::InitAsDefaultInstance() {
  fact_ = const_cast< ::Annotated_Register_32_Property*>(&::Annotated_Register_32_Property::default_instance());
}

Annotated_Register_32::Annotated_Register_32(const Annotated_Register_32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Register_32::SharedCtor() {
  _cached_size_ = 0;
  name_ = 0;
  used_at_addr_ = GOOGLE_LONGLONG(0);
  used_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fact_ = NULL;
  abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Register_32::~Annotated_Register_32() {
  SharedDtor();
}

void Annotated_Register_32::SharedDtor() {
  if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete used_at_addr_hex_;
  }
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    delete abstract_expression_;
  }
  if (this != default_instance_) {
    delete fact_;
  }
}

void Annotated_Register_32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Register_32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Register_32_descriptor_;
}

const Annotated_Register_32& Annotated_Register_32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Register_32* Annotated_Register_32::default_instance_ = NULL;

Annotated_Register_32* Annotated_Register_32::New() const {
  return new Annotated_Register_32;
}

void Annotated_Register_32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = 0;
    used_at_addr_ = GOOGLE_LONGLONG(0);
    if (has_used_at_addr_hex()) {
      if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
        used_at_addr_hex_->clear();
      }
    }
    if (has_fact()) {
      if (fact_ != NULL) fact_->::Annotated_Register_32_Property::Clear();
    }
    if (has_abstract_expression()) {
      if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
        abstract_expression_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Register_32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Annotated_Register_32.Register name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Annotated_Register_32_Register_IsValid(value)) {
            set_name(static_cast< ::Annotated_Register_32_Register >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_at_addr;
        break;
      }

      // required int64 used_at_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_at_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_at_addr_)));
          set_has_used_at_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_used_at_addr_hex;
        break;
      }

      // optional string used_at_addr_hex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used_at_addr_hex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_used_at_addr_hex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->used_at_addr_hex().data(), this->used_at_addr_hex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value;
        break;
      }

      // repeated .Edge_32 value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_value;
        if (input->ExpectTag(66)) goto parse_fact;
        break;
      }

      // required .Annotated_Register_32.Property fact = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_abstract_expression;
        break;
      }

      // optional string abstract_expression = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abstract_expression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract_expression()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abstract_expression().data(), this->abstract_expression().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Register_32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Annotated_Register_32.Register name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // required int64 used_at_addr = 2;
  if (has_used_at_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->used_at_addr(), output);
  }

  // optional string used_at_addr_hex = 3;
  if (has_used_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->used_at_addr_hex().data(), this->used_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->used_at_addr_hex(), output);
  }

  // repeated .Edge_32 value = 7;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->value(i), output);
  }

  // required .Annotated_Register_32.Property fact = 8;
  if (has_fact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fact(), output);
  }

  // optional string abstract_expression = 9;
  if (has_abstract_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abstract_expression().data(), this->abstract_expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->abstract_expression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Register_32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Annotated_Register_32.Register name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  // required int64 used_at_addr = 2;
  if (has_used_at_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->used_at_addr(), target);
  }

  // optional string used_at_addr_hex = 3;
  if (has_used_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->used_at_addr_hex().data(), this->used_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->used_at_addr_hex(), target);
  }

  // repeated .Edge_32 value = 7;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->value(i), target);
  }

  // required .Annotated_Register_32.Property fact = 8;
  if (has_fact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fact(), target);
  }

  // optional string abstract_expression = 9;
  if (has_abstract_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abstract_expression().data(), this->abstract_expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->abstract_expression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Register_32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Annotated_Register_32.Register name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }

    // required int64 used_at_addr = 2;
    if (has_used_at_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->used_at_addr());
    }

    // optional string used_at_addr_hex = 3;
    if (has_used_at_addr_hex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->used_at_addr_hex());
    }

    // required .Annotated_Register_32.Property fact = 8;
    if (has_fact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fact());
    }

    // optional string abstract_expression = 9;
    if (has_abstract_expression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abstract_expression());
    }

  }
  // repeated .Edge_32 value = 7;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Register_32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Register_32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Register_32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Register_32::MergeFrom(const Annotated_Register_32& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_used_at_addr()) {
      set_used_at_addr(from.used_at_addr());
    }
    if (from.has_used_at_addr_hex()) {
      set_used_at_addr_hex(from.used_at_addr_hex());
    }
    if (from.has_fact()) {
      mutable_fact()->::Annotated_Register_32_Property::MergeFrom(from.fact());
    }
    if (from.has_abstract_expression()) {
      set_abstract_expression(from.abstract_expression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Register_32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Register_32::CopyFrom(const Annotated_Register_32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Register_32::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  if (has_fact()) {
    if (!this->fact().IsInitialized()) return false;
  }
  return true;
}

void Annotated_Register_32::Swap(Annotated_Register_32* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(used_at_addr_, other->used_at_addr_);
    std::swap(used_at_addr_hex_, other->used_at_addr_hex_);
    value_.Swap(&other->value_);
    std::swap(fact_, other->fact_);
    std::swap(abstract_expression_, other->abstract_expression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Register_32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Register_32_descriptor_;
  metadata.reflection = Annotated_Register_32_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Annotated_Register_64_Register_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Register_64_Register_descriptor_;
}
bool Annotated_Register_64_Register_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Annotated_Register_64_Register Annotated_Register_64::Unknown;
const Annotated_Register_64_Register Annotated_Register_64::rax;
const Annotated_Register_64_Register Annotated_Register_64::rcx;
const Annotated_Register_64_Register Annotated_Register_64::rdx;
const Annotated_Register_64_Register Annotated_Register_64::rbx;
const Annotated_Register_64_Register Annotated_Register_64::rsp;
const Annotated_Register_64_Register Annotated_Register_64::rbp;
const Annotated_Register_64_Register Annotated_Register_64::rsi;
const Annotated_Register_64_Register Annotated_Register_64::rdi;
const Annotated_Register_64_Register Annotated_Register_64::rip;
const Annotated_Register_64_Register Annotated_Register_64::r8;
const Annotated_Register_64_Register Annotated_Register_64::r9;
const Annotated_Register_64_Register Annotated_Register_64::r10;
const Annotated_Register_64_Register Annotated_Register_64::r11;
const Annotated_Register_64_Register Annotated_Register_64::r12;
const Annotated_Register_64_Register Annotated_Register_64::r13;
const Annotated_Register_64_Register Annotated_Register_64::r14;
const Annotated_Register_64_Register Annotated_Register_64::r15;
const Annotated_Register_64_Register Annotated_Register_64::fs_base;
const Annotated_Register_64_Register Annotated_Register_64::gs_base;
const Annotated_Register_64_Register Annotated_Register_64::gdt;
const Annotated_Register_64_Register Annotated_Register_64::ldt;
const Annotated_Register_64_Register Annotated_Register_64::Register_MIN;
const Annotated_Register_64_Register Annotated_Register_64::Register_MAX;
const int Annotated_Register_64::Register_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Annotated_Register_64_Property::kUnknownFieldNumber;
const int Annotated_Register_64_Property::kAliveFieldNumber;
#endif  // !_MSC_VER

Annotated_Register_64_Property::Annotated_Register_64_Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Register_64_Property::InitAsDefaultInstance() {
}

Annotated_Register_64_Property::Annotated_Register_64_Property(const Annotated_Register_64_Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Register_64_Property::SharedCtor() {
  _cached_size_ = 0;
  unknown_ = false;
  alive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Register_64_Property::~Annotated_Register_64_Property() {
  SharedDtor();
}

void Annotated_Register_64_Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Annotated_Register_64_Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Register_64_Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Register_64_Property_descriptor_;
}

const Annotated_Register_64_Property& Annotated_Register_64_Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Register_64_Property* Annotated_Register_64_Property::default_instance_ = NULL;

Annotated_Register_64_Property* Annotated_Register_64_Property::New() const {
  return new Annotated_Register_64_Property;
}

void Annotated_Register_64_Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unknown_ = false;
    alive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Register_64_Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool Unknown = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unknown_)));
          set_has_unknown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Alive;
        break;
      }

      // optional bool Alive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alive_)));
          set_has_alive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Register_64_Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool Unknown = 1;
  if (has_unknown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->unknown(), output);
  }

  // optional bool Alive = 2;
  if (has_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->alive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Register_64_Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool Unknown = 1;
  if (has_unknown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->unknown(), target);
  }

  // optional bool Alive = 2;
  if (has_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->alive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Register_64_Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool Unknown = 1;
    if (has_unknown()) {
      total_size += 1 + 1;
    }

    // optional bool Alive = 2;
    if (has_alive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Register_64_Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Register_64_Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Register_64_Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Register_64_Property::MergeFrom(const Annotated_Register_64_Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unknown()) {
      set_unknown(from.unknown());
    }
    if (from.has_alive()) {
      set_alive(from.alive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Register_64_Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Register_64_Property::CopyFrom(const Annotated_Register_64_Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Register_64_Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Annotated_Register_64_Property::Swap(Annotated_Register_64_Property* other) {
  if (other != this) {
    std::swap(unknown_, other->unknown_);
    std::swap(alive_, other->alive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Register_64_Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Register_64_Property_descriptor_;
  metadata.reflection = Annotated_Register_64_Property_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Annotated_Register_64::kNameFieldNumber;
const int Annotated_Register_64::kUsedAtAddrFieldNumber;
const int Annotated_Register_64::kUsedAtAddrHexFieldNumber;
const int Annotated_Register_64::kValueFieldNumber;
const int Annotated_Register_64::kFactFieldNumber;
const int Annotated_Register_64::kAbstractExpressionFieldNumber;
#endif  // !_MSC_VER

Annotated_Register_64::Annotated_Register_64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Register_64::InitAsDefaultInstance() {
  fact_ = const_cast< ::Annotated_Register_64_Property*>(&::Annotated_Register_64_Property::default_instance());
}

Annotated_Register_64::Annotated_Register_64(const Annotated_Register_64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Register_64::SharedCtor() {
  _cached_size_ = 0;
  name_ = 0;
  used_at_addr_ = GOOGLE_LONGLONG(0);
  used_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fact_ = NULL;
  abstract_expression_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Register_64::~Annotated_Register_64() {
  SharedDtor();
}

void Annotated_Register_64::SharedDtor() {
  if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete used_at_addr_hex_;
  }
  if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
    delete abstract_expression_;
  }
  if (this != default_instance_) {
    delete fact_;
  }
}

void Annotated_Register_64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Register_64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Register_64_descriptor_;
}

const Annotated_Register_64& Annotated_Register_64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Register_64* Annotated_Register_64::default_instance_ = NULL;

Annotated_Register_64* Annotated_Register_64::New() const {
  return new Annotated_Register_64;
}

void Annotated_Register_64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = 0;
    used_at_addr_ = GOOGLE_LONGLONG(0);
    if (has_used_at_addr_hex()) {
      if (used_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
        used_at_addr_hex_->clear();
      }
    }
    if (has_fact()) {
      if (fact_ != NULL) fact_->::Annotated_Register_64_Property::Clear();
    }
    if (has_abstract_expression()) {
      if (abstract_expression_ != &::google::protobuf::internal::kEmptyString) {
        abstract_expression_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Register_64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Annotated_Register_64.Register name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Annotated_Register_64_Register_IsValid(value)) {
            set_name(static_cast< ::Annotated_Register_64_Register >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used_at_addr;
        break;
      }

      // required int64 used_at_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_at_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &used_at_addr_)));
          set_has_used_at_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_used_at_addr_hex;
        break;
      }

      // optional string used_at_addr_hex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_used_at_addr_hex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_used_at_addr_hex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->used_at_addr_hex().data(), this->used_at_addr_hex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // repeated .Edge_64 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        if (input->ExpectTag(42)) goto parse_fact;
        break;
      }

      // required .Annotated_Register_64.Property fact = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_abstract_expression;
        break;
      }

      // optional string abstract_expression = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abstract_expression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abstract_expression()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abstract_expression().data(), this->abstract_expression().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Register_64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Annotated_Register_64.Register name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // required int64 used_at_addr = 2;
  if (has_used_at_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->used_at_addr(), output);
  }

  // optional string used_at_addr_hex = 3;
  if (has_used_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->used_at_addr_hex().data(), this->used_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->used_at_addr_hex(), output);
  }

  // repeated .Edge_64 value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value(i), output);
  }

  // required .Annotated_Register_64.Property fact = 5;
  if (has_fact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fact(), output);
  }

  // optional string abstract_expression = 6;
  if (has_abstract_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abstract_expression().data(), this->abstract_expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->abstract_expression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Register_64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Annotated_Register_64.Register name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  // required int64 used_at_addr = 2;
  if (has_used_at_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->used_at_addr(), target);
  }

  // optional string used_at_addr_hex = 3;
  if (has_used_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->used_at_addr_hex().data(), this->used_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->used_at_addr_hex(), target);
  }

  // repeated .Edge_64 value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value(i), target);
  }

  // required .Annotated_Register_64.Property fact = 5;
  if (has_fact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fact(), target);
  }

  // optional string abstract_expression = 6;
  if (has_abstract_expression()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abstract_expression().data(), this->abstract_expression().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->abstract_expression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Register_64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Annotated_Register_64.Register name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }

    // required int64 used_at_addr = 2;
    if (has_used_at_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->used_at_addr());
    }

    // optional string used_at_addr_hex = 3;
    if (has_used_at_addr_hex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->used_at_addr_hex());
    }

    // required .Annotated_Register_64.Property fact = 5;
    if (has_fact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fact());
    }

    // optional string abstract_expression = 6;
    if (has_abstract_expression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abstract_expression());
    }

  }
  // repeated .Edge_64 value = 4;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Register_64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Register_64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Register_64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Register_64::MergeFrom(const Annotated_Register_64& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_used_at_addr()) {
      set_used_at_addr(from.used_at_addr());
    }
    if (from.has_used_at_addr_hex()) {
      set_used_at_addr_hex(from.used_at_addr_hex());
    }
    if (from.has_fact()) {
      mutable_fact()->::Annotated_Register_64_Property::MergeFrom(from.fact());
    }
    if (from.has_abstract_expression()) {
      set_abstract_expression(from.abstract_expression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Register_64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Register_64::CopyFrom(const Annotated_Register_64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Register_64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  if (has_fact()) {
    if (!this->fact().IsInitialized()) return false;
  }
  return true;
}

void Annotated_Register_64::Swap(Annotated_Register_64* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(used_at_addr_, other->used_at_addr_);
    std::swap(used_at_addr_hex_, other->used_at_addr_hex_);
    value_.Swap(&other->value_);
    std::swap(fact_, other->fact_);
    std::swap(abstract_expression_, other->abstract_expression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Register_64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Register_64_descriptor_;
  metadata.reflection = Annotated_Register_64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Annotated_Function::kNameFieldNumber;
const int Annotated_Function::kStartAtAddrFieldNumber;
const int Annotated_Function::kStartAtAddrHexFieldNumber;
const int Annotated_Function::kEndAtAddrFieldNumber;
const int Annotated_Function::kEndAtAddrHexFieldNumber;
const int Annotated_Function::kPrologFieldNumber;
const int Annotated_Function::kEpilogFieldNumber;
const int Annotated_Function::kRefereredFromFieldNumber;
const int Annotated_Function::kCallsFieldNumber;
#endif  // !_MSC_VER

Annotated_Function::Annotated_Function()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Annotated_Function::InitAsDefaultInstance() {
}

Annotated_Function::Annotated_Function(const Annotated_Function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Annotated_Function::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_at_addr_ = GOOGLE_LONGLONG(0);
  start_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_at_addr_ = GOOGLE_LONGLONG(0);
  end_at_addr_hex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Annotated_Function::~Annotated_Function() {
  SharedDtor();
}

void Annotated_Function::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete start_at_addr_hex_;
  }
  if (end_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
    delete end_at_addr_hex_;
  }
  if (this != default_instance_) {
  }
}

void Annotated_Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Annotated_Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Annotated_Function_descriptor_;
}

const Annotated_Function& Annotated_Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Annotated_Function* Annotated_Function::default_instance_ = NULL;

Annotated_Function* Annotated_Function::New() const {
  return new Annotated_Function;
}

void Annotated_Function::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    start_at_addr_ = GOOGLE_LONGLONG(0);
    if (has_start_at_addr_hex()) {
      if (start_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
        start_at_addr_hex_->clear();
      }
    }
    end_at_addr_ = GOOGLE_LONGLONG(0);
    if (has_end_at_addr_hex()) {
      if (end_at_addr_hex_ != &::google::protobuf::internal::kEmptyString) {
        end_at_addr_hex_->clear();
      }
    }
  }
  prolog_.Clear();
  epilog_.Clear();
  referered_from_.Clear();
  calls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Annotated_Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_at_addr;
        break;
      }

      // required int64 start_at_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_at_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_at_addr_)));
          set_has_start_at_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_start_at_addr_hex;
        break;
      }

      // optional string start_at_addr_hex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_at_addr_hex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_at_addr_hex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_at_addr_hex().data(), this->start_at_addr_hex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_at_addr;
        break;
      }

      // optional int64 end_at_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_at_addr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_at_addr_)));
          set_has_end_at_addr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_at_addr_hex;
        break;
      }

      // optional string end_at_addr_hex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_at_addr_hex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_at_addr_hex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_at_addr_hex().data(), this->end_at_addr_hex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prolog;
        break;
      }

      // repeated .Annotated_Instruction prolog = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prolog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prolog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prolog;
        if (input->ExpectTag(58)) goto parse_epilog;
        break;
      }

      // repeated .Annotated_Instruction epilog = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_epilog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_epilog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_epilog;
        if (input->ExpectTag(66)) goto parse_referered_from;
        break;
      }

      // repeated .Edge_64 referered_from = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referered_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_referered_from()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_referered_from;
        if (input->ExpectTag(74)) goto parse_calls;
        break;
      }

      // repeated .Edge_64 calls = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_calls;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Annotated_Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int64 start_at_addr = 2;
  if (has_start_at_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_at_addr(), output);
  }

  // optional string start_at_addr_hex = 3;
  if (has_start_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_at_addr_hex().data(), this->start_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->start_at_addr_hex(), output);
  }

  // optional int64 end_at_addr = 4;
  if (has_end_at_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_at_addr(), output);
  }

  // optional string end_at_addr_hex = 5;
  if (has_end_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_at_addr_hex().data(), this->end_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->end_at_addr_hex(), output);
  }

  // repeated .Annotated_Instruction prolog = 6;
  for (int i = 0; i < this->prolog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->prolog(i), output);
  }

  // repeated .Annotated_Instruction epilog = 7;
  for (int i = 0; i < this->epilog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->epilog(i), output);
  }

  // repeated .Edge_64 referered_from = 8;
  for (int i = 0; i < this->referered_from_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->referered_from(i), output);
  }

  // repeated .Edge_64 calls = 9;
  for (int i = 0; i < this->calls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->calls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Annotated_Function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 start_at_addr = 2;
  if (has_start_at_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_at_addr(), target);
  }

  // optional string start_at_addr_hex = 3;
  if (has_start_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_at_addr_hex().data(), this->start_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_at_addr_hex(), target);
  }

  // optional int64 end_at_addr = 4;
  if (has_end_at_addr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_at_addr(), target);
  }

  // optional string end_at_addr_hex = 5;
  if (has_end_at_addr_hex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_at_addr_hex().data(), this->end_at_addr_hex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->end_at_addr_hex(), target);
  }

  // repeated .Annotated_Instruction prolog = 6;
  for (int i = 0; i < this->prolog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->prolog(i), target);
  }

  // repeated .Annotated_Instruction epilog = 7;
  for (int i = 0; i < this->epilog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->epilog(i), target);
  }

  // repeated .Edge_64 referered_from = 8;
  for (int i = 0; i < this->referered_from_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->referered_from(i), target);
  }

  // repeated .Edge_64 calls = 9;
  for (int i = 0; i < this->calls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->calls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Annotated_Function::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 start_at_addr = 2;
    if (has_start_at_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_at_addr());
    }

    // optional string start_at_addr_hex = 3;
    if (has_start_at_addr_hex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_at_addr_hex());
    }

    // optional int64 end_at_addr = 4;
    if (has_end_at_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_at_addr());
    }

    // optional string end_at_addr_hex = 5;
    if (has_end_at_addr_hex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_at_addr_hex());
    }

  }
  // repeated .Annotated_Instruction prolog = 6;
  total_size += 1 * this->prolog_size();
  for (int i = 0; i < this->prolog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prolog(i));
  }

  // repeated .Annotated_Instruction epilog = 7;
  total_size += 1 * this->epilog_size();
  for (int i = 0; i < this->epilog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->epilog(i));
  }

  // repeated .Edge_64 referered_from = 8;
  total_size += 1 * this->referered_from_size();
  for (int i = 0; i < this->referered_from_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->referered_from(i));
  }

  // repeated .Edge_64 calls = 9;
  total_size += 1 * this->calls_size();
  for (int i = 0; i < this->calls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Annotated_Function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Annotated_Function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Annotated_Function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Annotated_Function::MergeFrom(const Annotated_Function& from) {
  GOOGLE_CHECK_NE(&from, this);
  prolog_.MergeFrom(from.prolog_);
  epilog_.MergeFrom(from.epilog_);
  referered_from_.MergeFrom(from.referered_from_);
  calls_.MergeFrom(from.calls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_at_addr()) {
      set_start_at_addr(from.start_at_addr());
    }
    if (from.has_start_at_addr_hex()) {
      set_start_at_addr_hex(from.start_at_addr_hex());
    }
    if (from.has_end_at_addr()) {
      set_end_at_addr(from.end_at_addr());
    }
    if (from.has_end_at_addr_hex()) {
      set_end_at_addr_hex(from.end_at_addr_hex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Annotated_Function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotated_Function::CopyFrom(const Annotated_Function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotated_Function::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < prolog_size(); i++) {
    if (!this->prolog(i).IsInitialized()) return false;
  }
  for (int i = 0; i < epilog_size(); i++) {
    if (!this->epilog(i).IsInitialized()) return false;
  }
  for (int i = 0; i < referered_from_size(); i++) {
    if (!this->referered_from(i).IsInitialized()) return false;
  }
  for (int i = 0; i < calls_size(); i++) {
    if (!this->calls(i).IsInitialized()) return false;
  }
  return true;
}

void Annotated_Function::Swap(Annotated_Function* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_at_addr_, other->start_at_addr_);
    std::swap(start_at_addr_hex_, other->start_at_addr_hex_);
    std::swap(end_at_addr_, other->end_at_addr_);
    std::swap(end_at_addr_hex_, other->end_at_addr_hex_);
    prolog_.Swap(&other->prolog_);
    epilog_.Swap(&other->epilog_);
    referered_from_.Swap(&other->referered_from_);
    calls_.Swap(&other->calls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Annotated_Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Annotated_Function_descriptor_;
  metadata.reflection = Annotated_Function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Disassembly::kInstrFieldNumber;
const int Disassembly::kBranchInstrFieldNumber;
const int Disassembly::kReg32FieldNumber;
const int Disassembly::kReg64FieldNumber;
const int Disassembly::kFuncFieldNumber;
#endif  // !_MSC_VER

Disassembly::Disassembly()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Disassembly::InitAsDefaultInstance() {
}

Disassembly::Disassembly(const Disassembly& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Disassembly::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Disassembly::~Disassembly() {
  SharedDtor();
}

void Disassembly::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Disassembly::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Disassembly::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Disassembly_descriptor_;
}

const Disassembly& Disassembly::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CFG_2eproto();
  return *default_instance_;
}

Disassembly* Disassembly::default_instance_ = NULL;

Disassembly* Disassembly::New() const {
  return new Disassembly;
}

void Disassembly::Clear() {
  instr_.Clear();
  branch_instr_.Clear();
  reg_32_.Clear();
  reg_64_.Clear();
  func_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Disassembly::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Annotated_Instruction instr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instr;
        if (input->ExpectTag(18)) goto parse_branch_instr;
        break;
      }

      // repeated .Annotated_Branch_Instruction branch_instr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch_instr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_branch_instr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_branch_instr;
        if (input->ExpectTag(26)) goto parse_reg_32;
        break;
      }

      // repeated .Annotated_Register_32 reg_32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reg_32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reg_32;
        if (input->ExpectTag(34)) goto parse_reg_64;
        break;
      }

      // repeated .Annotated_Register_64 reg_64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reg_64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reg_64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reg_64;
        if (input->ExpectTag(42)) goto parse_func;
        break;
      }

      // repeated .Annotated_Function func = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_func()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_func;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Disassembly::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Annotated_Instruction instr = 1;
  for (int i = 0; i < this->instr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instr(i), output);
  }

  // repeated .Annotated_Branch_Instruction branch_instr = 2;
  for (int i = 0; i < this->branch_instr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->branch_instr(i), output);
  }

  // repeated .Annotated_Register_32 reg_32 = 3;
  for (int i = 0; i < this->reg_32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reg_32(i), output);
  }

  // repeated .Annotated_Register_64 reg_64 = 4;
  for (int i = 0; i < this->reg_64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reg_64(i), output);
  }

  // repeated .Annotated_Function func = 5;
  for (int i = 0; i < this->func_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->func(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Disassembly::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Annotated_Instruction instr = 1;
  for (int i = 0; i < this->instr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instr(i), target);
  }

  // repeated .Annotated_Branch_Instruction branch_instr = 2;
  for (int i = 0; i < this->branch_instr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->branch_instr(i), target);
  }

  // repeated .Annotated_Register_32 reg_32 = 3;
  for (int i = 0; i < this->reg_32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reg_32(i), target);
  }

  // repeated .Annotated_Register_64 reg_64 = 4;
  for (int i = 0; i < this->reg_64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reg_64(i), target);
  }

  // repeated .Annotated_Function func = 5;
  for (int i = 0; i < this->func_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->func(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Disassembly::ByteSize() const {
  int total_size = 0;

  // repeated .Annotated_Instruction instr = 1;
  total_size += 1 * this->instr_size();
  for (int i = 0; i < this->instr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instr(i));
  }

  // repeated .Annotated_Branch_Instruction branch_instr = 2;
  total_size += 1 * this->branch_instr_size();
  for (int i = 0; i < this->branch_instr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->branch_instr(i));
  }

  // repeated .Annotated_Register_32 reg_32 = 3;
  total_size += 1 * this->reg_32_size();
  for (int i = 0; i < this->reg_32_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reg_32(i));
  }

  // repeated .Annotated_Register_64 reg_64 = 4;
  total_size += 1 * this->reg_64_size();
  for (int i = 0; i < this->reg_64_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reg_64(i));
  }

  // repeated .Annotated_Function func = 5;
  total_size += 1 * this->func_size();
  for (int i = 0; i < this->func_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->func(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Disassembly::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Disassembly* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Disassembly*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Disassembly::MergeFrom(const Disassembly& from) {
  GOOGLE_CHECK_NE(&from, this);
  instr_.MergeFrom(from.instr_);
  branch_instr_.MergeFrom(from.branch_instr_);
  reg_32_.MergeFrom(from.reg_32_);
  reg_64_.MergeFrom(from.reg_64_);
  func_.MergeFrom(from.func_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Disassembly::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Disassembly::CopyFrom(const Disassembly& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disassembly::IsInitialized() const {

  for (int i = 0; i < instr_size(); i++) {
    if (!this->instr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < branch_instr_size(); i++) {
    if (!this->branch_instr(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reg_32_size(); i++) {
    if (!this->reg_32(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reg_64_size(); i++) {
    if (!this->reg_64(i).IsInitialized()) return false;
  }
  for (int i = 0; i < func_size(); i++) {
    if (!this->func(i).IsInitialized()) return false;
  }
  return true;
}

void Disassembly::Swap(Disassembly* other) {
  if (other != this) {
    instr_.Swap(&other->instr_);
    branch_instr_.Swap(&other->branch_instr_);
    reg_32_.Swap(&other->reg_32_);
    reg_64_.Swap(&other->reg_64_);
    func_.Swap(&other->func_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Disassembly::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Disassembly_descriptor_;
  metadata.reflection = Disassembly_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
