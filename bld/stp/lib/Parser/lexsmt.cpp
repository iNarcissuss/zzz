#line 2 "/home/travis/build/vdun/stoke/stoke/stp/build/lib/Parser/lexsmt.cpp"

#line 4 "/home/travis/build/vdun/stoke/stoke/stp/build/lib/Parser/lexsmt.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer smt_create_buffer
#define yy_delete_buffer smt_delete_buffer
#define yy_flex_debug smt_flex_debug
#define yy_init_buffer smt_init_buffer
#define yy_flush_buffer smt_flush_buffer
#define yy_load_buffer_state smt_load_buffer_state
#define yy_switch_to_buffer smt_switch_to_buffer
#define yyin smtin
#define yyleng smtleng
#define yylex smtlex
#define yylineno smtlineno
#define yyout smtout
#define yyrestart smtrestart
#define yytext smttext
#define yywrap smtwrap
#define yyalloc smtalloc
#define yyrealloc smtrealloc
#define yyfree smtfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE smtrestart(smtin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int smtleng;

extern FILE *smtin, *smtout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE smtlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-smtlineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < smtleng; ++yyl )\
                    if ( smttext[yyl] == '\n' )\
                        --smtlineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smttext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up smttext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via smtrestart()), so that the user can continue scanning by
	 * just pointing smtin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when smttext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int smtleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow smtwrap()'s to do buffer switches
 * instead of setting up a fresh smtin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void smtrestart (FILE *input_file  );
void smt_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE smt_create_buffer (FILE *file,int size  );
void smt_delete_buffer (YY_BUFFER_STATE b  );
void smt_flush_buffer (YY_BUFFER_STATE b  );
void smtpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void smtpop_buffer_state (void );

static void smtensure_buffer_stack (void );
static void smt_load_buffer_state (void );
static void smt_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER smt_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE smt_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE smt_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE smt_scan_bytes (yyconst char *bytes,int len  );

void *smtalloc (yy_size_t  );
void *smtrealloc (void *,yy_size_t  );
void smtfree (void *  );

#define yy_new_buffer smt_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        smtensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt_create_buffer(smtin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        smtensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            smt_create_buffer(smtin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define smtwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *smtin = (FILE *) 0, *smtout = (FILE *) 0;

typedef int yy_state_type;

extern int smtlineno;

int smtlineno = 1;

extern char *smttext;
#define yytext_ptr smttext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up smttext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	smtleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 113
#define YY_END_OF_BUFFER 114
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[394] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  114,  112,
        1,    1,    8,   61,   59,   60,    2,   56,    5,   63,
       62,  111,  111,  111,   57,   58,  112,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,   12,    7,    6,   11,  113,   10,
       11,   16,   15,   16,   14,    2,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,   26,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,    9,   13,  111,

      111,   25,  111,  111,  111,  111,  111,    3,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   28,
      111,   23,  111,   29,  111,  111,   65,   21,  111,  111,
      111,   39,  111,  111,  111,  111,  111,  111,  111,  111,
      111,   27,  111,  111,  111,  111,  111,  111,    4,  111,
      111,  111,  111,  111,  111,   88,  111,  111,   87,  111,
      111,  111,  111,   80,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   30,  111,   33,  111,  111,

      111,  111,   64,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   19,  111,  111,  111,   18,  111,  111,
      111,  111,  111,  111,   69,   79,  111,  111,   90,   89,
      111,   72,  111,   78,   83,   71,  111,  102,   98,   66,
      101,   97,  111,  111,   70,  111,   96,   92,   95,   91,
      111,  111,   81,  111,  111,  111,  111,  111,  111,  111,
       20,  111,  111,  111,  111,   38,   31,   34,  111,  111,
      111,  111,   32,  111,  111,   55,  111,   40,  111,   17,
      111,   37,  111,  110,  111,   68,  103,   67,   82,   74,
      100,   99,   77,   76,   73,   94,   93,   75,   84,  111,

       85,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  106,  111,   54,  111,   47,   44,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,   86,
      111,  111,  111,   43,  111,   22,  111,  111,  111,   41,
      111,  111,  111,  111,   48,  111,  111,   53,  111,  111,
      111,  111,  111,   52,  111,  111,  111,  111,  111,   46,
      111,  111,  111,  111,   50,  111,  111,  111,  111,  111,
      111,  111,   42,  111,   36,   45,   35,   51,   49,  111,
      111,  111,  111,  111,  109,  111,  107,  111,  105,  104,
       24,  108,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    5,    1,    1,    6,    7,
        8,    1,    1,    1,    1,    6,    1,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,    1,
       12,    1,   13,    1,   14,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   16,   16,   16,   16,
       18,   19,   20,    1,   21,    1,   22,   23,   24,   25,

       26,   27,   28,   29,   30,   16,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,    1,   48,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[400] =
    {   0,
        0,    0,  653,  652,   46,   48,   50,   51,  654,  657,
      657,  657,  657,  657,  657,  657,  644,  657,  657,  657,
      657,  614,  621,    0,  657,  657,    0,   22,   29,   38,
       32,  606,   46,   49,   53,   50,  611,  610,   48,   70,
      609,  612,  610,  618,  657,  657,  657,  657,  657,  657,
        0,  657,  657,   43,  657,  634,    0,  604,  601,    0,
      615,  600,  608,  603,  596,  600,  102,  594,  599,  605,
       67,  591,  598,  603,  590,  593,   36,  590,  599,  590,
      583,  594,  587,   46,    0,  594,  583,  578,  577,  584,
      587,   39,   73,  573,   62,  575,  574,  657,  657,  589,

      593,    0,  568,  573,  583,  597,  573,  595,   78,  568,
       76,   81,  561,   87,  563,  119,  100,   80,  574,  575,
      568,  570,  556,   93,  556,  554,  560,  553,  551,    0,
      558,    0,  561,    0,  558,  562,    0,  560,  560,  558,
      561,    0,  556,  547,  540,  541,  538,  539,  550,  541,
      552,    0,  538,  527,  545,  537,  536,  539,  558,  116,
      541,  540,  535,  530,  525,    0,  524,  531,    0,  527,
      524,  529,   89,    0,  526,   78,  523,  114,  519,  527,
      529,  521,  119,  123,  524,  514,  510,  519,  524,  511,
      514,  513,  508,  519,  514,    0,  498,    0,  509,  507,

      495,  511,    0,  495,  494,  510,  491,  506,  508,  489,
      503,  485,  499,    0,  489,  483,  501,    0,  497,  484,
      480,  485,  475,  472,    0,    0,  477,  478,    0,    0,
      475,    0,  487,    0,    0,    0,  469,  473,    0,    0,
      472,    0,  483,  474,    0,  464,  468,    0,  467,    0,
      470,  464,    0,  466,  460,  469,  474,  463,  457,  126,
        0,  463,  468,  467,  470,    0,    0,    0,  451,  464,
      449,  462,    0,  461,  447,    0,  442,    0,  458,    0,
      443,    0,  460,    0,  441,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  442,

        0,  439,  437,  453,  446,  435,  433,  435,  437,  449,
      436,  430,  440,    0,  446,    0,  422,    0,    0,  431,
      420,  433,  424,  423,  415,  429,  426,  417,  421,    0,
      421,  428,  415,    0,  431,    0,  425,  123,  410,    0,
      409,  413,  416,  424,    0,  410,  404,    0,  409,  403,
      416,  400,  368,    0,  339,  334,  337,  332,  323,    0,
      332,  321,  308,  313,    0,  285,  284,  290,  290,  288,
      281,  280,    0,  272,    0,    0,    0,    0,    0,  272,
      124,  129,  131,  108,    0,   97,    0,   57,    0,    0,
        0,    0,  657,  165,  213,  261,  304,  345,  391

    } ;

static yyconst flex_int16_t yy_def[400] =
    {   0,
      393,    1,  394,  394,  395,  395,  396,  396,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  397,  397,  397,  393,  393,  398,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  393,  393,  393,  393,  393,  393,
      399,  393,  393,  393,  393,  393,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  393,  393,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,    0,  393,  393,  393,  393,  393,  393

    } ;

static yyconst flex_int16_t yy_nxt[706] =
    {   0,
       10,   11,   12,   13,   14,   10,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   24,   25,   10,   26,
       27,   28,   29,   30,   31,   32,   33,   24,   24,   34,
       24,   35,   24,   36,   37,   38,   24,   39,   40,   41,
       42,   24,   24,   43,   24,   44,   45,   10,   49,   50,
       49,   50,   53,   53,   64,   61,  129,   70,   65,   68,
       62,   71,  130,   66,   51,   63,   51,   73,   54,   54,
       67,   83,   69,   87,   80,   77,  145,   74,   81,  146,
       75,   78,   88,  137,   84,  138,   76,   82,   79,   99,
       99,   89,  150,  122,  147,   90,  392,   55,   55,   91,

      151,  165,  161,  238,   92,  123,  167,  148,  171,   93,
      108,  162,  172,  186,  187,  166,  163,  239,  193,  168,
      169,  173,  391,  109,  182,  110,  235,  183,  236,  111,
      194,  184,  390,  112,  113,  114,  115,  185,  223,  241,
      116,  224,  117,  175,  247,  118,  176,  177,  249,  306,
      178,  179,  307,  242,  355,  389,  180,  388,  248,  181,
      356,  308,  250,  387,  309,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   57,
      386,  385,   57,  384,  383,  382,  381,   57,   57,   57,
       57,  380,  379,  378,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       60,  377,  376,   60,  375,  374,  373,  372,   60,   60,
       60,   60,  371,  370,  369,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   98,   98,  368,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  319,  318,  317,  316,  315,
      314,  313,  312,  311,  310,  305,  304,  303,  302,  301,

      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      246,  245,  244,  243,  240,  237,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  159,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  196,  195,  192,  191,  190,  189,  188,

      174,  170,  164,  108,  160,  159,  158,  157,  156,  155,
      154,  153,  152,  149,  144,  143,  142,  141,  140,  139,
      136,  135,  134,  133,  132,  131,  128,  127,  126,  125,
      124,  121,  120,  119,  107,  106,  105,  104,  103,  102,
      101,  100,   56,   97,   96,   95,   94,   86,   85,   72,
       59,   58,   56,  393,   47,   47,    9,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393
    } ;

static yyconst flex_int16_t yy_chk[706] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    6,    7,    8,   29,   28,   77,   31,   29,   30,
       28,   31,   77,   29,    5,   28,    6,   33,    7,    8,
       29,   36,   30,   39,   35,   34,   92,   33,   35,   92,
       33,   34,   39,   84,   36,   84,   33,   35,   34,   54,
       54,   40,   95,   71,   93,   40,  388,    7,    8,   40,

       95,  111,  109,  176,   40,   71,  112,   93,  114,   40,
       67,  109,  114,  118,  118,  111,  109,  176,  124,  112,
      112,  114,  386,   67,  117,   67,  173,  117,  173,   67,
      124,  117,  384,   67,   67,   67,   67,  117,  160,  178,
       67,  160,   67,  116,  183,   67,  116,  116,  184,  260,
      116,  116,  260,  178,  338,  383,  116,  382,  183,  116,
      338,  260,  184,  381,  260,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  396,  396,  396,  397,
      380,  374,  397,  372,  371,  370,  369,  397,  397,  397,
      397,  368,  367,  366,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      398,  364,  363,  398,  362,  361,  359,  358,  398,  398,
      398,  398,  357,  356,  355,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  399,  399,  353,  399,  399,  399,  399,  399,  399,

      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  352,
      351,  350,  349,  347,  346,  344,  343,  342,  341,  339,
      337,  335,  333,  332,  331,  329,  328,  327,  326,  325,
      324,  323,  322,  321,  320,  317,  315,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  300,
      285,  283,  281,  279,  277,  275,  274,  272,  271,  270,
      269,  265,  264,  263,  262,  259,  258,  257,  256,  255,

      254,  252,  251,  249,  247,  246,  244,  243,  241,  238,
      237,  233,  231,  228,  227,  224,  223,  222,  221,  220,
      219,  217,  216,  215,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  202,  201,  200,  199,  197,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      182,  181,  180,  179,  177,  175,  172,  171,  170,  168,
      167,  165,  164,  163,  162,  161,  159,  158,  157,  156,
      155,  154,  153,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  141,  140,  139,  138,  136,  135,  133,  131,
      129,  128,  127,  126,  125,  123,  122,  121,  120,  119,

      115,  113,  110,  108,  107,  106,  105,  104,  103,  101,
      100,   97,   96,   94,   91,   90,   89,   88,   87,   86,
       83,   82,   81,   80,   79,   78,   76,   75,   74,   73,
       72,   70,   69,   68,   66,   65,   64,   63,   62,   61,
       59,   58,   56,   44,   43,   42,   41,   38,   37,   32,
       23,   22,   17,    9,    4,    3,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[114] =
    {   0,
1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int smt_flex_debug;
int smt_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *smttext;
#line 1 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
#line 2 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
  /********************************************************************
   * AUTHORS: Vijay Ganesh, David L. Dill, Trevor Hansen
   *
   * BEGIN DATE: July, 2006
   *
   * This file is modified version of the CVCL's smtlib.lex file. Please
   * see CVCL license below
   ********************************************************************/
   
  /********************************************************************
   * \file smtlib.lex
   * 
   * Author: Sergey Berezin, Clark Barrett
   * 
   * Created: Apr 30 2005
   *
   * <hr>
   * Copyright (C) 2004 by the Board of Trustees of Leland Stanford
   * Junior University and by New York University. 
   *
   * License to use, copy, modify, sell and/or distribute this software
   * and its documentation for any purpose is hereby granted without
   * royalty, subject to the terms and conditions defined in the \ref
   * LICENSE file provided with this distribution.  In particular:
   *
   * - The above copyright notice and this permission notice must appear
   * in all copies of the software and related documentation.
   *
   * - THE SOFTWARE IS PROVIDED "AS-IS", WITHOUT ANY WARRANTIES,
   * EXPRESSED OR IMPLIED.  USE IT AT YOUR OWN RISK.
   * 
   * <hr>
   ********************************************************************/
  // -*- c++ -*-
#include <iostream>
#include "stp/Parser/parser.h"
#include "parsesmt.hpp"
#include "stp/cpp_interface.h"

  using namespace std;
  using namespace BEEV;
  
  extern char *smttext;
  extern int smterror (const char *msg);

  // File-static (local to this file) variables and functions
  static std::string _string_lit;  
  static char escapeChar(char c) {
    switch(c) {
    case 'n': return '\n';
    case 't': return '\t';
    default: return c;
    }
  }      



#line 840 "/home/travis/build/vdun/stoke/stoke/stp/build/lib/Parser/lexsmt.cpp"

#define INITIAL 0
#define COMMENT 1
#define STRING_LITERAL 2
#define USER_VALUE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int smtlex_destroy (void );

int smtget_debug (void );

void smtset_debug (int debug_flag  );

YY_EXTRA_TYPE smtget_extra (void );

void smtset_extra (YY_EXTRA_TYPE user_defined  );

FILE *smtget_in (void );

void smtset_in  (FILE * in_str  );

FILE *smtget_out (void );

void smtset_out  (FILE * out_str  );

int smtget_leng (void );

char *smtget_text (void );

int smtget_lineno (void );

void smtset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int smtwrap (void );
#else
extern int smtwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( smttext, smtleng, 1, smtout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( smtin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( smtin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, smtin))==0 && ferror(smtin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(smtin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int smtlex (void);

#define YY_DECL int smtlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after smttext and smtleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 74 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"

#line 1030 "/home/travis/build/vdun/stoke/stoke/stp/build/lib/Parser/lexsmt.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! smtin )
			smtin = stdin;

		if ( ! smtout )
			smtout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			smtensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				smt_create_buffer(smtin,YY_BUF_SIZE );
		}

		smt_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of smttext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 393 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < smtleng; ++yyl )
				if ( smttext[yyl] == '\n' )
					   
    smtlineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 75 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ /* sk'ip whitespace */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 76 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ smtlval.uintval = strtoul(smttext, NULL, 10); return NUMERAL_TOK; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 79 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ smtlval.str = new std::string(smttext+2); return BVCONST_TOK; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{
  		   char c = smttext[3];
		   if (c == '1') {
		     smtlval.node = new BEEV::ASTNode(parserInterface->CreateOneConst(1));
		   }
		   else {
		     smtlval.node = new BEEV::ASTNode(parserInterface->CreateZeroConst(1));
		   }
		   return BITCONST_TOK;
		};
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ BEGIN COMMENT; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 94 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ BEGIN INITIAL; /* return to normal mode */}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 95 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ /* stay in comment mode */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 97 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ BEGIN STRING_LITERAL;
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ /* escape characters (like \n or \") */
                          _string_lit.insert(_string_lit.end(),
                                             escapeChar(smttext[1])); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ BEGIN INITIAL; /* return to normal mode */
			  smtlval.str = new std::string(_string_lit);
                          return STRING_TOK; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 106 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ _string_lit.insert(_string_lit.end(),*smttext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ BEGIN USER_VALUE;
                          _string_lit.erase(_string_lit.begin(),
                                            _string_lit.end()); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ /* escape characters */
                          _string_lit.insert(_string_lit.end(),smttext[1]); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ BEGIN INITIAL; /* return to normal mode */
			  smtlval.str = new std::string(_string_lit);
                          return USER_VAL_TOK; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 118 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ _string_lit.insert(_string_lit.end(),'\n');}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 119 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ _string_lit.insert(_string_lit.end(),*smttext); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BITVEC_TOK;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 122 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return ARRAY_TOK;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 123 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return TRUE_TOK; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 124 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return FALSE_TOK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 125 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return NOT_TOK; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 126 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return IMPLIES_TOK; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 127 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return ITE_TOK;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 128 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return ITE_TOK;} // This is in the SMTLIB benchmarks.
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 129 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return AND_TOK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 130 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return OR_TOK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 131 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return XOR_TOK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return IFF_TOK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return LET_TOK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return FLET_TOK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 135 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return NOTES_TOK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 136 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SORTS_TOK; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 137 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return FUNS_TOK; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 138 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return PREDS_TOK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 139 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return EXTENSIONS_TOK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 140 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return DEFINITION_TOK; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 141 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return AXIOMS_TOK; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 142 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return LOGIC_TOK; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 143 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SAT_TOK; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 144 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return UNSAT_TOK; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 145 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return UNKNOWN_TOK; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 146 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return ASSUMPTION_TOK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 147 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return FORMULA_TOK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 148 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return STATUS_TOK; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 149 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return DIFFICULTY_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 150 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BENCHMARK_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 151 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SOURCE_TOK;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 152 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return CATEGORY_TOK;} 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 153 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return EXTRASORTS_TOK; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 154 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return EXTRAFUNS_TOK; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 155 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return EXTRAPREDS_TOK; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 156 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return LANGUAGE_TOK; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 157 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return DISTINCT_TOK; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 158 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SELECT_TOK; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 159 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return STORE_TOK; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 160 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return COLON_TOK; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 161 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return LBRACKET_TOK; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 162 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return RBRACKET_TOK; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 163 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return LPAREN_TOK; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 164 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return RPAREN_TOK; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return DOLLAR_TOK; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return QUESTION_TOK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{return EQ_TOK;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 169 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return NAND_TOK;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 170 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return NOR_TOK;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 171 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVLEFTSHIFT_1_TOK;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 172 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVRIGHTSHIFT_1_TOK;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 173 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVARITHRIGHTSHIFT_TOK;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 174 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVPLUS_TOK;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 175 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSUB_TOK;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 176 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVNOT_TOK;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 177 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVMULT_TOK;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 178 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVDIV_TOK;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 179 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SBVDIV_TOK;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 180 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVMOD_TOK;} 
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 181 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SBVREM_TOK;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 182 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return SBVMOD_TOK;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 183 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVNEG_TOK;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 184 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVAND_TOK;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 185 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVOR_TOK;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 186 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVXOR_TOK;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 187 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVNAND_TOK;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 188 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVNOR_TOK;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 189 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVXNOR_TOK;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 190 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVCONCAT_TOK;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 191 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVEXTRACT_TOK;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 192 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVLT_TOK;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 193 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVGT_TOK;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 194 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 195 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 196 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVLT_TOK;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 197 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVGT_TOK;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 198 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 199 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 200 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVLE_TOK;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 201 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVGE_TOK;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 203 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSLT_TOK;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 204 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSGT_TOK;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 205 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 206 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 207 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSLE_TOK;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 208 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSGE_TOK;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 210 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVCOMP_TOK;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 213 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVZX_TOK;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 214 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVSX_TOK;} 
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 215 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVREPEAT_TOK;} 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 217 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVROTATE_LEFT_TOK;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 218 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BVROTATE_RIGHT_TOK;} 
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 220 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BOOLEXTRACT_TOK;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 221 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ return BOOL_TO_BV_TOK;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 223 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{
  string str(smttext);
   bool found = false;
   ASTNode nptr;
   
  if (BEEV::parserInterface->isSymbolAlreadyDeclared(str)) // it's a symbol.
    {
    	nptr= BEEV::parserInterface->LookupOrCreateSymbol(str);
    	found = true;
    }
    else if (BEEV::parserInterface->letMgr->isLetDeclared(str)) // a let.
    {
    	nptr= BEEV::parserInterface->letMgr->resolveLet(str);
    	found = true;
    }

	if (found)
	{
	  smtlval.node = BEEV::parserInterface->newNode(nptr);
	  if ((smtlval.node)->GetType() == BEEV::BOOLEAN_TYPE)
	    return FORMID_TOK;
	  else 
	    return TERMID_TOK;
	   }
	   
    // It hasn't been found. So it's not already declared.
    // it has not been seen before.
	smtlval.str = new std::string(str);
	return STRING_TOK;
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 253 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
{ smterror("Illegal input character."); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 254 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"
ECHO;
	YY_BREAK
#line 1734 "/home/travis/build/vdun/stoke/stoke/stp/build/lib/Parser/lexsmt.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STRING_LITERAL):
case YY_STATE_EOF(USER_VALUE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed smtin at a new source and called
			 * smtlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = smtin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( smtwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * smttext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of smtlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					smtrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			smtrestart(smtin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) smtrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 393);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					smtrestart(smtin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( smtwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve smttext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    smtlineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void smtrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        smtensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            smt_create_buffer(smtin,YY_BUF_SIZE );
	}

	smt_init_buffer(YY_CURRENT_BUFFER,input_file );
	smt_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void smt_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		smtpop_buffer_state();
	 *		smtpush_buffer_state(new_buffer);
     */
	smtensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	smt_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (smtwrap()) processing, but the only time this flag
	 * is looked at is after smtwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void smt_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	smtin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE smt_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) smtalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) smtalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt_create_buffer()" );

	b->yy_is_our_buffer = 1;

	smt_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with smt_create_buffer()
 * 
 */
    void smt_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		smtfree((void *) b->yy_ch_buf  );

	smtfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a smtrestart() or at EOF.
 */
    static void smt_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	smt_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then smt_init_buffer was _probably_
     * called from smtrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void smt_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		smt_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void smtpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	smtensure_buffer_stack();

	/* This block is copied from smt_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from smt_switch_to_buffer. */
	smt_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void smtpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	smt_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		smt_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void smtensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)smtalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smtensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)smtrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in smtensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE smt_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) smtalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in smt_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	smt_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to smtlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       smt_scan_bytes() instead.
 */
YY_BUFFER_STATE smt_scan_string (yyconst char * yystr )
{
    
	return smt_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to smtlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE smt_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) smtalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in smt_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = smt_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in smt_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up smttext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		smttext[smtleng] = (yy_hold_char); \
		(yy_c_buf_p) = smttext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		smtleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int smtget_lineno  (void)
{
        
    return smtlineno;
}

/** Get the input stream.
 * 
 */
FILE *smtget_in  (void)
{
        return smtin;
}

/** Get the output stream.
 * 
 */
FILE *smtget_out  (void)
{
        return smtout;
}

/** Get the length of the current token.
 * 
 */
int smtget_leng  (void)
{
        return smtleng;
}

/** Get the current token.
 * 
 */

char *smtget_text  (void)
{
        return smttext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void smtset_lineno (int  line_number )
{
    
    smtlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see smt_switch_to_buffer
 */
void smtset_in (FILE *  in_str )
{
        smtin = in_str ;
}

void smtset_out (FILE *  out_str )
{
        smtout = out_str ;
}

int smtget_debug  (void)
{
        return smt_flex_debug;
}

void smtset_debug (int  bdebug )
{
        smt_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from smtlex_destroy(), so don't allocate here.
     */

    /* We do not touch smtlineno unless the option is enabled. */
    smtlineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    smtin = stdin;
    smtout = stdout;
#else
    smtin = (FILE *) 0;
    smtout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * smtlex_init()
     */
    return 0;
}

/* smtlex_destroy is for both reentrant and non-reentrant scanners. */
int smtlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		smt_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		smtpop_buffer_state();
	}

	/* Destroy the stack itself. */
	smtfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * smtlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *smtalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *smtrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void smtfree (void * ptr )
{
	free( (char *) ptr );	/* see smtrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 254 "/home/travis/build/vdun/stoke/stoke/stp/lib/Parser/smt.lex"



